// Telegram Web App Integration for Grid Clicker Game
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç

class TelegramWebApp {
  constructor() {
    this.tg = null;
    this.user = null;
    this.isReady = false;
    this.isExpanded = false;
    this.themeParams = {};
    this.viewportHeight = window.innerHeight;
    this.isClosingConfirmationEnabled = false;
    
    console.log('ü§ñ TelegramWebApp initializing...');
    this.init();
  }

  init() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp
      if (typeof window.Telegram !== 'undefined' && window.Telegram.WebApp) {
        this.tg = window.Telegram.WebApp;
        console.log('‚úÖ Telegram WebApp API found');
        this.setupTelegramWebApp();
      } else {
        console.log('‚ö†Ô∏è Running outside Telegram WebApp - using fallback mode');
        this.setupFallbackMode();
      }
    } catch (error) {
      console.error('‚ùå Error initializing TelegramWebApp:', error);
      this.setupFallbackMode();
    }
  }

  setupTelegramWebApp() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
      this.tg.ready();
      this.isReady = true;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.user = this.tg.initDataUnsafe?.user || null;
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã
      this.themeParams = this.tg.themeParams || {};
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
      this.setupAppearance();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers();
      
      // –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
      this.expandViewport();
      
      // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
      this.enableClosingConfirmation();
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
      this.applyTheme();
      
      console.log('üéâ Telegram WebApp initialized successfully');
      console.log('üë§ User:', this.user);
      console.log('üé® Theme:', this.themeParams);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä—É –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      this.notifyGameReady();
      
    } catch (error) {
      console.error('‚ùå Error setting up Telegram WebApp:', error);
      this.setupFallbackMode();
    }
  }

  setupFallbackMode() {
    console.log('üîÑ Setting up fallback mode...');
    this.isReady = true;
    this.user = {
      id: Date.now(),
      first_name: 'Player',
      username: 'player_' + Math.random().toString(36).substr(2, 5),
      language_code: 'en',
      is_bot: false
    };
    this.themeParams = {
      bg_color: '#ffffff',
      text_color: '#000000',
      hint_color: '#999999',
      link_color: '#2481cc',
      button_color: '#2481cc',
      button_text_color: '#ffffff'
    };
    this.applyTheme();
    this.notifyGameReady();
  }

  setupAppearance() {
    if (!this.tg) return;
    
    try {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      this.tg.setHeaderColor('secondary_bg_color');
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
      if (this.tg.setBackgroundColor) {
        this.tg.setBackgroundColor(this.themeParams.bg_color || '#ffffff');
      }
      
      console.log('üé® Appearance configured');
    } catch (error) {
      console.warn('‚ö†Ô∏è Error configuring appearance:', error);
    }
  }

  setupEventHandlers() {
    if (!this.tg) return;
    
    try {
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è viewport
      this.tg.onEvent('viewportChanged', () => {
        this.handleViewportChange();
      });
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
      this.tg.onEvent('themeChanged', () => {
        this.handleThemeChange();
      });
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
      this.tg.onEvent('backButtonClicked', () => {
        this.handleBackButton();
      });
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
      this.tg.onEvent('mainButtonClicked', () => {
        this.handleMainButton();
      });
      
      console.log('üì° Event handlers configured');
    } catch (error) {
      console.warn('‚ö†Ô∏è Error setting up event handlers:', error);
    }
  }

  expandViewport() {
    if (!this.tg) return;
    
    try {
      if (this.tg.expand) {
        this.tg.expand();
        this.isExpanded = true;
        console.log('üì± Viewport expanded');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error expanding viewport:', error);
    }
  }

  enableClosingConfirmation() {
    if (!this.tg) return;
    
    try {
      if (this.tg.enableClosingConfirmation) {
        this.tg.enableClosingConfirmation();
        this.isClosingConfirmationEnabled = true;
        console.log('üîí Closing confirmation enabled');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error enabling closing confirmation:', error);
    }
  }

  applyTheme() {
    try {
      const root = document.documentElement;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
      if (this.themeParams.bg_color) {
        root.style.setProperty('--tg-theme-bg-color', this.themeParams.bg_color);
      }
      if (this.themeParams.text_color) {
        root.style.setProperty('--tg-theme-text-color', this.themeParams.text_color);
      }
      if (this.themeParams.hint_color) {
        root.style.setProperty('--tg-theme-hint-color', this.themeParams.hint_color);
      }
      if (this.themeParams.link_color) {
        root.style.setProperty('--tg-theme-link-color', this.themeParams.link_color);
      }
      if (this.themeParams.button_color) {
        root.style.setProperty('--tg-theme-button-color', this.themeParams.button_color);
      }
      if (this.themeParams.button_text_color) {
        root.style.setProperty('--tg-theme-button-text-color', this.themeParams.button_text_color);
      }
      if (this.themeParams.secondary_bg_color) {
        root.style.setProperty('--tg-theme-secondary-bg-color', this.themeParams.secondary_bg_color);
      }
      
      console.log('üé® Theme applied:', this.themeParams);
    } catch (error) {
      console.warn('‚ö†Ô∏è Error applying theme:', error);
    }
  }

  handleViewportChange() {
    try {
      const newHeight = this.tg?.viewportHeight || window.innerHeight;
      const heightChanged = Math.abs(newHeight - this.viewportHeight) > 50;
      
      if (heightChanged) {
        this.viewportHeight = newHeight;
        console.log('üì± Viewport changed:', newHeight);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É CSS
        document.documentElement.style.setProperty('--tg-viewport-height', `${newHeight}px`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if (window.gameCore && typeof window.gameCore.handleViewportChange === 'function') {
          window.gameCore.handleViewportChange(newHeight);
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error handling viewport change:', error);
    }
  }

  handleThemeChange() {
    try {
      this.themeParams = this.tg?.themeParams || {};
      this.applyTheme();
      console.log('üé® Theme changed:', this.themeParams);
    } catch (error) {
      console.warn('‚ö†Ô∏è Error handling theme change:', error);
    }
  }

  handleBackButton() {
    try {
      console.log('üîô Back button clicked');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –ø–∞–Ω–µ–ª—å –≤ –∏–≥—Ä–µ
      if (window.gameCore?.managers?.ui) {
        const uiManager = window.gameCore.managers.ui;
        if (uiManager.isPanelOpen && uiManager.isPanelOpen()) {
          uiManager.hidePanel();
          return;
        }
      }
      
      // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
      this.showExitConfirmation();
    } catch (error) {
      console.warn('‚ö†Ô∏è Error handling back button:', error);
    }
  }

  handleMainButton() {
    try {
      console.log('‚ö° Main button clicked');
      
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã)
      if (window.gameCore && typeof window.gameCore.autoSave === 'function') {
        window.gameCore.autoSave();
        this.showAlert('üíæ Game saved!');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error handling main button:', error);
    }
  }

  showExitConfirmation() {
    try {
      if (this.tg && this.tg.showConfirm) {
        this.tg.showConfirm('Exit the game?', (confirmed) => {
          if (confirmed) {
            this.close();
          }
        });
      } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        if (confirm('Exit the game?')) {
          window.close();
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error showing exit confirmation:', error);
    }
  }

  showAlert(message) {
    try {
      if (this.tg && this.tg.showAlert) {
        this.tg.showAlert(message);
      } else {
        alert(message);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error showing alert:', error);
    }
  }

  showConfirm(message, callback) {
    try {
      if (this.tg && this.tg.showConfirm) {
        this.tg.showConfirm(message, callback);
      } else {
        const result = confirm(message);
        if (callback) callback(result);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error showing confirm:', error);
      if (callback) callback(false);
    }
  }

  setMainButton(text, color = null) {
    try {
      if (!this.tg || !this.tg.MainButton) return;
      
      this.tg.MainButton.setText(text);
      if (color) {
        this.tg.MainButton.setParams({ color: color });
      }
      this.tg.MainButton.show();
      
      console.log('üîµ Main button set:', text);
    } catch (error) {
      console.warn('‚ö†Ô∏è Error setting main button:', error);
    }
  }

  hideMainButton() {
    try {
      if (this.tg && this.tg.MainButton) {
        this.tg.MainButton.hide();
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error hiding main button:', error);
    }
  }

  showBackButton() {
    try {
      if (this.tg && this.tg.BackButton) {
        this.tg.BackButton.show();
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error showing back button:', error);
    }
  }

  hideBackButton() {
    try {
      if (this.tg && this.tg.BackButton) {
        this.tg.BackButton.hide();
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error hiding back button:', error);
    }
  }

  sendData(data) {
    try {
      if (this.tg && this.tg.sendData) {
        const jsonData = typeof data === 'string' ? data : JSON.stringify(data);
        this.tg.sendData(jsonData);
        console.log('üì§ Data sent to Telegram:', jsonData);
      } else {
        console.log('üì§ Would send data:', data);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error sending data:', error);
    }
  }

  close() {
    try {
      if (this.tg && this.tg.close) {
        this.tg.close();
      } else {
        window.close();
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error closing app:', error);
    }
  }

  notifyGameReady() {
    try {
      // –°–æ–∑–¥–∞—ë–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä—ã
      const event = new CustomEvent('telegramWebAppReady', {
        detail: {
          user: this.user,
          themeParams: this.themeParams,
          isExpanded: this.isExpanded
        }
      });
      
      window.dispatchEvent(event);
      
      // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
      window.telegramWebApp = this;
      
      console.log('üéÆ Game notified about Telegram WebApp readiness');
    } catch (error) {
      console.warn('‚ö†Ô∏è Error notifying game:', error);
    }
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
  get isInTelegram() {
    return !!this.tg;
  }

  get userId() {
    return this.user?.id || null;
  }

  get userName() {
    return this.user?.first_name || 'Player';
  }

  get userLanguage() {
    return this.user?.language_code || 'en';
  }

  get colorScheme() {
    return this.tg?.colorScheme || 'light';
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º–∏
  saveToTelegram(gameData) {
    try {
      const saveData = {
        type: 'game_save',
        userId: this.userId,
        timestamp: Date.now(),
        data: gameData
      };
      
      this.sendData(saveData);
      console.log('üíæ Game data saved to Telegram');
    } catch (error) {
      console.warn('‚ö†Ô∏è Error saving to Telegram:', error);
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  trackEvent(eventName, eventData = {}) {
    try {
      const analyticsData = {
        type: 'analytics',
        event: eventName,
        data: eventData,
        userId: this.userId,
        timestamp: Date.now()
      };
      
      console.log('üìä Analytics event:', analyticsData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      if (this.tg && eventName === 'game_completed') {
        this.sendData(analyticsData);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error tracking event:', error);
    }
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
  onGameStateChange(state) {
    try {
      switch (state) {
        case 'playing':
          this.hideMainButton();
          break;
          
        case 'paused':
          this.setMainButton('Resume Game', this.themeParams.button_color);
          break;
          
        case 'game_over':
          this.setMainButton('Restart Game', '#ff4444');
          break;
          
        case 'menu':
          this.hideMainButton();
          this.hideBackButton();
          break;
          
        case 'in_panel':
          this.showBackButton();
          break;
          
        default:
          this.hideMainButton();
          this.hideBackButton();
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error handling game state change:', error);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  getDebugInfo() {
    return {
      isReady: this.isReady,
      isInTelegram: this.isInTelegram,
      isExpanded: this.isExpanded,
      user: this.user,
      themeParams: this.themeParams,
      viewportHeight: this.viewportHeight,
      colorScheme: this.colorScheme,
      version: this.tg?.version || 'fallback'
    };
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
let telegramWebAppInstance = null;

function initTelegramWebApp() {
  try {
    if (!telegramWebAppInstance) {
      telegramWebAppInstance = new TelegramWebApp();
    }
    return telegramWebAppInstance;
  } catch (error) {
    console.error('‚ùå Failed to initialize TelegramWebApp:', error);
    return null;
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initTelegramWebApp);
} else {
  initTelegramWebApp();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { TelegramWebApp, initTelegramWebApp };

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
window.TelegramWebApp = TelegramWebApp;
window.initTelegramWebApp = initTelegramWebApp;

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∏–≥—Ä–æ–π
window.addEventListener('telegramWebAppReady', (event) => {
  console.log('üéâ Telegram WebApp integration ready!', event.detail);
  
  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏–≥—Ä–æ–π
  if (window.gameCore) {
    try {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –∏–≥—Ä–µ
      const { themeParams } = event.detail;
      if (themeParams) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –¥–ª—è –∏–≥—Ä—ã
        console.log('üé® Applying Telegram theme to game');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error integrating with game:', error);
    }
  }
});

console.log('üì± Telegram WebApp integration script loaded');