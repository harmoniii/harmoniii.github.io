// telegram-webapp.js - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Web App
export class TelegramWebApp {
  constructor() {
    this.tg = null;
    this.user = null;
    this.isInitialized = false;
    this.cloudSaveInterval = null;
    this.lastCloudSave = 0;
    this.cloudSaveCooldown = 120000; // 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º–∏
    
    this.initialize();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
  initialize() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram Web App API
      if (typeof window.Telegram?.WebApp === 'undefined') {
        console.warn('‚ö†Ô∏è Telegram Web App API not available');
        this.initializeMockMode();
        return;
      }

      this.tg = window.Telegram.WebApp;
      console.log('üì± Telegram Web App detected:', this.tg.version);

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web App
      this.setupWebApp();
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.setupUser();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
      this.setupUI();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ–±–ª–∞–∫–æ
      this.setupCloudSaving();
      
      this.isInitialized = true;
      console.log('‚úÖ Telegram Web App integration initialized');
      
    } catch (error) {
      console.error('‚ùå Failed to initialize Telegram Web App:', error);
      this.initializeMockMode();
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web App
  setupWebApp() {
    // –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω
    this.tg.expand();
    
    // –í–∫–ª—é—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Å–≤–∞–π–ø—É
    this.tg.enableClosingConfirmation();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
    this.tg.setHeaderColor('#667eea');
    this.tg.setBackgroundColor('#667eea');
    
    // –í–∫–ª—é—á–∞–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    this.enableHapticFeedback();
    
    console.log('üì± Web App configured');
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  setupUser() {
    if (this.tg.initDataUnsafe?.user) {
      this.user = {
        id: this.tg.initDataUnsafe.user.id,
        firstName: this.tg.initDataUnsafe.user.first_name,
        lastName: this.tg.initDataUnsafe.user.last_name,
        username: this.tg.initDataUnsafe.user.username,
        languageCode: this.tg.initDataUnsafe.user.language_code,
        isPremium: this.tg.initDataUnsafe.user.is_premium || false
      };
      
      console.log('üë§ User data received:', this.user);
    } else {
      console.warn('‚ö†Ô∏è No user data available');
      this.user = {
        id: 'demo',
        firstName: 'Demo',
        lastName: 'User',
        username: 'demo_user',
        languageCode: 'en',
        isPremium: false
      };
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  setupUI() {
    // –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
    this.tg.MainButton.hide();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    this.tg.BackButton.onClick(() => {
      this.handleBackButton();
    });
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    this.setupMobileViewport();
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∏–≥—Ä–µ
    this.preventBodyScroll();
    
    console.log('üì± Mobile UI configured');
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
  setupMobileViewport() {
    const viewportMeta = document.querySelector('meta[name="viewport"]');
    if (viewportMeta) {
      viewportMeta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover';
    }
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É –ø–æ–¥ Telegram
    const gameArea = document.getElementById('game-area');
    if (gameArea) {
      gameArea.style.minHeight = `${this.tg.viewportHeight}px`;
      gameArea.style.paddingBottom = 'env(safe-area-inset-bottom)';
    }
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ viewport
    this.tg.onEvent('viewportChanged', () => {
      this.handleViewportChange();
    });
  }

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ body
  preventBodyScroll() {
    document.body.style.overflow = 'hidden';
    document.body.style.position = 'fixed';
    document.body.style.width = '100%';
    document.body.style.height = '100%';
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º pull-to-refresh
    document.addEventListener('touchstart', (e) => {
      if (e.touches.length > 1) {
        e.preventDefault();
      }
    }, { passive: false });
    
    document.addEventListener('touchmove', (e) => {
      e.preventDefault();
    }, { passive: false });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ–±–ª–∞–∫–æ
  setupCloudSaving() {
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    this.cloudSaveInterval = setInterval(() => {
      this.performCloudSave();
    }, this.cloudSaveCooldown);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    this.tg.onEvent('webAppClose', () => {
      this.performCloudSave(true);
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        this.performCloudSave();
      }
    });
    
    console.log('‚òÅÔ∏è Cloud saving configured');
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ–±–ª–∞–∫–æ
  async performCloudSave(force = false) {
    const now = Date.now();
    
    if (!force && now - this.lastCloudSave < this.cloudSaveCooldown) {
      return; // –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
    
    try {
      const gameCore = window.gameCore;
      if (!gameCore || !gameCore.gameState) {
        console.warn('‚ö†Ô∏è Game not ready for cloud save');
        return;
      }
      
      const saveData = gameCore.gameState.getSaveData();
      if (!saveData) {
        console.warn('‚ö†Ô∏è No save data to upload');
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const cloudData = {
        type: 'game_save',
        userId: this.user.id,
        data: saveData,
        timestamp: now,
        gameVersion: saveData.saveVersion || '1.0',
        userInfo: {
          firstName: this.user.firstName,
          username: this.user.username
        }
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Telegram Web App API
      this.tg.sendData(JSON.stringify(cloudData));
      
      this.lastCloudSave = now;
      console.log('‚òÅÔ∏è Cloud save completed');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      this.showHapticFeedback('success');
      
    } catch (error) {
      console.error('‚ùå Cloud save failed:', error);
      this.showHapticFeedback('error');
    }
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑ –æ–±–ª–∞–∫–∞
  async loadFromCloud() {
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ main button
      this.tg.MainButton.setText('üì• Loading from Cloud...');
      this.tg.MainButton.show();
      this.tg.MainButton.showProgress();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
      const loadRequest = {
        type: 'load_request',
        userId: this.user.id,
        timestamp: Date.now()
      };
      
      this.tg.sendData(JSON.stringify(loadRequest));
      
      console.log('‚òÅÔ∏è Cloud load requested');
      
    } catch (error) {
      console.error('‚ùå Cloud load failed:', error);
      this.hideMainButton();
      this.showHapticFeedback('error');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
  async sendGameStatistics() {
    try {
      const gameCore = window.gameCore;
      if (!gameCore || !gameCore.gameState) return;
      
      const stats = this.gatherGameStatistics(gameCore);
      
      const statisticsData = {
        type: 'game_statistics',
        userId: this.user.id,
        stats: stats,
        timestamp: Date.now()
      };
      
      this.tg.sendData(JSON.stringify(statisticsData));
      console.log('üìä Statistics sent to bot');
      
    } catch (error) {
      console.error('‚ùå Failed to send statistics:', error);
    }
  }

  // –°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
  gatherGameStatistics(gameCore) {
    const gameState = gameCore.gameState;
    const resources = gameState.resources || {};
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã
    const totalResources = Object.values(resources).reduce((sum, val) => sum + (val || 0), 0);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —É—Ä–æ–≤–Ω–∏ –∑–¥–∞–Ω–∏–π
    const buildingLevels = Object.values(gameState.buildings || {})
      .reduce((sum, building) => sum + (building.level || 0), 0);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞–≤—ã–∫–æ–≤
    const skillLevels = Object.values(gameState.skills || {})
      .reduce((sum, skill) => sum + (skill.level || 0), 0);
    
    return {
      totalResources,
      maxCombo: gameState.combo?.count || 0,
      totalClicks: gameState.achievements?.statistics?.totalClicks || 0,
      buildingLevels,
      skillLevels,
      raidsCompleted: gameState.raids?.statistics?.totalRaids || 0,
      peopleLost: gameState.raids?.statistics?.peopleLost || 0,
      // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ–±—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ)
      playtimeEstimate: Math.floor((totalResources + buildingLevels * 100 + skillLevels * 200) / 60)
    };
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥
  showLeaderboard() {
    try {
      const leaderboardData = {
        type: 'show_leaderboard',
        userId: this.user.id,
        timestamp: Date.now()
      };
      
      this.tg.sendData(JSON.stringify(leaderboardData));
      console.log('üèÜ Leaderboard requested');
      
    } catch (error) {
      console.error('‚ùå Failed to show leaderboard:', error);
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
  exportGameData() {
    try {
      const gameCore = window.gameCore;
      if (!gameCore || !gameCore.gameState) {
        throw new Error('Game not ready');
      }
      
      const exportData = {
        type: 'game_export',
        userId: this.user.id,
        data: gameCore.gameState.getSaveData(),
        stats: this.gatherGameStatistics(gameCore),
        timestamp: Date.now()
      };
      
      this.tg.sendData(JSON.stringify(exportData));
      console.log('üì§ Game data exported');
      
    } catch (error) {
      console.error('‚ùå Export failed:', error);
      this.showHapticFeedback('error');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
  reportError(error) {
    try {
      const errorData = {
        type: 'error_report',
        userId: this.user.id,
        error: {
          message: error.message || 'Unknown error',
          stack: error.stack || 'No stack trace',
          timestamp: Date.now(),
          url: window.location.href,
          userAgent: navigator.userAgent
        },
        gameState: this.getGameStateSnapshot()
      };
      
      this.tg.sendData(JSON.stringify(errorData));
      console.log('üêõ Error report sent');
      
    } catch (reportError) {
      console.error('‚ùå Failed to send error report:', reportError);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
  getGameStateSnapshot() {
    try {
      const gameCore = window.gameCore;
      if (!gameCore || !gameCore.gameState) return null;
      
      return {
        hasResources: !!gameCore.gameState.resources,
        resourceCount: Object.keys(gameCore.gameState.resources || {}).length,
        skillPoints: gameCore.gameState.skillPoints || 0,
        combo: gameCore.gameState.combo?.count || 0,
        buildingCount: Object.keys(gameCore.gameState.buildings || {}).length,
        skillCount: Object.keys(gameCore.gameState.skills || {}).length,
        activeBuffs: (gameCore.gameState.buffs || []).length,
        activeDebuffs: (gameCore.gameState.debuffs || []).length
      };
    } catch (error) {
      return { error: error.message };
    }
  }

  // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  showHapticFeedback(type = 'selection') {
    try {
      if (this.tg.HapticFeedback) {
        switch (type) {
          case 'success':
            this.tg.HapticFeedback.notificationOccurred('success');
            break;
          case 'error':
            this.tg.HapticFeedback.notificationOccurred('error');
            break;
          case 'warning':
            this.tg.HapticFeedback.notificationOccurred('warning');
            break;
          case 'impact':
            this.tg.HapticFeedback.impactOccurred('medium');
            break;
          default:
            this.tg.HapticFeedback.selectionChanged();
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Haptic feedback not available:', error);
    }
  }

  // –í–∫–ª—é—á–∏—Ç—å –≤–∏–±—Ä–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–∫–æ–≤
  enableHapticFeedback() {
    document.addEventListener('click', (e) => {
      // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      if (e.target.matches('button, .buy-button, .item-card, .resource-display')) {
        this.showHapticFeedback('selection');
      }
    });
    
    // –û—Å–æ–±–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ —Ü–µ–ª—å
    if (typeof window.eventBus !== 'undefined') {
      window.eventBus.subscribe('zone:hit', (data) => {
        if (data.isTarget) {
          this.showHapticFeedback('impact');
        }
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
  handleBackButton() {
    const gameCore = window.gameCore;
    if (gameCore && gameCore.managers && gameCore.managers.ui) {
      const currentPanel = gameCore.managers.ui.getCurrentPanel();
      
      if (currentPanel) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–Ω–µ–ª—å
        gameCore.managers.ui.hidePanel();
        this.tg.BackButton.hide();
      } else {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º Web App
        this.tg.close();
      }
    } else {
      this.tg.close();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ viewport
  handleViewportChange() {
    const gameArea = document.getElementById('game-area');
    if (gameArea) {
      gameArea.style.minHeight = `${this.tg.viewportHeight}px`;
    }
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º canvas –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const gameCore = window.gameCore;
    if (gameCore && gameCore.gameLoop) {
      gameCore.gameLoop.forceRedraw();
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º
  showMainButton(text, callback) {
    this.tg.MainButton.setText(text);
    this.tg.MainButton.show();
    
    this.tg.MainButton.onClick(() => {
      if (callback) callback();
    });
  }

  // –°–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
  hideMainButton() {
    this.tg.MainButton.hide();
    this.tg.MainButton.hideProgress();
  }

  // Mock —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram
  initializeMockMode() {
    console.log('üß™ Initializing mock mode for testing');
    
    this.tg = {
      version: '6.0-mock',
      expand: () => console.log('Mock: expand()'),
      close: () => console.log('Mock: close()'),
      sendData: (data) => console.log('Mock: sendData', data),
      MainButton: {
        show: () => console.log('Mock: MainButton.show()'),
        hide: () => console.log('Mock: MainButton.hide()'),
        setText: (text) => console.log('Mock: MainButton.setText', text),
        showProgress: () => console.log('Mock: MainButton.showProgress()'),
        hideProgress: () => console.log('Mock: MainButton.hideProgress()'),
        onClick: (callback) => console.log('Mock: MainButton.onClick', callback)
      },
      BackButton: {
        show: () => console.log('Mock: BackButton.show()'),
        hide: () => console.log('Mock: BackButton.hide()'),
        onClick: (callback) => console.log('Mock: BackButton.onClick', callback)
      },
      HapticFeedback: {
        selectionChanged: () => console.log('Mock: haptic selection'),
        impactOccurred: (style) => console.log('Mock: haptic impact', style),
        notificationOccurred: (type) => console.log('Mock: haptic notification', type)
      },
      viewportHeight: window.innerHeight,
      onEvent: (event, callback) => console.log('Mock: onEvent', event, callback),
      enableClosingConfirmation: () => console.log('Mock: enableClosingConfirmation()'),
      setHeaderColor: (color) => console.log('Mock: setHeaderColor', color),
      setBackgroundColor: (color) => console.log('Mock: setBackgroundColor', color)
    };
    
    this.user = {
      id: 'mock_user_123',
      firstName: 'Mock',
      lastName: 'User',
      username: 'mock_user',
      languageCode: 'en',
      isPremium: false
    };
    
    this.isInitialized = true;
  }

  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏–≥—Ä–æ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
  setupGameIntegration() {
    if (typeof window.eventBus === 'undefined') {
      console.warn('‚ö†Ô∏è EventBus not available for integration');
      return;
    }
    
    const eventBus = window.eventBus;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
    eventBus.subscribe('achievement:unlocked', () => {
      this.sendGameStatistics();
    });
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
    eventBus.subscribe('building:bought', () => {
      this.performCloudSave();
    });
    
    eventBus.subscribe('skill:bought', () => {
      this.performCloudSave();
    });
    
    eventBus.subscribe('raid:completed', () => {
      this.performCloudSave();
      this.sendGameStatistics();
    });
    
    // –í–∏–±—Ä–∞—Ü–∏—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    eventBus.subscribe('critical_hit', () => {
      this.showHapticFeedback('impact');
    });
    
    eventBus.subscribe('buff_applied', () => {
      this.showHapticFeedback('success');
    });
    
    eventBus.subscribe('debuff_applied', () => {
      this.showHapticFeedback('warning');
    });
    
    console.log('üéÆ Game integration set up');
  }

  // –°–æ–∑–¥–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
  createQuickActions() {
    const quickActionsContainer = document.createElement('div');
    quickActionsContainer.id = 'telegram-quick-actions';
    quickActionsContainer.innerHTML = `
      <div class="quick-actions-panel">
        <button id="cloud-save-btn" class="quick-action-btn">‚òÅÔ∏è Save</button>
        <button id="cloud-load-btn" class="quick-action-btn">üì• Load</button>
        <button id="leaderboard-btn" class="quick-action-btn">üèÜ Top</button>
        <button id="export-btn" class="quick-action-btn">üì§ Export</button>
      </div>
    `;
    
    quickActionsContainer.style.cssText = `
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 1000;
      background: rgba(0,0,0,0.1);
      padding: 8px;
      border-radius: 20px;
      backdrop-filter: blur(10px);
    `;
    
    document.body.appendChild(quickActionsContainer);
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.getElementById('cloud-save-btn').onclick = () => {
      this.performCloudSave(true);
      this.showHapticFeedback('success');
    };
    
    document.getElementById('cloud-load-btn').onclick = () => {
      this.loadFromCloud();
    };
    
    document.getElementById('leaderboard-btn').onclick = () => {
      this.showLeaderboard();
    };
    
    document.getElementById('export-btn').onclick = () => {
      this.exportGameData();
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  getIntegrationInfo() {
    return {
      isInitialized: this.isInitialized,
      isTelegram: typeof window.Telegram?.WebApp !== 'undefined',
      user: this.user,
      viewportHeight: this.tg?.viewportHeight || window.innerHeight,
      version: this.tg?.version || 'unknown',
      lastCloudSave: this.lastCloudSave,
      cloudSaveInterval: !!this.cloudSaveInterval
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  destroy() {
    if (this.cloudSaveInterval) {
      clearInterval(this.cloudSaveInterval);
      this.cloudSaveInterval = null;
    }
    
    if (this.tg?.MainButton) {
      this.tg.MainButton.hide();
    }
    
    if (this.tg?.BackButton) {
      this.tg.BackButton.hide();
    }
    
    console.log('üßπ Telegram Web App integration destroyed');
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let telegramWebApp = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    telegramWebApp = new TelegramWebApp();
    window.telegramWebApp = telegramWebApp;
  });
} else {
  telegramWebApp = new TelegramWebApp();
  window.telegramWebApp = telegramWebApp;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
export { TelegramWebApp };
export default telegramWebApp;