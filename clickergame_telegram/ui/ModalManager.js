// ui/ModalManager.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { getResourceEmoji } from '../config/ResourceConfig.js';
import { GAME_CONSTANTS } from '../config/GameConstants.js';

export class ModalManager extends CleanupMixin {
  constructor(gameState) {
    super();
    
    this.gameState = gameState;
    this.activeModals = new Set();
    
    this.initializeModals();
    this.bindEvents();
    
    console.log('ü™ü ModalManager initialized');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  initializeModals() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    this.mysteryModal = document.getElementById('mystery-modal');
    this.infoModal = document.getElementById('info-modal');
    
    if (!this.mysteryModal) {
      this.mysteryModal = this.createModal('mystery-modal');
    }
    
    if (!this.infoModal) {
      this.infoModal = this.createModal('info-modal');
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (this.mysteryModal) {
      this.registerDOMElement(this.mysteryModal);
    }
    if (this.infoModal) {
      this.registerDOMElement(this.infoModal);
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  createModal(id) {
    const modal = document.createElement('div');
    modal.id = id;
    modal.className = 'modal hidden';
    document.body.appendChild(modal);
    return modal;
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    // Mystery Box —Å–æ–±—ã—Ç–∏–µ
    eventBus.subscribe(GameEvents.MYSTERY_BOX, (data) => {
      if (Array.isArray(data)) {
        this.showMysteryBox(data);
      }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    this.addEventListener(document, 'click', (e) => {
      if (e.target.classList.contains('modal')) {
        this.hideModal(e.target);
      }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    this.addEventListener(document, 'keydown', (e) => {
      if (e.key === 'Escape') {
        this.hideAllModals();
      }
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å Mystery Box
  showMysteryBox(options) {
    if (!this.isActive() || !Array.isArray(options) || options.length < 3) {
      console.warn('Invalid mystery box options:', options);
      return;
    }
    
    this.mysteryModal.innerHTML = this.createMysteryBoxContent(options);
    this.showModal(this.mysteryModal);
    
    console.log('üéÅ Mystery Box shown with options:', options);
  }

  // –°–æ–∑–¥–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Mystery Box
  createMysteryBoxContent(options) {
    const buttonsHtml = options.map(resource => {
      const emoji = getResourceEmoji(resource);
      return `
        <button class="mystery-option" data-resource="${resource}">
          <span class="resource-icon">${emoji}</span>
          <span class="resource-name">+5 ${resource}</span>
        </button>
      `;
    }).join('');
    
    const content = `
      <div class="modal-content mystery-box-content">
        <h3>üì¶ Mystery Box</h3>
        <p>Choose your reward:</p>
        <div class="mystery-options">
          ${buttonsHtml}
        </div>
        <div class="modal-footer">
          <button class="modal-close">Cancel</button>
        </div>
      </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ HTML
    this.createTimeout(() => {
      this.bindMysteryBoxHandlers();
    }, 10);
    
    return content;
  }

  // –ü—Ä–∏–≤—è–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Mystery Box
  bindMysteryBoxHandlers() {
    if (!this.mysteryModal) return;
    
    const mysteryOptions = this.mysteryModal.querySelectorAll('.mystery-option');
    const closeButton = this.mysteryModal.querySelector('.modal-close');
    
    mysteryOptions.forEach(button => {
      this.addEventListener(button, 'click', (e) => {
        const resource = e.currentTarget.dataset.resource;
        this.handleMysteryBoxChoice(resource);
      });
    });
    
    if (closeButton) {
      this.addEventListener(closeButton, 'click', () => {
        this.hideModal(this.mysteryModal);
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –≤ Mystery Box
  handleMysteryBoxChoice(resource) {
    if (!resource) return;
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å
    if (this.gameState.resources && this.gameState.resources.hasOwnProperty(resource)) {
      const amount = 5;
      if (typeof this.gameState.addResource === 'function') {
        this.gameState.addResource(resource, amount);
      } else {
        this.gameState.resources[resource] = (this.gameState.resources[resource] || 0) + amount;
      }
      
      eventBus.emit(GameEvents.RESOURCE_CHANGED, { 
        resource: resource, 
        amount: this.gameState.resources[resource] 
      });
      
      eventBus.emit(GameEvents.NOTIFICATION, `üéÅ Received: +${amount} ${resource}`);
    } else {
      console.warn(`Invalid resource from mystery box: ${resource}`);
      eventBus.emit(GameEvents.NOTIFICATION, '‚ùå Invalid reward selected');
    }
    
    this.hideModal(this.mysteryModal);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  showInfoModal(title, content, options = {}) {
    if (!this.infoModal) return;
    
    const modalContent = this.createInfoModalContent(title, content, options);
    this.infoModal.innerHTML = modalContent;
    this.showModal(this.infoModal);
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.bindInfoModalHandlers(options);
  }

  // –°–æ–∑–¥–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  createInfoModalContent(title, content, options) {
    const buttonsHtml = options.buttons ? 
      options.buttons.map(button => 
        `<button class="modal-button ${button.class || ''}" data-action="${button.action || ''}">${button.text}</button>`
      ).join('') : 
      '<button class="modal-close">Close</button>';
    
    return `
      <div class="modal-content info-modal-content">
        <h3>${title}</h3>
        <div class="modal-body">
          ${content}
        </div>
        <div class="modal-footer">
          ${buttonsHtml}
        </div>
      </div>
    `;
  }

  // –ü—Ä–∏–≤—è–∑–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  bindInfoModalHandlers(options) {
    if (!this.infoModal) return;
    
    const buttons = this.infoModal.querySelectorAll('.modal-button, .modal-close');
    
    buttons.forEach(button => {
      this.addEventListener(button, 'click', (e) => {
        const action = e.currentTarget.dataset.action;
        
        if (action && options.onAction) {
          options.onAction(action);
        }
        
        this.hideModal(this.infoModal);
      });
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  showConfirmModal(title, message, onConfirm, onCancel = null) {
    const content = `<p>${message}</p>`;
    const options = {
      buttons: [
        { text: 'Confirm', action: 'confirm', class: 'btn-confirm' },
        { text: 'Cancel', action: 'cancel', class: 'btn-cancel' }
      ],
      onAction: (action) => {
        if (action === 'confirm' && onConfirm) {
          onConfirm();
        } else if (action === 'cancel' && onCancel) {
          onCancel();
        }
      }
    };
    
    this.showInfoModal(title, content, options);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  showAchievementModal(achievement) {
    const content = `
      <div class="achievement-modal">
        <div class="achievement-icon">${achievement.icon || 'üèÜ'}</div>
        <div class="achievement-info">
          <h4>${achievement.title}</h4>
          <p>${achievement.description}</p>
          ${achievement.reward ? `<div class="achievement-reward">Reward: ${achievement.reward}</div>` : ''}
        </div>
      </div>
    `;
    
    this.showInfoModal('üéâ Achievement Unlocked!', content);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    this.createTimeout(() => {
      if (this.infoModal) {
        this.hideModal(this.infoModal);
      }
    }, GAME_CONSTANTS.SKILL_NOTIFICATION_DURATION);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏
  showLoadingModal(message = 'Loading...') {
    const content = `
      <div class="loading-modal">
        <div class="loading-spinner"></div>
        <p>${message}</p>
      </div>
    `;
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingModal = this.createModal('loading-modal');
    loadingModal.innerHTML = this.createInfoModalContent('', content);
    loadingModal.classList.add('loading-modal-container');
    
    this.registerDOMElement(loadingModal);
    this.showModal(loadingModal);
    
    return loadingModal;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  showModal(modal) {
    if (!modal) return;
    
    modal.classList.remove('hidden');
    this.activeModals.add(modal);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    modal.style.opacity = '0';
    modal.style.transform = 'scale(0.8)';
    
    this.createTimeout(() => {
      if (modal) {
        modal.style.transition = 'all 0.3s ease-out';
        modal.style.opacity = '1';
        modal.style.transform = 'scale(1)';
      }
    }, 10);
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.body.style.overflow = 'hidden';
  }

  // –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  hideModal(modal) {
    if (!modal || !this.activeModals.has(modal)) return;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    modal.style.transition = 'all 0.3s ease-in';
    modal.style.opacity = '0';
    modal.style.transform = 'scale(0.8)';
    
    this.createTimeout(() => {
      if (modal) {
        modal.classList.add('hidden');
        this.activeModals.delete(modal);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        if (this.activeModals.size === 0) {
          document.body.style.overflow = '';
        }
      }
    }, 300);
  }

  // –°–∫—Ä—ã—Ç—å –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  hideAllModals() {
    const modalsToHide = Array.from(this.activeModals);
    modalsToHide.forEach(modal => this.hideModal(modal));
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  isModalOpen(modalId = null) {
    if (modalId) {
      const modal = document.getElementById(modalId);
      return modal && this.activeModals.has(modal);
    }
    return this.activeModals.size > 0;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  getActiveModals() {
    return Array.from(this.activeModals);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  showCustomModal(config) {
    const {
      id = 'custom-modal',
      title = 'Modal',
      content = '',
      buttons = [{ text: 'Close', action: 'close' }],
      onAction = null,
      autoClose = null,
      className = ''
    } = config;
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    let modal = document.getElementById(id);
    if (!modal) {
      modal = this.createModal(id);
      this.registerDOMElement(modal);
    }
    
    if (className) {
      modal.className = `modal ${className}`;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const options = { buttons, onAction };
    modal.innerHTML = this.createInfoModalContent(title, content, options);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    this.showModal(modal);
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.bindInfoModalHandlers(options);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    if (autoClose && typeof autoClose === 'number') {
      this.createTimeout(() => {
        this.hideModal(modal);
      }, autoClose);
    }
    
    return modal;
  }

  // –°–æ–∑–¥–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  showPopup(message, type = 'info', duration = 3000) {
    const popup = document.createElement('div');
    popup.className = `popup popup-${type}`;
    popup.textContent = message;
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    popup.style.position = 'fixed';
    popup.style.top = '20px';
    popup.style.right = '20px';
    popup.style.zIndex = '10000';
    popup.style.padding = '10px 15px';
    popup.style.borderRadius = '5px';
    popup.style.color = 'white';
    popup.style.fontWeight = 'bold';
    popup.style.opacity = '0';
    popup.style.transform = 'translateX(100%)';
    popup.style.transition = 'all 0.3s ease';
    
    // –¶–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø—É
    const colors = {
      info: '#2196F3',
      success: '#4CAF50',
      warning: '#FF9800',
      error: '#f44336'
    };
    popup.style.background = colors[type] || colors.info;
    
    document.body.appendChild(popup);
    this.registerDOMElement(popup);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    this.createTimeout(() => {
      if (popup) {
        popup.style.opacity = '1';
        popup.style.transform = 'translateX(0)';
      }
    }, 10);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    this.createTimeout(() => {
      if (popup) {
        popup.style.opacity = '0';
        popup.style.transform = 'translateX(100%)';
        
        this.createTimeout(() => {
          if (popup && document.body.contains(popup)) {
            document.body.removeChild(popup);
          }
        }, 300);
      }
    }, duration);
    
    return popup;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  getModalStats() {
    return {
      activeModals: this.activeModals.size,
      totalModalsInDOM: document.querySelectorAll('.modal').length,
      mysteryModalVisible: this.mysteryModal && !this.mysteryModal.classList.contains('hidden'),
      infoModalVisible: this.infoModal && !this.infoModal.classList.contains('hidden')
    };
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ ModalManager cleanup started');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    this.hideAllModals();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.body.style.overflow = '';
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    super.destroy();
    
    console.log('‚úÖ ModalManager destroyed');
  }
}