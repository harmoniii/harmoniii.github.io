/**
 * DataLoader - –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
 */
export class DataLoader {
  constructor() {
    this.cache = new Map();
    this.loadPromises = new Map();
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
   * @param {string} path - –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
   * @param {boolean} useCache - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
   * @returns {Promise<Object>} Parsed JSON data
   */
  async loadData(path, useCache = true) {
    if (useCache && this.cache.has(path)) {
      console.log(`üì¶ DataLoader: Using cached data for ${path}`);
      return this.cache.get(path);
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if (this.loadPromises.has(path)) {
      console.log(`‚è≥ DataLoader: Waiting for ongoing request for ${path}`);
      return this.loadPromises.get(path);
    }

    const loadPromise = this._fetchAndParseData(path);
    this.loadPromises.set(path, loadPromise);

    try {
      const data = await loadPromise;
      
      if (useCache) {
        this.cache.set(path, data);
        console.log(`‚úÖ DataLoader: Cached data for ${path}`);
      }

      this.loadPromises.delete(path);
      return data;
    } catch (error) {
      this.loadPromises.delete(path);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç—Ä–æ–µ–Ω–∏–π
   * @returns {Promise<Object>} Buildings configuration
   */
  async loadBuildingsData() {
    try {
      const data = await this.loadData('data/buildings.json');
      console.log(`üèóÔ∏è Loaded ${data.buildings?.length || 0} building definitions`);
      return {
        buildings: data.buildings || [],
        categories: data.categories || {}
      };
    } catch (error) {
      console.error('‚ùå Failed to load buildings data:', error);
      return this._getFallbackBuildingsData();
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞–≤—ã–∫–æ–≤
   * @returns {Promise<Object>} Skills configuration
   */
  async loadSkillsData() {
    try {
      const data = await this.loadData('data/skills.json');
      console.log(`üéØ Loaded ${data.skills?.length || 0} skill definitions`);
      return {
        skills: data.skills || [],
        categories: data.categories || {}
      };
    } catch (error) {
      console.error('‚ùå Failed to load skills data:', error);
      return this._getFallbackSkillsData();
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–µ–π–¥–æ–≤
   * @returns {Promise<Object>} Raids configuration
   */
  async loadRaidsData() {
    try {
      const data = await this.loadData('data/raids.json');
      console.log(`‚öîÔ∏è Loaded ${data.raids?.length || 0} raid definitions`);
      return {
        raids: data.raids || [],
        specialRewards: data.specialRewards || {},
        difficulties: data.difficulties || {}
      };
    } catch (error) {
      console.error('‚ùå Failed to load raids data:', error);
      return this._getFallbackRaidsData();
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä—ã–Ω–∫–∞
   * @returns {Promise<Object>} Market configuration
   */
  async loadMarketData() {
    try {
      const data = await this.loadData('data/market.json');
      console.log(`üõí Loaded ${data.items?.length || 0} market item definitions`);
      return {
        items: data.items || [],
        categories: data.categories || {}
      };
    } catch (error) {
      console.error('‚ùå Failed to load market data:', error);
      return this._getFallbackMarketData();
    }
  }

  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
   * @private
   */
  async _fetchAndParseData(path) {
    console.log(`üì• DataLoader: Fetching ${path}...`);
    
    try {
      const response = await fetch(path);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log(`‚úÖ DataLoader: Successfully loaded ${path}`);
      return data;
    } catch (error) {
      console.error(`‚ùå DataLoader: Failed to load ${path}:`, error);
      throw new Error(`Failed to load data from ${path}: ${error.message}`);
    }
  }

  /**
   * –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–æ–µ–Ω–∏–π (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä)
   * @private
   */
  _getFallbackBuildingsData() {
    console.warn('‚ö†Ô∏è Using fallback buildings data');
    return {
      buildings: [
        {
          id: 'sawmill',
          img: 'ü™ö',
          name: 'Sawmill',
          description: 'Produces wood automatically',
          price: { wood: 0, stone: 10, iron: 5 },
          production: { resource: 'wood', amount: 1, interval: 10000 },
          maxLevel: 10,
          category: 'production'
        }
      ],
      categories: {
        production: 'üè≠ Production'
      }
    };
  }

  /**
   * –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä)
   * @private
   */
  _getFallbackSkillsData() {
    console.warn('‚ö†Ô∏è Using fallback skills data');
    return {
      skills: [
        {
          id: 'goldMultiplier',
          name: 'Golden Touch',
          icon: 'üí∞',
          description: 'Increase gold gain from clicks',
          category: 'clicking',
          maxLevel: 20,
          baseCost: 1,
          costMultiplier: 1.2,
          effect: {
            type: 'multiplier',
            target: 'gold',
            value: 0.05
          }
        }
      ],
      categories: {
        clicking: 'Clicking Skills'
      }
    };
  }

  /**
   * –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–π–¥–æ–≤ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä)
   * @private
   */
  _getFallbackRaidsData() {
    console.warn('‚ö†Ô∏è Using fallback raids data');
    return {
      raids: [
        {
          id: 'city_ruins',
          name: 'üèöÔ∏è City Ruins',
          description: 'Basic exploration raid',
          difficulty: 'beginner',
          unlockCondition: { building: 'watchTower', level: 1 },
          requirements: { people: 4, food: 12, water: 8 },
          duration: 120000,
          riskPercentage: 20,
          rewards: {
            guaranteed: [
              { resource: 'wood', min: 2, max: 5 }
            ],
            chance: []
          },
          category: 'exploration'
        }
      ],
      specialRewards: {},
      difficulties: {
        beginner: {
          name: 'Beginner',
          color: '#28a745',
          description: 'Low risk expeditions'
        }
      }
    };
  }

  /**
   * –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—ã–Ω–∫–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä)
   * @private
   */
  _getFallbackMarketData() {
    console.warn('‚ö†Ô∏è Using fallback market data');
    return {
      items: [
        {
          id: 'wood',
          name: 'Wood',
          icon: 'üå≤',
          description: 'Basic building material',
          basePrice: { gold: 500 },
          reward: { wood: 1 },
          category: 'resources',
          adaptive: true,
          scalingFactor: 1.1
        }
      ],
      categories: {
        resources: 'Basic Resources'
      }
    };
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à
   */
  clearCache() {
    this.cache.clear();
    console.log('üßπ DataLoader: Cache cleared');
  }

  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns {Promise<Object>} –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async preloadAllData() {
    console.log('üöÄ DataLoader: Preloading all configuration data...');
    
    try {
      const [buildings, skills, raids, market] = await Promise.all([
        this.loadBuildingsData(),
        this.loadSkillsData(),
        this.loadRaidsData(),
        this.loadMarketData()
      ]);

      console.log('‚úÖ DataLoader: All data preloaded successfully');
      
      return {
        buildings,
        skills,
        raids,
        market
      };
    } catch (error) {
      console.error('‚ùå DataLoader: Failed to preload all data:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
   * @returns {Object} Cache statistics
   */
  getCacheInfo() {
    return {
      cachedFiles: Array.from(this.cache.keys()),
      cacheSize: this.cache.size,
      pendingRequests: Array.from(this.loadPromises.keys())
    };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–µ–Ω–∏–π
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  validateBuildingsData(data) {
    if (!data || !Array.isArray(data.buildings)) {
      console.error('‚ùå Invalid buildings data: missing buildings array');
      return false;
    }

    for (const building of data.buildings) {
      if (!building.id || !building.name || !building.price) {
        console.error('‚ùå Invalid building data:', building);
        return false;
      }
    }

    console.log('‚úÖ Buildings data validation passed');
    return true;
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  validateSkillsData(data) {
    if (!data || !Array.isArray(data.skills)) {
      console.error('‚ùå Invalid skills data: missing skills array');
      return false;
    }

    for (const skill of data.skills) {
      if (!skill.id || !skill.name || !skill.effect) {
        console.error('‚ùå Invalid skill data:', skill);
        return false;
      }
    }

    console.log('‚úÖ Skills data validation passed');
    return true;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
export const dataLoader = new DataLoader();

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (typeof window !== 'undefined') {
  window.dataLoader = dataLoader;
}