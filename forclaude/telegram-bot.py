#!/usr/bin/env python3
# telegram-bot.py - –°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å –±–æ—Ç–∞ –¥–ª—è Grid Clicker Game

import logging
import json
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import sqlite3
import os
from pathlib import Path

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class GridClickerBot:
    def __init__(self, token: str, webapp_url: str):
        self.token = token
        self.webapp_url = webapp_url
        self.db_path = "grid_clicker_bot.db"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_database()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                language_code TEXT,
                is_premium BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_sessions INTEGER DEFAULT 0
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS game_sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                session_start TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                session_end TIMESTAMP,
                total_clicks INTEGER DEFAULT 0,
                max_combo INTEGER DEFAULT 0,
                resources_gained INTEGER DEFAULT 0,
                buildings_built INTEGER DEFAULT 0,
                skills_learned INTEGER DEFAULT 0,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –∏–≥—Ä—ã
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS game_saves (
                user_id INTEGER PRIMARY KEY,
                save_data TEXT,
                save_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                version TEXT,
                backup_count INTEGER DEFAULT 0,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_statistics (
                user_id INTEGER PRIMARY KEY,
                total_playtime_hours REAL DEFAULT 0,
                total_resources REAL DEFAULT 0,
                highest_combo INTEGER DEFAULT 0,
                total_clicks INTEGER DEFAULT 0,
                buildings_built INTEGER DEFAULT 0,
                skills_learned INTEGER DEFAULT 0,
                raids_completed INTEGER DEFAULT 0,
                achievements_unlocked INTEGER DEFAULT 0,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS leaderboard (
                user_id INTEGER,
                category TEXT,
                score REAL,
                rank INTEGER,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, category),
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("Database initialized successfully")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("leaderboard", self.leaderboard_command))
        self.application.add_handler(CommandHandler("backup", self.backup_command))
        self.application.add_handler(CommandHandler("export", self.export_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
        self.application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.handle_webapp_data))
        
        # Callback query –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("Handlers setup completed")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self.register_user(user)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å Web App
        keyboard = [
            [InlineKeyboardButton("üéÆ Play Grid Clicker", web_app=WebAppInfo(url=self.webapp_url))],
            [
                InlineKeyboardButton("üìä Statistics", callback_data="stats"),
                InlineKeyboardButton("üèÜ Leaderboard", callback_data="leaderboard")
            ],
            [
                InlineKeyboardButton("üíæ Backup Game", callback_data="backup"),
                InlineKeyboardButton("‚ùì Help", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üéÆ <b>Welcome to Grid Clicker!</b>

Hello {user.first_name}! Ready to start your clicking adventure?

<b>üéØ How to Play:</b>
‚Ä¢ Click the red target cell in the 3x3 grid
‚Ä¢ Build combo chains for higher rewards
‚Ä¢ Construct buildings to automate resource production
‚Ä¢ Learn skills to enhance your abilities
‚Ä¢ Send expeditions on dangerous raids
‚Ä¢ Collect achievements and climb the leaderboard

<b>‚òÅÔ∏è Cloud Features:</b>
‚Ä¢ Your progress is automatically saved to Telegram Cloud
‚Ä¢ Play seamlessly across different devices
‚Ä¢ Share your achievements with friends

Click "üéÆ Play Grid Clicker" to start!
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò <b>Grid Clicker Help</b>

<b>üéÆ Game Commands:</b>
/start - Start the game or return to main menu
/stats - View your detailed statistics
/leaderboard - Check global rankings
/backup - Create a manual backup of your game
/export - Export your game data

<b>üéØ Game Mechanics:</b>
‚Ä¢ <b>Grid System:</b> 3x3 grid with target cell (red), energy cells (green), and bonus cells (orange)
‚Ä¢ <b>Combo System:</b> Hit consecutive targets to build combo multipliers
‚Ä¢ <b>Energy:</b> Required for clicking, regenerates over time
‚Ä¢ <b>Buildings:</b> Automated resource production
‚Ä¢ <b>Skills:</b> Permanent upgrades using Skill Points
‚Ä¢ <b>Raids:</b> Risky expeditions for rare resources
‚Ä¢ <b>Effects:</b> Random buffs and debuffs that modify gameplay

<b>üí° Pro Tips:</b>
‚Ä¢ Focus on energy management early game
‚Ä¢ Build generators for better energy efficiency
‚Ä¢ Save people before starting raids
‚Ä¢ Use Shield buff before attempting long combos
‚Ä¢ Buy during Tax Boom effect for discounts

<b>üêõ Issues?</b>
If you encounter any problems, please describe the issue and we'll help you resolve it.

<b>‚òÅÔ∏è Cloud Storage:</b>
Your game automatically saves to Telegram Cloud every 2 minutes and after important events.
        """
        
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user_id = update.effective_user.id
        stats = await self.get_user_statistics(user_id)
        
        if not stats:
            await update.message.reply_text("üìä No statistics available yet. Play the game to generate stats!")
            return
        
        stats_text = f"""
üìä <b>Your Grid Clicker Statistics</b>

<b>üéØ Gameplay Stats:</b>
‚Ä¢ Total Clicks: <code>{stats.get('total_clicks', 0):,}</code>
‚Ä¢ Highest Combo: <code>{stats.get('highest_combo', 0)}</code>
‚Ä¢ Total Resources: <code>{stats.get('total_resources', 0):,.0f}</code>

<b>üèóÔ∏è Progress:</b>
‚Ä¢ Buildings Built: <code>{stats.get('buildings_built', 0)}</code>
‚Ä¢ Skills Learned: <code>{stats.get('skills_learned', 0)}</code>
‚Ä¢ Raids Completed: <code>{stats.get('raids_completed', 0)}</code>
‚Ä¢ Achievements: <code>{stats.get('achievements_unlocked', 0)}</code>

<b>‚è±Ô∏è Time Investment:</b>
‚Ä¢ Estimated Playtime: <code>{stats.get('total_playtime_hours', 0):.1f}</code> hours
‚Ä¢ Last Updated: <code>{stats.get('last_updated', 'Never')}</code>

<b>üèÜ Ranking:</b>
‚Ä¢ Global Rank: <code>#{await self.get_user_rank(user_id, 'total_resources')}</code>
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ Play Game", web_app=WebAppInfo(url=self.webapp_url))],
            [InlineKeyboardButton("üèÜ View Leaderboard", callback_data="leaderboard")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def leaderboard_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leaderboard"""
        await self.show_leaderboard(update, context)
    
    async def backup_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∏–≥—Ä—ã"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_data = await self.get_user_save(user_id)
        
        if not save_data:
            await update.message.reply_text("üíæ No save data found. Play the game first to create a backup!")
            return
        
        # –°–æ–∑–¥–∞–µ–º backup —Ñ–∞–π–ª
        backup_filename = f"grid_clicker_backup_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        backup_data = {
            "user_id": user_id,
            "backup_created": datetime.now().isoformat(),
            "game_version": save_data.get('version', 'unknown'),
            "save_data": save_data
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º backup –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.save_backup(user_id, backup_data)
        
        backup_text = f"""
üíæ <b>Backup Created Successfully!</b>

<b>Backup Details:</b>
‚Ä¢ User ID: <code>{user_id}</code>
‚Ä¢ Created: <code>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</code>
‚Ä¢ Game Version: <code>{save_data.get('version', 'Unknown')}</code>
‚Ä¢ Data Size: <code>{len(str(save_data))} characters</code>

<b>üì± Restore Instructions:</b>
Your game data is automatically restored from Telegram Cloud when you open the game. This backup serves as an additional safety measure.

<b>‚ö†Ô∏è Important:</b>
Keep your Telegram account secure as it contains your game progress!
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ Play Game", web_app=WebAppInfo(url=self.webapp_url))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(backup_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–≠–∫—Å–ø–æ—Ä—Ç –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await self.get_user_data(user_id)
        stats = await self.get_user_statistics(user_id)
        save_data = await self.get_user_save(user_id)
        
        if not any([user_data, stats, save_data]):
            await update.message.reply_text("üì§ No data available for export. Play the game first!")
            return
        
        export_data = {
            "export_created": datetime.now().isoformat(),
            "user_info": user_data,
            "statistics": stats,
            "save_data": save_data,
            "export_version": "1.0"
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report_text = f"""
üì§ <b>Game Data Export</b>

<b>üë§ Player Info:</b>
‚Ä¢ User ID: <code>{user_id}</code>
‚Ä¢ Username: <code>{user_data.get('username', 'N/A')}</code>
‚Ä¢ Name: <code>{user_data.get('first_name', 'Unknown')}</code>
‚Ä¢ Member Since: <code>{user_data.get('created_at', 'Unknown')}</code>

<b>üìä Current Stats:</b>
‚Ä¢ Total Resources: <code>{stats.get('total_resources', 0):,.0f}</code>
‚Ä¢ Highest Combo: <code>{stats.get('highest_combo', 0)}</code>
‚Ä¢ Buildings: <code>{stats.get('buildings_built', 0)}</code>
‚Ä¢ Skills: <code>{stats.get('skills_learned', 0)}</code>
‚Ä¢ Playtime: <code>{stats.get('total_playtime_hours', 0):.1f}h</code>

<b>üíæ Save Data:</b>
‚Ä¢ Version: <code>{save_data.get('version', 'Unknown') if save_data else 'No save'}</code>
‚Ä¢ Last Save: <code>{save_data.get('save_timestamp', 'Never') if save_data else 'Never'}</code>

<b>üìÑ Full Export:</b>
Complete data export is available through the game's export function in the Web App.
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ Open Game", web_app=WebAppInfo(url=self.webapp_url))],
            [InlineKeyboardButton("üíæ Create Backup", callback_data="backup")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(report_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def handle_webapp_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App"""
        try:
            data = json.loads(update.effective_message.web_app_data.data)
            user_id = update.effective_user.id
            
            data_type = data.get('type', 'unknown')
            
            if data_type == 'game_statistics':
                await self.process_game_statistics(user_id, data)
                await update.message.reply_text("üìä Statistics updated successfully!")
                
            elif data_type == 'game_export':
                await self.process_game_export(user_id, data)
                await update.message.reply_text("üì§ Game data exported successfully!")
                
            elif data_type == 'error_report':
                await self.process_error_report(user_id, data)
                await update.message.reply_text("üêõ Error report received. Thank you for helping improve the game!")
                
            else:
                logger.warning(f"Unknown data type: {data_type}")
                await update.message.reply_text("‚ö†Ô∏è Received unknown data type")
                
        except json.JSONDecodeError as e:
            logger.error(f"Failed to parse WebApp data: {e}")
            await update.message.reply_text("‚ùå Failed to process data from game")
        except Exception as e:
            logger.error(f"Error handling WebApp data: {e}")
            await update.message.reply_text("‚ùå An error occurred while processing your request")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "stats":
            await self.stats_command(update, context)
        elif data == "leaderboard":
            await self.show_leaderboard(update, context)
        elif data == "backup":
            await self.backup_command(update, context)
        elif data == "help":
            await self.help_command(update, context)
        elif data.startswith("leaderboard_"):
            category = data.replace("leaderboard_", "")
            await self.show_category_leaderboard(update, context, category)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        
        if any(word in text for word in ['play', 'game', 'start']):
            keyboard = [[InlineKeyboardButton("üéÆ Play Grid Clicker", web_app=WebAppInfo(url=self.webapp_url))]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("üéÆ Click the button below to play!", reply_markup=reply_markup)
            
        elif any(word in text for word in ['stats', 'statistics']):
            await self.stats_command(update, context)
            
        elif any(word in text for word in ['help', 'how']):
            await self.help_command(update, context)
            
        else:
            await update.message.reply_text(
                "I'm not sure what you mean. Use /help to see available commands or click below to play!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üéÆ Play Game", web_app=WebAppInfo(url=self.webapp_url))
                ]])
            )
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    
    async def register_user(self, user):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO users 
            (user_id, username, first_name, last_name, language_code, is_premium, last_seen)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            user.id,
            user.username,
            user.first_name,
            user.last_name,
            user.language_code,
            getattr(user, 'is_premium', False),
            datetime.now()
        ))
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ—Å—Å–∏–π
        cursor.execute('''
            UPDATE users SET total_sessions = total_sessions + 1 WHERE user_id = ?
        ''', (user.id,))
        
        conn.commit()
        conn.close()
        logger.info(f"User {user.id} registered/updated")
    
    async def get_user_data(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        row = cursor.fetchone()
        
        conn.close()
        
        if row:
            return dict(row)
        return None
    
    async def get_user_statistics(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM user_statistics WHERE user_id = ?', (user_id,))
        row = cursor.fetchone()
        
        conn.close()
        
        if row:
            return dict(row)
        return None
    
    async def get_user_save(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT save_data FROM game_saves WHERE user_id = ?', (user_id,))
        row = cursor.fetchone()
        
        conn.close()
        
        if row and row[0]:
            try:
                return json.loads(row[0])
            except json.JSONDecodeError:
                logger.error(f"Failed to parse save data for user {user_id}")
        return None
    
    async def save_backup(self, user_id: int, backup_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE game_saves 
            SET backup_count = backup_count + 1 
            WHERE user_id = ?
        ''', (user_id,))
        
        conn.commit()
        conn.close()
        logger.info(f"Backup created for user {user_id}")
    
    async def get_user_rank(self, user_id: int, category: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT rank FROM leaderboard 
            WHERE user_id = ? AND category = ?
        ''', (user_id, category))
        
        row = cursor.fetchone()
        conn.close()
        
        return row[0] if row else 999
    
    async def process_game_statistics(self, user_id: int, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã"""
        stats = data.get('stats', {})
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO user_statistics
            (user_id, total_playtime_hours, total_resources, highest_combo, 
             total_clicks, buildings_built, skills_learned, last_updated)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id,
            stats.get('playtimeEstimate', 0),
            stats.get('totalResources', 0),
            stats.get('maxCombo', 0),
            stats.get('totalClicks', 0),
            stats.get('buildingLevels', 0),
            stats.get('skillLevels', 0),
            datetime.now()
        ))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
        await self.update_leaderboard(user_id, stats)
        
        conn.commit()
        conn.close()
        logger.info(f"Statistics updated for user {user_id}")
    
    async def process_game_export(self, user_id: int, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–≥—Ä—ã"""
        save_data = data.get('data', {})
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO game_saves
            (user_id, save_data, save_timestamp, version)
            VALUES (?, ?, ?, ?)
        ''', (
            user_id,
            json.dumps(save_data),
            datetime.now(),
            save_data.get('version', 'unknown')
        ))
        
        conn.commit()
        conn.close()
        logger.info(f"Game data exported for user {user_id}")
    
    async def process_error_report(self, user_id: int, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
        error_info = data.get('error', {})
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"Game error from user {user_id}: {error_info.get('message', 'Unknown error')}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫
        # –ù–∞–ø—Ä–∏–º–µ—Ä, Sentry, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    async def update_leaderboard(self, user_id: int, stats: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        categories = {
            'total_resources': stats.get('totalResources', 0),
            'highest_combo': stats.get('maxCombo', 0),
            'total_clicks': stats.get('totalClicks', 0),
            'buildings_built': stats.get('buildingLevels', 0)
        }
        
        for category, score in categories.items():
            cursor.execute('''
                INSERT OR REPLACE INTO leaderboard
                (user_id, category, score, updated_at)
                VALUES (?, ?, ?, ?)
            ''', (user_id, category, score, datetime.now()))
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–Ω–≥–∏
        for category in categories.keys():
            cursor.execute(f'''
                UPDATE leaderboard SET rank = (
                    SELECT COUNT(*) + 1 FROM leaderboard l2 
                    WHERE l2.category = leaderboard.category 
                    AND l2.score > leaderboard.score
                ) WHERE category = ?
            ''', (category,))
        
        conn.commit()
        conn.close()
    
    async def show_leaderboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"""
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # –¢–æ–ø-10 –ø–æ –æ–±—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º
        cursor.execute('''
            SELECT l.rank, u.first_name, u.username, l.score
            FROM leaderboard l
            JOIN users u ON l.user_id = u.user_id
            WHERE l.category = 'total_resources'
            ORDER BY l.rank
            LIMIT 10
        ''')
        
        top_players = cursor.fetchall()
        conn.close()
        
        if not top_players:
            leaderboard_text = "üèÜ <b>Global Leaderboard</b>\n\nNo players yet! Be the first to make it to the leaderboard!"
        else:
            leaderboard_text = "üèÜ <b>Global Leaderboard</b>\n<i>Top Players by Total Resources</i>\n\n"
            
            medals = ["ü•á", "ü•à", "ü•â"]
            
            for i, player in enumerate(top_players):
                medal = medals[i] if i < 3 else f"{i+1}."
                name = player['first_name'] or player['username'] or "Anonymous"
                score = f"{player['score']:,.0f}"
                leaderboard_text += f"{medal} <b>{name}</b> - {score} resources\n"
        
        keyboard = [
            [
                InlineKeyboardButton("üéØ Combo Leaders", callback_data="leaderboard_highest_combo"),
                InlineKeyboardButton("üëÜ Click Masters", callback_data="leaderboard_total_clicks")
            ],
            [
                InlineKeyboardButton("üèóÔ∏è Builders", callback_data="leaderboard_buildings_built"),
                InlineKeyboardButton("üéÆ Play Game", web_app=WebAppInfo(url=self.webapp_url))
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                leaderboard_text, 
                reply_markup=reply_markup, 
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                leaderboard_text, 
                reply_markup=reply_markup, 
                parse_mode='HTML'
            )
    
    async def show_category_leaderboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
        """–ü–æ–∫–∞–∑ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT l.rank, u.first_name, u.username, l.score
            FROM leaderboard l
            JOIN users u ON l.user_id = u.user_id
            WHERE l.category = ?
            ORDER BY l.rank
            LIMIT 10
        ''', (category,))
        
        top_players = cursor.fetchall()
        conn.close()
        
        category_names = {
            'highest_combo': 'üéØ Highest Combo',
            'total_clicks': 'üëÜ Total Clicks',
            'buildings_built': 'üèóÔ∏è Buildings Built'
        }
        
        category_name = category_names.get(category, category)
        
        if not top_players:
            leaderboard_text = f"üèÜ <b>{category_name}</b>\n\nNo data available yet!"
        else:
            leaderboard_text = f"üèÜ <b>{category_name}</b>\n\n"
            
            medals = ["ü•á", "ü•à", "ü•â"]
            
            for i, player in enumerate(top_players):
                medal = medals[i] if i < 3 else f"{i+1}."
                name = player['first_name'] or player['username'] or "Anonymous"
                
                if category == 'total_clicks':
                    score = f"{player['score']:,.0f} clicks"
                elif category == 'highest_combo':
                    score = f"{player['score']:,.0f} combo"
                elif category == 'buildings_built':
                    score = f"{player['score']:,.0f} levels"
                else:
                    score = f"{player['score']:,.0f}"
                
                leaderboard_text += f"{medal} <b>{name}</b> - {score}\n"
        
        keyboard = [
            [InlineKeyboardButton("‚Üê Back to Leaderboard", callback_data="leaderboard")],
            [InlineKeyboardButton("üéÆ Play Game", web_app=WebAppInfo(url=self.webapp_url))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            leaderboard_text, 
            reply_markup=reply_markup, 
            parse_mode='HTML'
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Grid Clicker Bot...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://your-domain.com/grid-clicker')
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN environment variable is required!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = GridClickerBot(BOT_TOKEN, WEBAPP_URL)
    
    try:
        bot.run()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot crashed: {e}")


if __name__ == '__main__':
    main()