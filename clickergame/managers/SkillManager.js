// managers/SkillManager.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ clearInterval
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { GAME_CONSTANTS } from '../config/GameConstants.js';

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–≤—ã–∫–æ–≤
export const SKILL_CATEGORIES = {
  clicking: 'Clicking Skills',
  combo: 'Combo Skills', 
  resources: 'Resource Skills',
  effects: 'Effect Skills',
  special: 'Special Skills'
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
export const SKILL_DEFS = [
  // Clicking Skills
  {
    id: 'goldMultiplier',
    name: 'Golden Touch',
    icon: 'üí∞',
    description: 'Increases gold gain per click',
    category: 'clicking',
    maxLevel: 20,
    baseCost: 1,
    costMultiplier: 1.3,
    effect: { type: 'multiplier', target: 'gold', value: 0.1 }
  },
  {
    id: 'criticalHit',
    name: 'Critical Strike',
    icon: 'üí•',
    description: 'Chance for double rewards',
    category: 'clicking',
    maxLevel: 10,
    baseCost: 2,
    costMultiplier: 1.5,
    effect: { type: 'chance', target: 'critical', value: 0.05 }
  },
  {
    id: 'resourceBonus',
    name: 'Resource Finder',
    icon: 'üîç',
    description: 'Chance to gain random resource on click',
    category: 'clicking',
    maxLevel: 15,
    baseCost: 3,
    costMultiplier: 1.4,
    effect: { type: 'chance', target: 'bonus_resource', value: 0.03 }
  },

  // Combo Skills
  {
    id: 'comboProtection',
    name: 'Steady Hand',
    icon: 'üéØ',
    description: 'Allows missing target without breaking combo',
    category: 'combo',
    maxLevel: 5,
    baseCost: 5,
    costMultiplier: 2.0,
    effect: { type: 'charges', target: 'miss_protection', value: 1 }
  },
  {
    id: 'comboExtension',
    name: 'Time Stretch',
    icon: '‚è∞',
    description: 'Extends combo timeout duration',
    category: 'combo',
    maxLevel: 10,
    baseCost: 3,
    costMultiplier: 1.6,
    effect: { type: 'duration', target: 'combo_timeout', value: 1000 }
  },
  {
    id: 'comboMultiplier',
    name: 'Combo Master',
    icon: 'üî•',
    description: 'Increases combo effectiveness',
    category: 'combo',
    maxLevel: 15,
    baseCost: 4,
    costMultiplier: 1.5,
    effect: { type: 'multiplier', target: 'combo', value: 0.15 }
  },

  // Resource Skills
  {
    id: 'faithGeneration',
    name: 'Meditation',
    icon: 'üßò',
    description: 'Slowly generates faith over time',
    category: 'resources',
    maxLevel: 8,
    baseCost: 6,
    costMultiplier: 1.8,
    effect: { type: 'generation', target: 'faith', value: 0.1, interval: 30000 }
  },
  {
    id: 'chaosReduction',
    name: 'Inner Peace',
    icon: '‚òÆÔ∏è',
    description: 'Reduces chaos accumulation',
    category: 'resources',
    maxLevel: 10,
    baseCost: 4,
    costMultiplier: 1.6,
    effect: { type: 'reduction', target: 'chaos', value: 0.1 }
  },
  {
    id: 'resourceStorage',
    name: 'Efficient Storage',
    icon: 'üì¶',
    description: 'Prevents resource loss from explosions',
    category: 'resources',
    maxLevel: 5,
    baseCost: 8,
    costMultiplier: 2.2,
    effect: { type: 'protection', target: 'explosion', value: 0.2 }
  },

  // Effect Skills
  {
    id: 'buffDuration',
    name: 'Buff Mastery',
    icon: '‚ú®',
    description: 'Increases buff duration',
    category: 'effects',
    maxLevel: 12,
    baseCost: 5,
    costMultiplier: 1.7,
    effect: { type: 'duration', target: 'buffs', value: 0.2 }
  },
  {
    id: 'debuffResistance',
    name: 'Resilience',
    icon: 'üõ°Ô∏è',
    description: 'Reduces debuff duration',
    category: 'effects',
    maxLevel: 10,
    baseCost: 6,
    costMultiplier: 1.8,
    effect: { type: 'reduction', target: 'debuffs', value: 0.15 }
  },
  {
    id: 'buffChance',
    name: 'Lucky Charm',
    icon: 'üçÄ',
    description: 'Increases chance of getting buffs',
    category: 'effects',
    maxLevel: 8,
    baseCost: 7,
    costMultiplier: 1.9,
    effect: { type: 'chance', target: 'buff', value: 0.05 }
  },

  // Special Skills
  {
    id: 'autoClicker',
    name: 'Auto Clicker',
    icon: 'ü§ñ',
    description: 'Automatically clicks zones',
    category: 'special',
    maxLevel: 3,
    baseCost: 20,
    costMultiplier: 3.0,
    effect: { 
      type: 'automation', 
      target: 'clicking', 
      value: 1, 
      interval: GAME_CONSTANTS.AUTO_CLICKER_BASE_INTERVAL 
    }
  },
  {
    id: 'zonePreview',
    name: 'Future Sight',
    icon: 'üëÅÔ∏è',
    description: 'Shows next target zone',
    category: 'special',
    maxLevel: 1,
    baseCost: 15,
    costMultiplier: 1.0,
    effect: { type: 'preview', target: 'zone', value: 1 }
  },
  {
    id: 'skillPointGen',
    name: 'Experience Boost',
    icon: 'üéì',
    description: 'Generates skill points over time',
    category: 'special',
    maxLevel: 5,
    baseCost: 25,
    costMultiplier: 2.5,
    effect: { type: 'generation', target: 'skillPoints', value: 0.1, interval: 60000 }
  }
];

export class SkillManager extends CleanupMixin {
  constructor(gameState) {
    super();
    
    this.gameState = gameState;
    this.generationIntervals = new Map();
    this.autoClickerInterval = null;
    
    this.initializeSkills();
    this.startGeneration();
    
    console.log('üéØ SkillManager initialized');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤
  initializeSkills() {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞–≤—ã–∫–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!this.gameState.skills) {
      this.gameState.skills = {};
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
    SKILL_DEFS.forEach(def => {
      if (!this.gameState.skills[def.id]) {
        this.gameState.skills[def.id] = { level: 0 };
      }
    });
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º skill points
    this.validateSkillPoints();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
    if (!this.gameState.skillStates) {
      this.gameState.skillStates = {
        missProtectionCharges: 0,
        autoClickerActive: false
      };
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è skill points
  validateSkillPoints() {
    if (this.gameState.skillPoints === undefined || 
        this.gameState.skillPoints === null) {
      this.gameState.skillPoints = 0;
    } else if (typeof this.gameState.skillPoints !== 'number' || 
               isNaN(this.gameState.skillPoints)) {
      console.warn('Invalid skill points detected, resetting to 0');
      this.gameState.skillPoints = 0;
    } else if (!Number.isInteger(this.gameState.skillPoints)) {
      console.warn('Non-integer skill points detected, rounding down');
      this.gameState.skillPoints = Math.floor(this.gameState.skillPoints);
    } else if (this.gameState.skillPoints < 0) {
      console.warn('Negative skill points detected, resetting to 0');
      this.gameState.skillPoints = 0;
    } else if (this.gameState.skillPoints > GAME_CONSTANTS.MAX_SKILL_POINTS) {
      console.warn('Skill points exceed maximum, capping');
      this.gameState.skillPoints = GAME_CONSTANTS.MAX_SKILL_POINTS;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
  getSkillDefinition(skillId) {
    return SKILL_DEFS.find(def => def.id === skillId);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ–º –ª–∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –Ω–∞–≤—ã–∫
  canAfford(skillId) {
    const def = this.getSkillDefinition(skillId);
    if (!def) return false;
    
    const skill = this.gameState.skills[skillId];
    if (skill.level >= def.maxLevel) return false;
    
    const cost = this.calculateCost(def, skill.level);
    return this.gameState.skillPoints >= cost;
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–≤—ã–∫–∞
  calculateCost(def, currentLevel) {
    return Math.floor(def.baseCost * Math.pow(def.costMultiplier, currentLevel));
  }

  // –ö—É–ø–∏—Ç—å/—É–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫
  buySkill(skillId) {
    const def = this.getSkillDefinition(skillId);
    if (!def) {
      console.warn(`Unknown skill: ${skillId}`);
      return false;
    }

    const skill = this.gameState.skills[skillId];
    if (skill.level >= def.maxLevel) {
      console.warn(`Skill ${skillId} is already at max level`);
      return false;
    }

    const cost = this.calculateCost(def, skill.level);
    if (this.gameState.skillPoints < cost) {
      console.warn(`Not enough skill points for ${skillId}`);
      return false;
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º skill points
    this.gameState.skillPoints = Math.max(0, this.gameState.skillPoints - cost);
    this.validateSkillPoints();
    
    // –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞
    skill.level++;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤—ã–∫–∞
    this.applySkillEffect(skillId, def);

    eventBus.emit(GameEvents.SKILL_BOUGHT, { 
      skillId, 
      level: skill.level,
      name: def.name 
    });
    
    eventBus.emit(GameEvents.SKILL_POINTS_CHANGED, this.gameState.skillPoints);
    
    console.log(`Skill ${def.name} upgraded to level ${skill.level}`);
    return true;
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–≤—ã–∫–∞
  applySkillEffect(skillId, def) {
    const level = this.gameState.skills[skillId].level;
    
    switch (def.effect.type) {
      case 'charges':
        if (skillId === 'comboProtection') {
          this.gameState.skillStates.missProtectionCharges += def.effect.value;
        }
        break;
        
      case 'generation':
        if (def.effect.target === 'skillPoints') {
          this.startSkillPointGeneration(skillId, def, level);
        } else if (def.effect.target === 'faith') {
          this.startFaithGeneration(skillId, def, level);
        }
        break;
        
      case 'automation':
        if (skillId === 'autoClicker') {
          this.startAutoClicker(level);
        }
        break;
    }
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
  startGeneration() {
    SKILL_DEFS.forEach(def => {
      const skill = this.gameState.skills[def.id];
      if (skill && skill.level > 0 && def.effect.type === 'generation') {
        this.applySkillEffect(def.id, def);
      }
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å —É—Ä–æ–≤–Ω–∏
    const autoClickerLevel = this.getSkillLevel('autoClicker');
    if (autoClickerLevel > 0) {
      this.startAutoClicker(autoClickerLevel);
    }
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é skill points
  startSkillPointGeneration(skillId, def, level) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    this.stopGeneration(skillId);
    
    const intervalId = this.createInterval(() => {
      const amount = def.effect.value * level;
      this.addSkillPoints(amount);
    }, def.effect.interval, `skill-${skillId}`);
    
    this.generationIntervals.set(skillId, intervalId);
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é faith
  startFaithGeneration(skillId, def, level) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    this.stopGeneration(skillId);
    
    const intervalId = this.createInterval(() => {
      const amount = def.effect.value * level;
      this.gameState.addResource('faith', amount);
      eventBus.emit(GameEvents.RESOURCE_CHANGED);
    }, def.effect.interval, `skill-${skillId}`);
    
    this.generationIntervals.set(skillId, intervalId);
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
  startAutoClicker(level) {
    this.stopAutoClicker();
    
    this.gameState.skillStates.autoClickerActive = true;
    
    const baseInterval = GAME_CONSTANTS.AUTO_CLICKER_BASE_INTERVAL;
    const intervalMs = Math.max(
      GAME_CONSTANTS.AUTO_CLICKER_MIN_INTERVAL, 
      Math.floor(baseInterval / level)
    );
    
    this.autoClickerInterval = this.createInterval(() => {
      this.performAutoClick();
    }, intervalMs, 'auto-clicker');
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∏–∫
  performAutoClick() {
    if (!this.isActive()) return;
    
    const target = this.gameState.targetZone;
    const featureManager = this.gameState.featureMgr;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    if (typeof target !== 'number' || !featureManager || !featureManager.zones) {
      return;
    }
    
    const zone = featureManager.zones.find(z => z && z.index === target);
    if (!zone) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ–ª–µ—Å–∞
    const currentRotation = this.gameState.currentRotation || 0;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–ª—ã –∑–æ–Ω—ã
    const startAngle = zone.getStartAngle();
    const endAngle = zone.getEndAngle();
    const zoneSize = endAngle - startAngle;
    
    // –ö–ª–∏–∫–∞–µ–º –≤ —Ü–µ–Ω—Ç—Ä –∑–æ–Ω—ã —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–ª—É—á–∞–π–Ω—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º
    const randomOffset = (Math.random() - 0.5) * zoneSize * 0.3;
    const targetAngle = startAngle + (zoneSize / 2) + randomOffset;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —É–≥–æ–ª —Å —É—á–µ—Ç–æ–º –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–æ–ª–µ—Å–∞
    const correctedAngle = targetAngle - currentRotation;
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª
    const normalizedAngle = ((correctedAngle % (2 * Math.PI)) + (2 * Math.PI)) % (2 * Math.PI);
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫
    eventBus.emit(GameEvents.CLICK, normalizedAngle);
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
  stopAutoClicker() {
    if (this.autoClickerInterval) {
      this.cleanupManager.clearInterval(this.autoClickerInterval);
      this.autoClickerInterval = null;
    }
    this.gameState.skillStates.autoClickerActive = false;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞–≤—ã–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
  stopGeneration(skillId) {
    if (this.generationIntervals.has(skillId)) {
      const intervalId = this.generationIntervals.get(skillId);
      this.cleanupManager.clearInterval(intervalId);
      this.generationIntervals.delete(skillId);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞
  getSkillLevel(skillId) {
    const skill = this.gameState.skills[skillId];
    return skill ? skill.level : 0;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
  getSkillBonus(type, target = null) {
    let bonus = 0;
    
    SKILL_DEFS.forEach(def => {
      const level = this.getSkillLevel(def.id);
      if (level > 0 && def.effect.type === type && 
          (target === null || def.effect.target === target)) {
        bonus += def.effect.value * level;
      }
    });
    
    return bonus;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –ø—Ä–æ–º–∞—Ö–∞
  canUseMissProtection() {
    return this.gameState.skillStates.missProtectionCharges > 0;
  }

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –ø—Ä–æ–º–∞—Ö–∞
  useMissProtection() {
    if (this.gameState.skillStates.missProtectionCharges > 0) {
      this.gameState.skillStates.missProtectionCharges--;
      return true;
    }
    return false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–µ
  getSkillInfo(skillId) {
    const def = this.getSkillDefinition(skillId);
    const skill = this.gameState.skills[skillId];
    
    if (!def || !skill) return null;

    const nextCost = skill.level < def.maxLevel ? 
      this.calculateCost(def, skill.level) : null;

    return {
      ...def,
      currentLevel: skill.level,
      nextCost,
      canAfford: skill.level < def.maxLevel ? this.canAfford(skillId) : false,
      isMaxLevel: skill.level >= def.maxLevel,
      currentEffect: def.effect.value * skill.level,
      effectDescription: this.getEffectDescription(def.effect, skill.level)
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
  getEffectDescription(effect, level) {
    const totalValue = effect.value * level;
    
    switch (effect.type) {
      case 'multiplier':
        return `+${(totalValue * 100).toFixed(1)}% ${effect.target}`;
      case 'chance':
        return `${(totalValue * 100).toFixed(1)}% chance`;
      case 'duration':
        return `+${totalValue}ms duration`;
      case 'reduction':
        return `-${(totalValue * 100).toFixed(1)}% ${effect.target}`;
      case 'generation':
        return `${totalValue}/interval ${effect.target}`;
      case 'charges':
        return `${totalValue} charges`;
      case 'protection':
        return `${(totalValue * 100).toFixed(1)}% protection`;
      default:
        return `Level ${level} effect`;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  getSkillsByCategory() {
    const categories = {};
    
    Object.keys(SKILL_CATEGORIES).forEach(category => {
      categories[category] = SKILL_DEFS
        .filter(def => def.category === category)
        .map(def => this.getSkillInfo(def.id))
        .filter(Boolean);
    });
    
    return categories;
  }

  // –î–æ–±–∞–≤–∏—Ç—å skill points
  addSkillPoints(amount) {
    if (!this.isActive()) return;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if (typeof amount !== 'number' || isNaN(amount) || amount < 0) {
      console.warn('Invalid skill points amount:', amount);
      return;
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
    const currentPoints = this.gameState.skillPoints || 0;
    const newPoints = currentPoints + Math.floor(amount);
    
    if (newPoints > GAME_CONSTANTS.MAX_SKILL_POINTS) {
      this.gameState.skillPoints = GAME_CONSTANTS.MAX_SKILL_POINTS;
    } else {
      this.gameState.skillPoints = Math.floor(newPoints);
    }
    
    this.validateSkillPoints();
    eventBus.emit(GameEvents.SKILL_POINTS_CHANGED, this.gameState.skillPoints);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–≤—ã–∫–æ–≤
  getSkillStatistics() {
    const stats = {
      totalSkillPoints: this.gameState.skillPoints,
      learnedSkills: 0,
      totalSkillLevels: 0,
      maxLevelSkills: 0,
      activeGenerations: this.generationIntervals.size,
      autoClickerActive: this.gameState.skillStates.autoClickerActive,
      missProtectionCharges: this.gameState.skillStates.missProtectionCharges,
      categories: {}
    };

    Object.keys(SKILL_CATEGORIES).forEach(category => {
      stats.categories[category] = { learned: 0, levels: 0 };
    });

    SKILL_DEFS.forEach(def => {
      const skill = this.gameState.skills[def.id];
      if (skill && skill.level > 0) {
        stats.learnedSkills++;
        stats.totalSkillLevels += skill.level;
        
        if (skill.level >= def.maxLevel) {
          stats.maxLevelSkills++;
        }
        
        const category = def.category;
        if (stats.categories[category]) {
          stats.categories[category].learned++;
          stats.categories[category].levels += skill.level;
        }
      }
    });

    return stats;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤—ã–∫–æ–≤
  getActiveEffects() {
    const effects = {};
    
    SKILL_DEFS.forEach(def => {
      const level = this.getSkillLevel(def.id);
      if (level > 0) {
        const effectKey = `${def.effect.type}_${def.effect.target}`;
        if (!effects[effectKey]) {
          effects[effectKey] = { type: def.effect.type, target: def.effect.target, value: 0 };
        }
        effects[effectKey].value += def.effect.value * level;
      }
    });
    
    return effects;
  }

  // –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞–≤—ã–∫ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞)
  resetSkill(skillId) {
    const skill = this.gameState.skills[skillId];
    if (!skill) return false;
    
    const def = this.getSkillDefinition(skillId);
    if (!def) return false;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –æ—á–∫–∏
    let refund = 0;
    for (let i = 0; i < skill.level; i++) {
      refund += this.calculateCost(def, i);
    }
    
    this.addSkillPoints(refund);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
    skill.level = 0;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.stopGeneration(skillId);
    if (skillId === 'autoClicker') {
      this.stopAutoClicker();
    }
    
    console.log(`Skill ${def.name} reset, refunded ${refund} points`);
    return true;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –æ—á–∏—Å—Ç–∫–∏
  destroy() {
    console.log('üßπ SkillManager cleanup started');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    this.generationIntervals.forEach((intervalId, skillId) => {
      this.cleanupManager.clearInterval(intervalId);
    });
    this.generationIntervals.clear();

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
    this.stopAutoClicker();

    // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    super.destroy();

    console.log('‚úÖ SkillManager destroyed');
  }
}