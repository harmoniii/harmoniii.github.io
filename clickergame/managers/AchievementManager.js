// managers/AchievementManager.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ milestones
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ milestones
export const ACHIEVEMENT_DEFS = [
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–ª–∏–∫–∏
  {
    id: 'clicks_100',
    name: 'üñ±Ô∏è First Clicks',
    description: 'Click 100 times',
    category: 'clicks',
    target: 100,
    reward: { skillPoints: 2 },
    icon: 'üñ±Ô∏è'
  },
  {
    id: 'clicks_500',
    name: 'üñ±Ô∏è Clicking Master',
    description: 'Click 500 times',
    category: 'clicks',
    target: 500,
    reward: { skillPoints: 5 },
    icon: 'üñ±Ô∏è'
  },
  {
    id: 'clicks_1000',
    name: 'üñ±Ô∏è Click Champion',
    description: 'Click 1000 times',
    category: 'clicks',
    target: 1000,
    reward: { skillPoints: 10 },
    icon: 'üñ±Ô∏è'
  },
  {
    id: 'clicks_5000',
    name: 'üñ±Ô∏è Click Legend',
    description: 'Click 5000 times',
    category: 'clicks',
    target: 5000,
    reward: { skillPoints: 25 },
    icon: 'üñ±Ô∏è'
  },

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–º–±–æ - –ø—Ä–æ–≤–µ—Ä—è—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–µ –∫–æ–º–±–æ
  {
    id: 'combo_10',
    name: 'üî• Combo Starter',
    description: 'Reach a combo of 10',
    category: 'combo',
    target: 10,
    reward: { skillPoints: 1 },
    icon: 'üî•'
  },
  {
    id: 'combo_25',
    name: 'üî• Combo Expert',
    description: 'Reach a combo of 25',
    category: 'combo',
    target: 25,
    reward: { skillPoints: 3 },
    icon: 'üî•'
  },
  {
    id: 'combo_50',
    name: 'üî• Combo Master',
    description: 'Reach a combo of 50',
    category: 'combo',
    target: 50,
    reward: { skillPoints: 8 },
    icon: 'üî•'
  },
  {
    id: 'combo_100',
    name: 'üî• Combo Legend',
    description: 'Reach a combo of 100',
    category: 'combo',
    target: 100,
    reward: { skillPoints: 20 },
    icon: 'üî•'
  },

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –æ–±—â–∏–µ —Ä–µ—Å—É—Ä—Å—ã - –ø—Ä–æ–≤–µ—Ä—è—é—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
  {
    id: 'total_resources_100',
    name: 'üí∞ Resource Gatherer',
    description: 'Collect 100 total resources',
    category: 'total_resources',
    target: 100,
    reward: { skillPoints: 2 },
    icon: 'üí∞'
  },
  {
    id: 'total_resources_1000',
    name: 'üí∞ Resource Collector',
    description: 'Collect 1000 total resources',
    category: 'total_resources',
    target: 1000,
    reward: { skillPoints: 5 },
    icon: 'üí∞'
  },
  {
    id: 'total_resources_5000',
    name: 'üí∞ Resource Hoarder',
    description: 'Collect 5000 total resources',
    category: 'total_resources',
    target: 5000,
    reward: { skillPoints: 15 },
    icon: 'üí∞'
  },
  {
    id: 'total_resources_10000',
    name: 'üí∞ Resource Tycoon',
    description: 'Collect 10000 total resources',
    category: 'total_resources',
    target: 10000,
    reward: { skillPoints: 35 },
    icon: 'üí∞'
  },

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
  {
    id: 'gold_100',
    name: 'ü™ô Gold Collector',
    description: 'Collect 100 gold',
    category: 'gold',
    target: 100,
    reward: { skillPoints: 1 },
    icon: 'ü™ô'
  },
  {
    id: 'gold_1000',
    name: 'ü™ô Gold Hoarder',
    description: 'Collect 1000 gold',
    category: 'gold',
    target: 1000,
    reward: { skillPoints: 3 },
    icon: 'ü™ô'
  },
  {
    id: 'gold_10000',
    name: 'ü™ô Gold Master',
    description: 'Collect 10000 gold',
    category: 'gold',
    target: 10000,
    reward: { skillPoints: 10 },
    icon: 'ü™ô'
  },
  {
    id: 'wood_100',
    name: 'üå≤ Lumberjack',
    description: 'Collect 100 wood',
    category: 'wood',
    target: 100,
    reward: { skillPoints: 1 },
    icon: 'üå≤'
  },
  {
    id: 'wood_1000',
    name: 'üå≤ Forest Master',
    description: 'Collect 1000 wood',
    category: 'wood',
    target: 1000,
    reward: { skillPoints: 3 },
    icon: 'üå≤'
  },
  {
    id: 'stone_100',
    name: 'ü™® Stone Gatherer',
    description: 'Collect 100 stone',
    category: 'stone',
    target: 100,
    reward: { skillPoints: 1 },
    icon: 'ü™®'
  },
  {
    id: 'stone_1000',
    name: 'ü™® Quarry Master',
    description: 'Collect 1000 stone',
    category: 'stone',
    target: 1000,
    reward: { skillPoints: 3 },
    icon: 'ü™®'
  },

  // –ù–û–í–´–ï –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —ç–Ω–µ—Ä–≥–∏—é
  {
    id: 'energy_zones_10',
    name: '‚ö° Energy Seeker',
    description: 'Hit 10 energy zones',
    category: 'energy_zones',
    target: 10,
    reward: { skillPoints: 2 },
    icon: '‚ö°'
  },
  {
    id: 'energy_zones_50',
    name: '‚ö° Energy Master',
    description: 'Hit 50 energy zones',
    category: 'energy_zones',
    target: 50,
    reward: { skillPoints: 5 },
    icon: '‚ö°'
  }
];

export class AchievementManager extends CleanupMixin {
  constructor(gameState) {
    super();
    
    this.gameState = gameState;
    this.statistics = {
      totalClicks: 0,
      maxCombo: 0,
      resourcesCollected: {},
      totalResourcesCollected: 0,
      energyZonesHit: 0 // –ù–û–í–´–ô: —Å—á–µ—Ç—á–∏–∫ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–æ–Ω
    };
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–±—ã—Ç–∏–∏
    this.lastCheckedValues = {
      clicks: 0,
      combo: 0,
      totalResources: 0,
      energyZones: 0
    };
    
    this.initializeAchievements();
    this.bindEvents();
    
    console.log('üèÜ AchievementManager initialized with milestone tracking');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  initializeAchievements() {
    if (!this.gameState.achievements) {
      this.gameState.achievements = {
        completed: new Set(),
        statistics: { ...this.statistics }
      };
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (this.gameState.achievements.statistics) {
      this.statistics = { ...this.gameState.achievements.statistics };
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      if (this.statistics.energyZonesHit === undefined) {
        this.statistics.energyZonesHit = 0;
      }
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –≤ Set –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (Array.isArray(this.gameState.achievements.completed)) {
      this.gameState.achievements.completed = new Set(this.gameState.achievements.completed);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    this.lastCheckedValues = {
      clicks: this.statistics.totalClicks,
      combo: this.statistics.maxCombo,
      totalResources: this.statistics.totalResourcesCollected,
      energyZones: this.statistics.energyZonesHit
    };
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ –∏ —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    eventBus.subscribe(GameEvents.CLICK, () => {
      this.statistics.totalClicks++;
      this.checkClickAchievements();
      this.saveStatistics();
    });

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–±–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ—Ä–¥—ã
    eventBus.subscribe(GameEvents.COMBO_CHANGED, (data) => {
      const comboCount = data.count || 0;
      if (comboCount > this.statistics.maxCombo) {
        this.statistics.maxCombo = comboCount;
        this.checkComboAchievements();
        this.saveStatistics();
      }
    });

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    eventBus.subscribe(GameEvents.RESOURCE_GAINED, (data) => {
      if (data.resource && data.amount) {
        this.addResourceStatistic(data.resource, data.amount);
        this.checkResourceAchievements();
        this.saveStatistics();
      }
    });

    // –ù–û–í–´–ô: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã
    eventBus.subscribe(GameEvents.ENERGY_ZONE_HIT, (data) => {
      if (data.zoneType === 'energy') {
        this.statistics.energyZonesHit++;
        this.checkEnergyZoneAchievements();
        this.saveStatistics();
      }
    });

    // –¢–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–∞–∫ fallback
    eventBus.subscribe(GameEvents.RESOURCE_CHANGED, () => {
      this.updateResourceStatistics();
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –∫–ª–∏–∫–∏
  checkClickAchievements() {
    const currentClicks = this.statistics.totalClicks;
    
    if (currentClicks !== this.lastCheckedValues.clicks) {
      console.log(`üèÜ Checking click achievements: ${currentClicks} clicks`);
      this.checkAchievements('clicks');
      this.lastCheckedValues.clicks = currentClicks;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –∫–æ–º–±–æ
  checkComboAchievements() {
    const currentMaxCombo = this.statistics.maxCombo;
    
    if (currentMaxCombo !== this.lastCheckedValues.combo) {
      console.log(`üèÜ Checking combo achievements: max combo ${currentMaxCombo}`);
      this.checkAchievements('combo');
      this.lastCheckedValues.combo = currentMaxCombo;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —Ä–µ—Å—É—Ä—Å—ã
  checkResourceAchievements() {
    const currentTotalResources = this.statistics.totalResourcesCollected;
    
    if (currentTotalResources !== this.lastCheckedValues.totalResources) {
      console.log(`üèÜ Checking resource achievements: ${currentTotalResources} total resources`);
      this.checkAchievements('total_resources');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
      Object.keys(this.statistics.resourcesCollected).forEach(resource => {
        this.checkAchievements(resource);
      });
      
      this.lastCheckedValues.totalResources = currentTotalResources;
    }
  }

  // –ù–û–í–´–ô: –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã
  checkEnergyZoneAchievements() {
    const currentEnergyZones = this.statistics.energyZonesHit;
    
    if (currentEnergyZones !== this.lastCheckedValues.energyZones) {
      console.log(`üèÜ Checking energy zone achievements: ${currentEnergyZones} energy zones hit`);
      this.checkAchievements('energy_zones');
      this.lastCheckedValues.energyZones = currentEnergyZones;
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–∞
  addResourceStatistic(resourceName, amount) {
    if (!this.statistics.resourcesCollected[resourceName]) {
      this.statistics.resourcesCollected[resourceName] = 0;
    }
    
    this.statistics.resourcesCollected[resourceName] += amount;
    this.statistics.totalResourcesCollected += amount;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    eventBus.emit(GameEvents.RESOURCE_GAINED, {
      resource: resourceName,
      amount: amount
    });
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ (fallback)
  updateResourceStatistics() {
    if (!this.gameState.resources) return;
    
    let totalResources = 0;
    Object.entries(this.gameState.resources).forEach(([resource, amount]) => {
      if (typeof amount === 'number' && amount > 0) {
        if (!this.statistics.resourcesCollected[resource]) {
          this.statistics.resourcesCollected[resource] = 0;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ
        const currentCollected = this.statistics.resourcesCollected[resource];
        if (amount > currentCollected) {
          const newlyCollected = amount - currentCollected;
          this.statistics.resourcesCollected[resource] = amount;
          this.statistics.totalResourcesCollected += newlyCollected;
        }
        totalResources += this.statistics.resourcesCollected[resource];
      }
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  checkAchievements(category) {
    const relevantAchievements = ACHIEVEMENT_DEFS.filter(achievement => 
      achievement.category === category && 
      !this.gameState.achievements.completed.has(achievement.id)
    );

    if (relevantAchievements.length === 0) {
      return;
    }

    console.log(`üîç Checking ${relevantAchievements.length} achievements for category: ${category}`);

    relevantAchievements.forEach(achievement => {
      const currentValue = this.getCurrentValue(achievement.category);
      const isCompleted = currentValue >= achievement.target;
      
      console.log(`üìä Achievement ${achievement.id}: ${currentValue}/${achievement.target} ${isCompleted ? '‚úÖ' : '‚ùå'}`);
      
      if (isCompleted) {
        this.completeAchievement(achievement);
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.saveStatistics();
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
  isAchievementCompleted(achievement) {
    const currentValue = this.getCurrentValue(achievement.category);
    return currentValue >= achievement.target;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getCurrentValue(category) {
    switch (category) {
      case 'clicks':
        return this.statistics.totalClicks;
      case 'combo':
        return this.statistics.maxCombo;
      case 'total_resources':
        return this.statistics.totalResourcesCollected;
      case 'energy_zones':
        return this.statistics.energyZonesHit;
      default:
        // –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        return this.statistics.resourcesCollected[category] || 0;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  completeAchievement(achievement) {
    console.log(`üèÜ Achievement completed: ${achievement.name} (${achievement.id})`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
    this.gameState.achievements.completed.add(achievement.id);
    
    // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    this.giveRewards(achievement.reward);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showAchievementNotification(achievement);
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    eventBus.emit(GameEvents.ACHIEVEMENT_UNLOCKED, {
      achievement: achievement,
      reward: achievement.reward
    });
    
    eventBus.emit(GameEvents.SKILL_NOTIFICATION, {
      title: `üèÜ Achievement Unlocked!`,
      description: `${achievement.name}: ${achievement.description}\nReward: ${this.formatReward(achievement.reward)}`
    });
  }

  // –í—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã
  giveRewards(reward) {
    if (reward.skillPoints && this.gameState.skillManager) {
      this.gameState.skillManager.addSkillPoints(reward.skillPoints);
      eventBus.emit(GameEvents.SKILL_POINTS_CHANGED, this.gameState.skillPoints);
      console.log(`üíé Awarded ${reward.skillPoints} skill points from achievement`);
    }
    
    if (reward.resources) {
      Object.entries(reward.resources).forEach(([resource, amount]) => {
        this.gameState.addResource(resource, amount);
      });
      eventBus.emit(GameEvents.RESOURCE_CHANGED);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
  showAchievementNotification(achievement) {
    const rewardText = this.formatReward(achievement.reward);
    eventBus.emit(GameEvents.NOTIFICATION, 
      `üèÜ ${achievement.name} completed! Reward: ${rewardText}`
    );
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatReward(reward) {
    const parts = [];
    
    if (reward.skillPoints) {
      parts.push(`+${reward.skillPoints} ‚ú® Skill Points`);
    }
    
    if (reward.resources) {
      Object.entries(reward.resources).forEach(([resource, amount]) => {
        parts.push(`+${amount} ${resource}`);
      });
    }
    
    return parts.join(', ') || 'Experience';
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  forceCheckAllAchievements() {
    console.log('üîç Force checking all achievements...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = [...new Set(ACHIEVEMENT_DEFS.map(a => a.category))];
    console.log(`üìã Checking categories: ${categories.join(', ')}`);
    
    categories.forEach(category => {
      console.log(`üîç Checking category: ${category}`);
      this.checkAchievements(category);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    this.lastCheckedValues = {
      clicks: this.statistics.totalClicks,
      combo: this.statistics.maxCombo,
      totalResources: this.statistics.totalResourcesCollected,
      energyZones: this.statistics.energyZonesHit
    };
    
    console.log('‚úÖ Force check completed');
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  saveStatistics() {
    this.gameState.achievements.statistics = { ...this.statistics };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  getAllAchievements() {
    return ACHIEVEMENT_DEFS.map(achievement => ({
      ...achievement,
      completed: this.gameState.achievements.completed.has(achievement.id),
      progress: this.getCurrentValue(achievement.category),
      progressPercent: Math.min(100, (this.getCurrentValue(achievement.category) / achievement.target) * 100)
    }));
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  getAchievementsByCategory() {
    const categories = {};
    
    this.getAllAchievements().forEach(achievement => {
      const category = achievement.category;
      if (!categories[category]) {
        categories[category] = [];
      }
      categories[category].push(achievement);
    });
    
    return categories;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  getCompletedAchievements() {
    return this.getAllAchievements().filter(achievement => achievement.completed);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
  getAvailableAchievements() {
    return this.getAllAchievements().filter(achievement => !achievement.completed);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  getNearCompletionAchievements(threshold = 0.8) {
    return this.getAvailableAchievements()
      .filter(achievement => achievement.progressPercent >= threshold * 100)
      .sort((a, b) => b.progressPercent - a.progressPercent);
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  getAchievementStats() {
    const allAchievements = this.getAllAchievements();
    const completed = allAchievements.filter(a => a.completed);
    
    return {
      total: allAchievements.length,
      completed: completed.length,
      completionPercent: (completed.length / allAchievements.length) * 100,
      totalSkillPointsEarned: completed.reduce((sum, a) => sum + (a.reward.skillPoints || 0), 0),
      statistics: { ...this.statistics },
      lastCheckedValues: { ...this.lastCheckedValues },
      recentProgress: this.getRecentProgress()
    };
  }

  // –ù–û–í–´–ô: –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
  getRecentProgress() {
    return {
      clicksSinceLastCheck: this.statistics.totalClicks - this.lastCheckedValues.clicks,
      comboImprovement: this.statistics.maxCombo > this.lastCheckedValues.combo,
      resourcesGained: this.statistics.totalResourcesCollected - this.lastCheckedValues.totalResources,
      energyZonesGained: this.statistics.energyZonesHit - this.lastCheckedValues.energyZones
    };
  }

  // –°–±—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  resetAchievements() {
    console.log('üîÑ Resetting all achievements...');
    
    this.gameState.achievements = {
      completed: new Set(),
      statistics: {
        totalClicks: 0,
        maxCombo: 0,
        resourcesCollected: {},
        totalResourcesCollected: 0,
        energyZonesHit: 0
      }
    };
    
    this.statistics = { ...this.gameState.achievements.statistics };
    this.lastCheckedValues = {
      clicks: 0,
      combo: 0,
      totalResources: 0,
      energyZones: 0
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  getSaveData() {
    return {
      completed: Array.from(this.gameState.achievements.completed),
      statistics: { ...this.statistics }
    };
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  loadSaveData(data) {
    if (data && typeof data === 'object') {
      this.gameState.achievements = {
        completed: new Set(data.completed || []),
        statistics: data.statistics || this.statistics
      };
      
      this.statistics = { ...this.gameState.achievements.statistics };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      if (this.statistics.energyZonesHit === undefined) {
        this.statistics.energyZonesHit = 0;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      this.lastCheckedValues = {
        clicks: this.statistics.totalClicks,
        combo: this.statistics.maxCombo,
        totalResources: this.statistics.totalResourcesCollected,
        energyZones: this.statistics.energyZonesHit
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      this.createTimeout(() => {
        this.forceCheckAllAchievements();
      }, 1000);
    }
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ AchievementManager cleanup started');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.saveStatistics();
    
    super.destroy();
    
    console.log('‚úÖ AchievementManager destroyed');
  }
}