/**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–∫–æ–≤
   */
  updateClickStats(angle) {
    this.clickStats.totalClicks++;
    this.clickStats.lastClickTime = Date.now();
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—á–Ω–æ—Å—Ç–∏
    if (this.clickStats.accuracyHistory.length > 100) {
      this.clickStats.accuracyHistory.shift();
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∑–æ–Ω–∞–º
   */
  processZoneClick(clickResult, now) {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!clickResult || typeof clickResult !== 'object') {
      console.warn('‚ö†Ô∏è Invalid click result provided to processZoneClick');
      return;
    }
    
    const { zoneIndex, zoneType, isTarget, effects, accuracy } = clickResult;
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (typeof zoneIndex !== 'number' || !zoneType) {
      console.warn('‚ö†Ô∏è Invalid click result structure:', clickResult);
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (typeof accuracy === 'number') {
      this.clickStats.accuracyHistory.push(accuracy);
      this.clickStats.averageAccuracy = this.clickStats.accuracyHistory.reduce((a, b) => a + b, 0) / this.clickStats.accuracyHistory.length;
    }
    
    if (isTarget) {
      // –ö–ª–∏–∫ –ø–æ —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω–µ
      this.handleTargetZoneHit(clickResult, now);
      this.clickStats.hitClicks++;
    } else {
      // –ö–ª–∏–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ
      this.handleSpecialZoneHit(clickResult, now);
      this.clickStats.missClicks++;
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
   */
  handleTargetZoneHit(clickResult, now) {
    if (!clickResult || !clickResult.effects) {
      console.warn('‚ö†Ô∏è Invalid click result for target zone hit');
      return;
    }
    
    const { zoneIndex, effects, accuracy = 0.5 } = clickResult;
    
    console.log(`üéØ HIT TARGET ZONE ${zoneIndex}! Accuracy: ${accuracy.toFixed(3)}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
    if (!this.checkEnergyForClick(effects.energyCost || 1)) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–±–∞—Ñ—Ñ—ã
    if (this.isGhostClickActive() && Math.random() < GAME_CONSTANTS.GHOST_CLICK_CHANCE) {
      eventBus.emit(GameEvents.GHOST_CLICK);
      return;
    }

    if (this.isHeavyClickActive()) {
      if (!this.handleHeavyClick(clickResult)) {
        return;
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–±–æ —Å —É—á–µ—Ç–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏
    const effectiveCombo = this.handleCombo(clickResult, now, accuracy);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞ —Å –±–æ–Ω—É—Å–æ–º –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å
    this.handleGoldGain(clickResult, effectiveCombo, accuracy);
    
    // –¢—Ä–∞—Ç–∏–º —ç–Ω–µ—Ä–≥–∏—é
    this.handleEnergyConsumption(effects.energyCost || 1);
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    this.handleZoneShuffle(clickResult);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –±–∞—Ñ—Ñ–æ–≤/–¥–µ–±–∞—Ñ—Ñ–æ–≤
    this.handleEffectChance();
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è
    eventBus.emit(GameEvents.ZONE_HIT, {
      zone: zoneIndex,
      combo: effectiveCombo,
      angle: clickResult.angle,
      accuracy: accuracy,
      isTarget: true,
      timestamp: now
    });
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
   */
  handleSpecialZoneHit(clickResult, now) {
    if (!clickResult || !clickResult.zoneType || !clickResult.effects) {
      console.warn('‚ö†Ô∏è Invalid click result for special zone hit');
      return;
    }
    
    const { zoneIndex, zoneType, effects, accuracy = 0.5 } = clickResult;
    
    console.log(`‚ö° HIT SPECIAL ZONE ${zoneIndex} (${zoneType.id}) - Accuracy: ${accuracy.toFixed(3)}`);
    
    try {
      switch (zoneType.id) {
        case 'energy':
          const energyRestore = Math.floor((effects.energyRestore || 3) * (1 + accuracy * 0.5));
          this.handleEnergyRestore(energyRestore, 'energy_zone');
          eventBus.emit(GameEvents.NOTIFICATION, `‚ö° Energy zone: +${energyRestore} Energy (${(accuracy * 100).toFixed(1)}% accuracy)`);
          
          eventBus.emit(GameEvents.ENERGY_ZONE_HIT, {
            amount: energyRestore,
            accuracy: accuracy,
            zoneType: 'energy'
          });
          break;
          
        case 'bonus':
          const energyBonus = Math.floor((effects.energyRestore || 2) * (1 + accuracy * 0.3));
          const resourceBonus = Math.floor((effects.resourceAmount || 2) * (1 + accuracy * 0.5));
          
          this.handleEnergyRestore(energyBonus, 'bonus_zone');
          this.handleBonusResources(resourceBonus);
          eventBus.emit(GameEvents.NOTIFICATION, `üí∞ Bonus zone: +${resourceBonus} resources + ${energyBonus} energy!`);
          break;
          
        case 'inactive':
        default:
          eventBus.emit(GameEvents.NOTIFICATION, '‚ö´ Inactive zone - no effect');
          this.resetCombo('hit inactive zone');
          break;
      }
    } catch (error) {
      console.error('‚ùå Error handling special zone hit:', error);
      eventBus.emit(GameEvents.NOTIFICATION, '‚ùå Error processing zone effect');
    }
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–º–∞—Ö–∞ (–ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –Ω–µ-—Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É)
    eventBus.emit(GameEvents.ZONE_MISS, {
      zone: zoneIndex,
      target: this.gameState.targetZone,
      angle: clickResult.angle || 0,
      accuracy: accuracy,
      zoneType: zoneType.id,
      timestamp: now
    });
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π
   */
  handleZoneShuffle(clickResult) {
    if (!clickResult || typeof clickResult.zoneIndex !== 'number') {
      console.warn('‚ö†Ô∏è Invalid click result for zone shuffle');
      return;
    }
    
    const { zoneIndex } = clickResult;
    
    if (zoneIndex === this.gameState.targetZone && 
        Math.random() * 100 < GAME_CONSTANTS.ZONE_SHUFFLE_CHANCE) {
      
      // Reverse Controls debuff
      if (this.gameState.debuffs && this.gameState.debuffs.includes('reverseControls')) {
        const newTarget = (this.gameState.targetZone - 1 + 8) % 8; // 8 = ZONE_COUNT
        
        if (this.zoneManager && typeof this.zoneManager.setTargetZone === 'function') {
          const success = this.zoneManager.setTargetZone(newTarget);
          if (success) {
            eventBus.emit(GameEvents.TEMP_MESSAGE, 'üôÉ Reverse Controls: Zone moves backward');
          }
        }
      } else {
        // –û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
        if (this.zoneManager && typeof this.zoneManager.shuffleZones === 'function') {
          try {
            this.zoneManager.shuffleZones();
          } catch (error) {
            console.error('‚ùå Error shuffling zones:', error);
          }
        }
      }
    }
  }

  // –°–±—Ä–æ—Å –∫–æ–º–±–æ
  resetCombo(reason = 'unknown') {
    if (this.gameState.combo && this.gameState.combo.count > 0) {
      console.log(`üí• Combo reset: ${reason} (was ${this.gameState.combo.count})`);
      
      const oldCombo = this.gameState.combo.count;
      this.gameState.combo.count = 0;
      this.gameState.combo.deadline = 0;
      this.gameState.combo.lastZone = null;
      this.gameState.combo.lastAngle = null;
      
      eventBus.emit(GameEvents.COMBO_CHANGED, {
        count: 0,
        effective: 0,
        zone: null,
        target: this.gameState.targetZone,
        deadline: 0,
        reason: reason,
        previousCount: oldCombo
      });
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∫–ª–∏–∫–∞
   */
  checkEnergyForClick(energyCost) {
    const cost = (typeof energyCost === 'number' && !isNaN(energyCost)) ? energyCost : 1;
    
    if (!this.gameState.energyManager) {
      console.warn('‚ö†Ô∏è Energy manager not available, allowing click');
      return true;
    }
    
    try {
      if (!this.gameState.energyManager.canClick()) {
        const energyInfo = this.gameState.energyManager.getEnergyInfo();
        if (energyInfo) {
          eventBus.emit(GameEvents.NOTIFICATION, 
            `‚ö° Not enough energy! Need ${energyInfo.clickCost}, have ${energyInfo.current}`);
        } else {
          eventBus.emit(GameEvents.NOTIFICATION, '‚ö° Not enough energy!');
        }
        return false;
      }
    } catch (error) {
      console.error('‚ùå Error checking energy for click:', error);
      return true; // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∏–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
    
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Ghost Click
  isGhostClickActive() {
    return this.gameState.debuffs && 
           this.gameState.debuffs.includes('ghost');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Heavy Click
  isHeavyClickActive() {
    return this.gameState.debuffs && 
           this.gameState.debuffs.includes('heavyClick');
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Heavy Click debuff
   */
  handleHeavyClick(clickResult) {
    if (!clickResult || typeof clickResult.zoneIndex !== 'number') {
      console.warn('‚ö†Ô∏è Invalid click result for heavy click handling');
      return false;
    }
    
    const { zoneIndex } = clickResult;
    const required = GAME_CONSTANTS.HEAVY_CLICK_REQUIRED;
    const zoneKey = `zone_${zoneIndex}`;
    
    if (!this.gameState.effectStates) {
      this.gameState.effectStates = {};
    }
    
    if (!this.gameState.effectStates.heavyClickRequired) {
      this.gameState.effectStates.heavyClickRequired = {};
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–æ–Ω
    Object.keys(this.gameState.effectStates.heavyClickRequired).forEach(key => {
      if (key !== zoneKey) {
        this.gameState.effectStates.heavyClickRequired[key] = 0;
      }
    });
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–æ–Ω—ã
    const currentCount = this.gameState.effectStates.heavyClickRequired[zoneKey] || 0;
    this.gameState.effectStates.heavyClickRequired[zoneKey] = currentCount + 1;
    
    if (this.gameState.effectStates.heavyClickRequired[zoneKey] < required) {
      eventBus.emit(GameEvents.HEAVY_CLICK_PROGRESS, {
        current: this.gameState.effectStates.heavyClickRequired[zoneKey],
        required: required,
        zone: zoneIndex
      });
      return false;
    } else {
      this.gameState.effectStates.heavyClickRequired[zoneKey] = 0;
      return true;
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–æ —Å –±–æ–Ω—É—Å–æ–º –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å
   */
  handleCombo(clickResult, now, accuracy = 0.5) {
    if (!clickResult || typeof now !== 'number') {
      console.warn('‚ö†Ô∏è Invalid parameters for combo handling');
      return 0;
    }
    
    const { zoneIndex, angle } = clickResult;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≥–æ–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (this.gameState.combo) {
      this.gameState.combo.lastAngle = angle || 0;
    }
    
    // Time Stretch skill - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–º–±–æ
    const extraTime = this.getSkillBonus('duration', 'combo_timeout');
    const comboTimeout = GAME_CONSTANTS.COMBO_TIMEOUT + extraTime;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∑–∫—É –∫–æ–º–±–æ (Freeze debuff)
    const isComboFrozen = this.gameState.debuffs && 
                         this.gameState.debuffs.includes('freeze');
    
    const safeNow = Math.max(now, 0);
    const currentDeadline = this.gameState.combo?.deadline || 0;
    
    if (!isComboFrozen) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –∫–æ–º–±–æ
      const comboExpired = this.gameState.combo.count > 0 && safeNow > currentDeadline;
      
      if (comboExpired) {
        console.log(`‚è∞ Combo expired on hit (was ${this.gameState.combo.count}), starting new combo`);
        this.gameState.combo.count = 1;
      } else {
        this.gameState.combo.count++;
      }
      
      // –ë–æ–Ω—É—Å –∫ –∫–æ–º–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
      if (accuracy > 0.9) {
        this.gameState.combo.count += 1; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
        console.log(`üéØ Perfect accuracy bonus! Combo: ${this.gameState.combo.count}`);
      }
      
      console.log(`‚úÖ TARGET HIT! Combo: ${this.gameState.combo.count} (accuracy: ${(accuracy * 100).toFixed(1)}%)`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º deadline
      this.gameState.combo.deadline = safeNow + comboTimeout;
      
    } else {
      console.log(`‚ùÑÔ∏è Combo frozen at ${this.gameState.combo.count}`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–æ–Ω—É
    this.gameState.combo.lastZone = zoneIndex;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–º–±–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    this.gameState.combo.count = Math.min(
      Math.max(0, this.gameState.combo.count),
      GAME_CONSTANTS.MAX_COMBO_COUNT
    );
    
    // Combo Master skill - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–±–æ
    const comboMultiplier = 1 + this.getSkillBonus('multiplier', 'combo');
    const effectiveCombo = Math.floor(this.gameState.combo.count * comboMultiplier);
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–±–æ
    eventBus.emit(GameEvents.COMBO_CHANGED, {
      count: this.gameState.combo.count,
      effective: effectiveCombo,
      zone: zoneIndex,
      target: this.gameState.targetZone,
      deadline: this.gameState.combo.deadline,
      timeLeft: Math.max(0, this.gameState.combo.deadline - safeNow),
      accuracy: accuracy,
      reason: 'target_hit'
    });
    
    console.log(`üìä Combo state: ${this.gameState.combo.count} (effective: ${effectiveCombo})`);
    
    return effectiveCombo;
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞ —Å –±–æ–Ω—É—Å–æ–º –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å
   */
  handleGoldGain(clickResult, effectiveCombo, accuracy = 0.5) {
    if (typeof effectiveCombo !== 'number' || isNaN(effectiveCombo)) {
      console.warn('‚ö†Ô∏è Invalid effective combo for gold gain');
      effectiveCombo = 1;
    }
    
    let clickMultiplier = 1;
    
    // Double Tap buff
    if (this.gameState.buffs && this.gameState.buffs.includes('doubleTap')) {
      clickMultiplier = GAME_CONSTANTS.DOUBLE_TAP_MULTIPLIER;
    }
    
    let goldGain = Math.max(1, effectiveCombo * clickMultiplier);
    
    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å (–¥–æ 50% –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–æ–ª–æ—Ç–∞ –∑–∞ –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ)
    const accuracyBonus = 1 + (accuracy * 0.5);
    goldGain = Math.floor(goldGain * accuracyBonus);
    
    // Golden Touch skill
    const goldMultiplier = 1 + this.getSkillBonus('multiplier', 'gold');
    goldGain = Math.floor(goldGain * goldMultiplier);
    
    // Frenzy buff
    if (this.gameState.buffs && this.gameState.buffs.includes('frenzy')) {
      goldGain *= GAME_CONSTANTS.FRENZY_MULTIPLIER;
    }
    
    // Golden Touch buff (—ç–ø–∏—á–µ—Å–∫–∏–π)
    if (this.gameState.buffs && this.gameState.buffs.includes('goldenTouch')) {
      goldGain *= 3;
    }
    
    // Critical Strike skill
    const critChance = this.getSkillBonus('chance', 'critical');
    if (Math.random() < critChance) {
      goldGain *= 2;
      eventBus.emit(GameEvents.CRITICAL_HIT, { damage: goldGain });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ
    this.addResource('gold', goldGain);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.handleStarPower();
    this.handleSlotMachine();
    this.handleResourceFinder(effectiveCombo, accuracy);
    
    eventBus.emit(GameEvents.RESOURCE_CHANGED, { 
      resource: 'gold', 
      amount: this.gameState.resources.gold 
    });
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    eventBus.emit(GameEvents.RESOURCE_GAINED, {
      resource: 'gold',
      amount: goldGain,
      accuracy: accuracy
    });
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
   */
  handleEnergyRestore(amount, zoneType) {
    const restoreAmount = (typeof amount === 'number' && !isNaN(amount)) ? Math.max(0, amount) : 0;
    const sourceType = (typeof zoneType === 'string') ? zoneType : 'unknown';
    
    if (this.gameState.energyManager && typeof this.gameState.energyManager.restoreEnergy === 'function') {
      try {
        this.gameState.energyManager.restoreEnergy(restoreAmount, sourceType);
        
        eventBus.emit(GameEvents.ENERGY_ZONE_HIT, {
          amount: restoreAmount,
          zoneType: sourceType
        });
      } catch (error) {
        console.error('‚ùå Error restoring energy:', error);
      }
    } else {
      console.warn('‚ö†Ô∏è Energy manager not available for energy restore');
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–Ω—É—Å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  handleBonusResources(amount) {
    const bonusAmount = (typeof amount === 'number' && !isNaN(amount)) ? Math.max(1, amount) : 2;
    
    try {
      const resourcePool = getResourcesInGroup('TRADEABLE');
      if (!resourcePool || resourcePool.length === 0) {
        console.warn('‚ö†Ô∏è No tradeable resources available for bonus');
        return;
      }
      
      const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
      
      this.addResource(randomResource, bonusAmount);
      eventBus.emit(GameEvents.RESOURCE_GAINED, {
        resource: randomResource,
        amount: bonusAmount
      });
    } catch (error) {
      console.error('‚ùå Error handling bonus resources:', error);
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
   */
  handleEnergyConsumption(cost) {
    const energyCost = (typeof cost === 'number' && !isNaN(cost)) ? Math.max(0, cost) : 1;
    
    if (this.gameState.energyManager && typeof this.gameState.energyManager.consumeEnergy === 'function') {
      try {
        this.gameState.energyManager.consumeEnergy(energyCost);
      } catch (error) {
        console.error('‚ùå Error consuming energy:', error);
      }
    } else {
      console.warn('‚ö†Ô∏è Energy manager not available for energy consumption');
    }
  }

  // Star Power buff
  handleStarPower() {
    if (this.gameState.buffs && this.gameState.buffs.includes('starPower') && 
        this.gameState.effectStates && this.gameState.effectStates.starPowerClicks > 0) {
      
      try {
        const resourcePool = getResourcesInGroup('TRADEABLE');
        if (!resourcePool || resourcePool.length === 0) {
          console.warn('‚ö†Ô∏è No tradeable resources for star power');
          return;
        }
        
        const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
        const bonusAmount = GAME_CONSTANTS.STAR_POWER_BONUS;
        
        this.addResource(randomResource, bonusAmount);
        this.gameState.effectStates.starPowerClicks--;
        
        eventBus.emit(GameEvents.STAR_POWER_USED, {
          resource: randomResource,
          amount: bonusAmount,
          remaining: this.gameState.effectStates.starPowerClicks
        });
        
        if (this.gameState.effectStates.starPowerClicks <= 0) {
          this.removeBuff('starPower');
        }
      } catch (error) {
        console.error('‚ùå Error handling star power:', error);
      }
    }
  }

  // Slot Machine buff
  handleSlotMachine() {
    if (this.gameState.buffs && this.gameState.buffs.includes('slotMachine') && 
        Math.random() < GAME_CONSTANTS.SLOT_MACHINE_CHANCE) {
      
      try {
        const resourcePool = getResourcesInGroup('TRADEABLE');
        if (!resourcePool || resourcePool.length === 0) {
          console.warn('‚ö†Ô∏è No tradeable resources for slot machine');
          return;
        }
        
        const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
        const bonusAmount = GAME_CONSTANTS.SLOT_MACHINE_AMOUNT;
        
        this.addResource(randomResource, bonusAmount);
        
        eventBus.emit(GameEvents.SLOT_MACHINE_WIN, {
          resource: randomResource,
          amount: bonusAmount
        });
      } catch (error) {
        console.error('‚ùå Error handling slot machine:', error);
      }
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è Resource Finder skill —Å –±–æ–Ω—É—Å–æ–º –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å
   */
  handleResourceFinder(effectiveCombo, accuracy = 0.5) {
    const safeCombo = (typeof effectiveCombo === 'number' && !isNaN(effectiveCombo)) ? 
                     Math.max(1, effectiveCombo) : 1;
    
    try {
      let bonusChance = this.getSkillBonus('chance', 'bonus_resource');
      
      // –ë–æ–Ω—É—Å –∫ —à–∞–Ω—Å—É –∑–∞ –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
      bonusChance += accuracy * 0.1; // –î–æ 10% –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —à–∞–Ω—Å–∞
      
      if (Math.random() < bonusChance) {
        const resourcePool = getResourcesInGroup('TRADEABLE');
        if (!resourcePool || resourcePool.length === 0) {
          console.warn('‚ö†Ô∏è No tradeable resources for resource finder');
          return;
        }
        
        const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
        const bonusAmount = Math.max(1, Math.floor(safeCombo * 0.5 * (1 + accuracy * 0.5)));
        
        this.addResource(randomResource, bonusAmount);
        
        eventBus.emit(GameEvents.BONUS_RESOURCE_FOUND, {
          resource: randomResource,
          amount: bonusAmount,
          accuracy: accuracy
        });
      }
    } catch (error) {
      console.error('‚ùå Error handling resource finder:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–Ω—Å–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  handleEffectChance() {
    if (Math.random() * 100 < GAME_CONSTANTS.BASE_EFFECT_CHANCE) {
      const variation = (Math.random() - 0.5) * 
                       (GAME_CONSTANTS.EFFECT_CHANCE_RANGE.max - GAME_CONSTANTS.EFFECT_CHANCE_RANGE.min);
      
      // Lucky Charm skill
      const buffChanceBonus = this.getSkillBonus('chance', 'buff') * 100;
      
      // Lucky Zone buff
      const luckyBonus = (this.gameState.buffs && this.gameState.buffs.includes('lucky')) ? 
                        GAME_CONSTANTS.LUCKY_BUFF_BONUS : 0;
      
      // Inner Peace skill
      const chaosReduction = this.getSkillBonus('reduction', 'chaos');
      const effectiveChaos = Math.max(0, (this.gameState.resources.chaos || 0) * (1 - chaosReduction));
      
      // Curse debuff
      const curseReduction = (this.gameState.debuffs && this.gameState.debuffs.includes('curse')) ? 50 : 0;
      
      let buffChance = GAME_CONSTANTS.BASE_EFFECT_CHANCE + 
                      ((this.gameState.resources.faith || 0) - effectiveChaos) + 
                      variation + 
                      buffChanceBonus + 
                      luckyBonus - 
                      curseReduction;
      
      buffChance = Math.max(0, Math.min(100, buffChance));

      if (Math.random() * 100 < buffChance) {
        this.triggerRandomBuff();
      } else {
        this.triggerRandomDebuff();
      }
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–∞—Ñ—Ñ–∞
   */
  triggerRandomBuff() {
    if (this.buffManager && typeof this.buffManager.applyRandomBuff === 'function') {
      try {
        this.buffManager.applyRandomBuff();
      } catch (error) {
        console.error('‚ùå Error triggering random buff:', error);
      }
    } else {
      console.warn('‚ö†Ô∏è BuffManager not available for triggering buff');
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–µ–±–∞—Ñ—Ñ–∞
   */
  triggerRandomDebuff() {
    if (this.buffManager && typeof this.buffManager.applyRandomDebuff === 'function') {
      try {
        this.buffManager.applyRandomDebuff();
      } catch (error) {
        console.error('‚ùå Error triggering random debuff:', error);
      }
    } else {
      console.warn('‚ö†Ô∏è BuffManager not available for triggering debuff');
    }
  }

  // ===== –£–¢–ò–õ–ò–¢–´ =====

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
   */
  getSkillBonus(type, target = null) {
    try {
      if (this.gameState.skillManager && 
          typeof this.gameState.skillManager.getSkillBonus === 'function') {
        return this.gameState.skillManager.getSkillBonus(type, target);
      }
    } catch (error) {
      console.error('‚ùå Error getting skill bonus:', error);
    }
    return 0;
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
   */
  addResource(resourceName, amount) {
    if (typeof resourceName !== 'string' || !resourceName.trim()) {
      console.warn('‚ö†Ô∏è Invalid resource name for addResource:', resourceName);
      return false;
    }
    
    const safeAmount = (typeof amount === 'number' && !isNaN(amount)) ? Math.max(0, amount) : 0;
    
    try {
      if (this.gameState.addResource && typeof this.gameState.addResource === 'function') {
        return this.gameState.addResource(resourceName, safeAmount);
      } else {
        // Fallback method
        if (!this.gameState.resources) {
          this.gameState.resources = {};
        }
        
        const currentAmount = this.gameState.resources[resourceName] || 0;
        const newAmount = Math.min(
          currentAmount + safeAmount,
          GAME_CONSTANTS.MAX_SAFE_RESOURCE_VALUE
        );
        this.gameState.resources[resourceName] = newAmount;
        return true;
      }
    } catch (error) {
      console.error('‚ùå Error adding resource:', error);
      return false;
    }
  }

  /**
   * –ò–°–ü–†–ê–í// managers/FeatureManager.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å —Ç–æ—á–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { ZoneManager } from './ZoneManager.js';
import { AngleManager } from '../utils/AngleManager.js';
import { ZoneEventQueue } from '../core/ZoneEventQueue.js';
import { GAME_CONSTANTS } from '../config/GameConstants.js';
import { RESOURCE_GROUPS, getResourcesInGroup } from '../config/ResourceConfig.js';

export class FeatureManager extends CleanupMixin {
  constructor(gameState, buffManager = null) {
    super();
    
    this.gameState = gameState;
    this.buffManager = buffManager;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ZoneManager —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    this.zoneManager = null;
    this.initializeZoneManager();
    
    this.comboCheckInterval = null;
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± —ç–Ω–µ—Ä–≥–∏–∏
    this.lastEnergyNotification = 0;
    this.energyNotificationCooldown = 2000;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    this.clickStats = {
      totalClicks: 0,
      hitClicks: 0,
      missClicks: 0,
      lastClickTime: 0,
      averageAccuracy: 0,
      accuracyHistory: []
    };
    
    this.bindEvents();
    this.startComboTimer();
    
    console.log('üéØ FeatureManager initialized with enhanced hit detection');
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ZoneManager
   */
  initializeZoneManager() {
    try {
      console.log('üéØ Initializing ZoneManager...');
      
      this.zoneManager = new ZoneManager(this.gameState);
      this.cleanupManager.registerComponent(this.zoneManager, 'ZoneManager');
      
      console.log('‚úÖ ZoneManager initialized successfully');
      return true;
      
    } catch (error) {
      console.error('‚ùå Failed to initialize ZoneManager:', error);
      this.zoneManager = null;
      return false;
    }
  }

  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–æ
  startComboTimer() {
    if (this.comboCheckInterval) {
      this.cleanupManager.clearInterval(this.comboCheckInterval);
    }
    
    this.comboCheckInterval = this.createInterval(() => {
      this.checkComboTimeout();
    }, 1000, 'combo-timeout-check');
    
    console.log('‚è∞ Combo timeout checker started');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∫–æ–º–±–æ
  checkComboTimeout() {
    if (!this.gameState.combo || this.gameState.combo.count === 0) {
      return;
    }
    
    const now = Date.now();
    const deadline = this.gameState.combo.deadline || 0;
    
    if (now > deadline && this.gameState.combo.count > 0) {
      console.log(`‚è∞ Combo timeout detected! Count was ${this.gameState.combo.count}, resetting to 0`);
      
      const oldCombo = this.gameState.combo.count;
      
      this.gameState.combo.count = 0;
      this.gameState.combo.deadline = 0;
      this.gameState.combo.lastZone = null;
      this.gameState.combo.lastAngle = null;
      
      eventBus.emit(GameEvents.COMBO_CHANGED, {
        count: 0,
        effective: 0,
        zone: null,
        target: this.gameState.targetZone,
        deadline: 0,
        reason: 'timeout',
        previousCount: oldCombo
      });
      
      eventBus.emit(GameEvents.NOTIFICATION, `‚è∞ Combo expired! (was ${oldCombo})`);
    }
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    eventBus.subscribe(GameEvents.CLICK, (data) => {
      this.handleClick(data.data || data);
    });
    
    console.log('üéØ Event handlers bound');
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è
   */
  handleClick(angle) {
    if (!this.isActive()) {
      console.warn('‚ö†Ô∏è FeatureManager not active, ignoring click');
      return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —É–≥–ª–∞
    const normalizedAngle = AngleManager.normalize(angle);
    if (!AngleManager.isValidAngle(normalizedAngle)) {
      console.warn('‚ö†Ô∏è Invalid angle provided to handleClick:', angle);
      return;
    }
    
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (Zone Lock debuff)
    if (now < (this.gameState.blockedUntil || 0)) {
      eventBus.emit(GameEvents.NOTIFICATION, 'üîí Zone is locked!');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–∫–æ–≤
    this.updateClickStats(normalizedAngle);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω—ã —Å fallback
    const clickResult = this.determineClickZone(normalizedAngle);
    
    if (!clickResult) {
      console.warn('‚ö†Ô∏è Could not determine click zone for angle:', normalizedAngle);
      this.handleClickMiss(normalizedAngle, now);
      return;
    }

    console.log(`üñ±Ô∏è Click processed: zone ${clickResult.zoneIndex}, target: ${this.gameState.targetZone}, accuracy: ${clickResult.accuracy?.toFixed(3) || 'N/A'}`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–æ–Ω—ã
    this.processZoneClick(clickResult, now);
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω—ã –∫–ª–∏–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
   */
  determineClickZone(angle) {
    let clickResult = null;
    
    // –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º ZoneManager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (this.zoneManager && typeof this.zoneManager.findZoneByAngle === 'function') {
      try {
        const foundZone = this.zoneManager.findZoneByAngle(angle);
        if (foundZone) {
          clickResult = this.zoneManager.handleZoneClick(foundZone, angle);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Error using ZoneManager for zone detection:', error);
      }
    }
    
    // –ú–µ—Ç–æ–¥ 2: Fallback —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º
    if (!clickResult) {
      console.log('üîÑ Using fallback zone detection');
      clickResult = this.calculateZoneFromAngle(angle);
    }
    
    // –ú–µ—Ç–æ–¥ 3: –ê–≤–∞—Ä–∏–π–Ω—ã–π fallback
    if (!clickResult) {
      console.warn('‚ö†Ô∏è All zone detection methods failed, using emergency fallback');
      clickResult = this.createEmergencyClickResult(angle);
    }
    
    return clickResult;
  }

  /**
   * –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–æ–Ω—ã –ø–æ —É–≥–ª—É
   */
  calculateZoneFromAngle(angle) {
    try {
      const zoneCount = 8; // ZONE_COUNT
      const stepAngle = (2 * Math.PI) / zoneCount;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∑–æ–Ω—ã
      const zoneIndex = Math.floor(angle / stepAngle) % zoneCount;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–æ–Ω—ã
      const isTarget = zoneIndex === (this.gameState.targetZone || 0);
      let zoneType = { id: 'inactive', effects: { energyCost: 0 } };
      
      if (isTarget) {
        zoneType = { 
          id: 'target', 
          effects: { 
            givesGold: true, 
            givesCombo: true, 
            energyCost: 1 
          } 
        };
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
      const zoneStartAngle = zoneIndex * stepAngle;
      const zoneEndAngle = (zoneIndex + 1) * stepAngle;
      const zoneCenterAngle = zoneStartAngle + (stepAngle / 2);
      
      const distanceToCenter = AngleManager.getAngleDistance(angle, zoneCenterAngle);
      const maxDistance = stepAngle / 2;
      const accuracy = Math.max(0, 1 - (distanceToCenter / maxDistance));
      
      return {
        zoneIndex,
        zoneType,
        angle,
        isTarget,
        effects: { ...zoneType.effects },
        accuracy,
        method: 'mathematical'
      };
      
    } catch (error) {
      console.error('‚ùå Error in mathematical zone calculation:', error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–ª–∏–∫–∞
   */
  createEmergencyClickResult(angle) {
    console.warn('üÜò Creating emergency click result');
    
    return {
      zoneIndex: 0,
      zoneType: { id: 'inactive', effects: { energyCost: 0 } },
      angle,
      isTarget: false,
      effects: { energyCost: 0 },
      accuracy: 0.5,
      method: 'emergency'
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–∞—Ö–∞
   */
  handleClickMiss(angle, now) {
    console.log(`‚ùå Click miss at angle ${angle.toFixed(3)}`);
    
    this.clickStats.missClicks++;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ –ø—Ä–∏ –ø—Ä–æ–º–∞—Ö–µ
    this.resetCombo('click_miss');
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–º–∞—Ö–∞
    eventBus.emit(GameEvents.ZONE_MISS, {
      angle,
      target: this.gameState.targetZone,
      timestamp: now,
      reason: 'no_zone_found'
    });
    
    eventBus.emit(GameEvents.NOTIFICATION, '‚ùå Click missed!');