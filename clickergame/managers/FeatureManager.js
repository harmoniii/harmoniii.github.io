// managers/FeatureManager.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ—Å–±—Ä–æ—Å–æ–º –∫–æ–º–±–æ
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { Zone } from '../utils/Zone.js';
import { ZONE_COUNT } from '../config/ResourceConfig.js';
import { GAME_CONSTANTS, UI_CONFIG } from '../config/GameConstants.js';
import { RESOURCE_GROUPS, getResourcesInGroup } from '../config/ResourceConfig.js';
import { ZONE_TYPES, ZoneTypeManager } from '../config/ZoneTypes.js';

export class FeatureManager extends CleanupMixin {
  constructor(gameState, buffManager = null) {
  super();
  
  this.gameState = gameState;
  this.buffManager = buffManager;
  this.zones = [];
  this.zoneTypes = []; // –ù–û–í–´–ô: –º–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –∑–æ–Ω
  
  this.comboCheckInterval = null;
  
  this.initializeZones();
  this.bindEvents();
  this.startComboTimer();
  
  console.log('üéØ FeatureManager initialized with energy zones');
}

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω
  initializeZones() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –∑–æ–Ω
  if (typeof this.gameState.targetZone !== 'number' || 
      this.gameState.targetZone < 0 || 
      this.gameState.targetZone >= ZONE_COUNT) {
    this.gameState.targetZone = Math.floor(Math.random() * ZONE_COUNT);
  }
  
  if (typeof this.gameState.previousTargetZone !== 'number') {
    this.gameState.previousTargetZone = this.gameState.targetZone;
  }
  
  // –ù–û–í–´–ô: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–æ–Ω
  this.generateZoneTypes();
  
  // –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã —Å —Ç–∏–ø–∞–º–∏
  this.zones = Array.from({ length: ZONE_COUNT }, (_, i) => {
    const zoneType = this.zoneTypes[i] || ZONE_TYPES.GOLD;
    return new Zone({ type: zoneType.id, zoneType: zoneType }, i, ZONE_COUNT);
  });
  
  console.log(`üéØ Created ${ZONE_COUNT} zones with energy system`);
}

generateZoneTypes() {
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–æ–Ω
  const energyPercentage = this.calculateEnergyZonePercentage();
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–æ–Ω
  this.zoneTypes = ZoneTypeManager.generateZoneTypes(ZONE_COUNT, energyPercentage);
  
  console.log(`üéØ Generated zone types: ${energyPercentage * 100}% energy zones`);
}

calculateEnergyZonePercentage() {
  // –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–æ–Ω
  let energyPercentage = 0.25; // 25% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –µ—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏–∏ –º–∞–ª–æ
  if (this.gameState.energyManager) {
    const energyPerc = this.gameState.energyManager.getEnergyPercentage();
    
    if (energyPerc < 10) {
      energyPercentage = 0.5; // 50% –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
    } else if (energyPerc < 30) {
      energyPercentage = 0.35; // 35% –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
    }
  }
  
  return energyPercentage;
}

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–æ
  startComboTimer() {
    if (this.comboCheckInterval) {
      this.cleanupManager.clearInterval(this.comboCheckInterval);
    }
    
    this.comboCheckInterval = this.createInterval(() => {
      this.checkComboTimeout();
    }, 1000, 'combo-timeout-check'); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    
    console.log('‚è∞ Combo timeout checker started');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∫–æ–º–±–æ
  checkComboTimeout() {
    if (!this.gameState.combo || this.gameState.combo.count === 0) {
      return; // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º–±–æ
    }
    
    const now = Date.now();
    const deadline = this.gameState.combo.deadline || 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–∞–π–º–µ—Ä –∫–æ–º–±–æ
    if (now > deadline && this.gameState.combo.count > 0) {
      console.log(`‚è∞ Combo timeout detected! Count was ${this.gameState.combo.count}, resetting to 0`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      const oldCombo = this.gameState.combo.count;
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ
      this.gameState.combo.count = 0;
      this.gameState.combo.deadline = 0;
      this.gameState.combo.lastZone = null;
      this.gameState.combo.lastAngle = null;
      
      // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–±–æ
      eventBus.emit(GameEvents.COMBO_CHANGED, {
        count: 0,
        effective: 0,
        zone: null,
        target: this.gameState.targetZone,
        deadline: 0,
        reason: 'timeout',
        previousCount: oldCombo
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      eventBus.emit(GameEvents.NOTIFICATION, `‚è∞ Combo expired! (was ${oldCombo})`);
    }
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
    eventBus.subscribe(GameEvents.CLICK, (data) => {
      this.handleClick(data.data || data);
    });
    
    console.log('üéØ Event handlers bound');
  }

  // –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
 handleClick(angle) {
  if (!this.isActive()) return;
  
  const now = Date.now();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (Zone Lock debuff)
  if (now < (this.gameState.blockedUntil || 0)) {
    eventBus.emit(GameEvents.NOTIFICATION, 'üîí Zone is locked!');
    return;
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –∏ –Ω–∞—Ö–æ–¥–∏–º –∑–æ–Ω—É
  const normalizedAngle = this.normalizeAngle(angle);
  const clickedZone = this.findZoneByAngle(normalizedAngle);
  
  if (!clickedZone) {
    console.warn('No zone found for angle:', normalizedAngle);
    return;
  }

  // –ù–û–í–´–ô: –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–æ–Ω—ã
  const zoneType = this.getZoneType(clickedZone.index);
  
  // –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–æ–ª–æ—Ç—ã—Ö –∑–æ–Ω)
  if (zoneType.effects.energyCost > 0) {
    if (!this.checkEnergyForClick(zoneType.effects.energyCost)) {
      return; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏
    }
  }

  // Ghost Click debuff - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
  if (this.isGhostClickActive() && Math.random() < GAME_CONSTANTS.GHOST_CLICK_CHANCE) {
    eventBus.emit(GameEvents.GHOST_CLICK);
    return;
  }

  // Heavy Click debuff - —Ç—Ä–µ–±—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤
  if (this.isHeavyClickActive()) {
    if (!this.handleHeavyClick(clickedZone)) {
      return; // –ö–ª–∏–∫ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω
    }
  }

  // –ù–û–í–´–ô: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∑–æ–Ω—ã
  this.handleZoneEffects(clickedZone, zoneType, normalizedAngle, now);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã
  this.handleZoneShuffle(clickedZone);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –±–∞—Ñ—Ñ–æ–≤/–¥–µ–±–∞—Ñ—Ñ–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–æ–ª–æ—Ç—ã—Ö –∑–æ–Ω)
  if (zoneType.effects.givesGold) {
    this.handleEffectChance();
  }
}

checkEnergyForClick(energyCost) {
  if (!this.gameState.energyManager) return true; // –ï—Å–ª–∏ –Ω–µ—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
  
  if (!this.gameState.energyManager.canClick()) {
    const energyInfo = this.gameState.energyManager.getEnergyInfo();
    eventBus.emit(GameEvents.NOTIFICATION, 
      `‚ö° Not enough energy! Need ${energyInfo.clickCost}, have ${energyInfo.current}`);
    return false;
  }
  
  return true;
}

getZoneType(zoneIndex) {
  return this.zoneTypes[zoneIndex] || ZONE_TYPES.GOLD;
}

handleZoneEffects(zone, zoneType, normalizedAngle, now) {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–±–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–æ–ª–æ—Ç—ã—Ö –∏ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–æ–Ω)
  let effectiveCombo = 0;
  if (zoneType.effects.givesCombo) {
    effectiveCombo = this.handleCombo(zone, normalizedAngle, now);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞
  if (zoneType.effects.givesGold) {
    this.handleGoldGain(zone, effectiveCombo, zoneType);
  }

  // –ù–û–í–´–ô: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
  if (zoneType.effects.energyRestore > 0) {
    this.handleEnergyRestore(zoneType.effects.energyRestore, zoneType.id);
  }

  // –ù–û–í–´–ô: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞—Ç—É —ç–Ω–µ—Ä–≥–∏–∏
  if (zoneType.effects.energyCost > 0) {
    this.handleEnergyConsumption(zoneType.effects.energyCost);
  }

  // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∑–æ–Ω—É
  eventBus.emit(GameEvents.ZONE_HIT, {
    zone: zone.index,
    zoneType: zoneType.id,
    combo: effectiveCombo,
    angle: normalizedAngle
  });
}

// 10. –ù–û–í–´–ô –º–µ—Ç–æ–¥ handleEnergyRestore()
handleEnergyRestore(amount, zoneType) {
  if (this.gameState.energyManager) {
    if (zoneType === 'energy') {
      this.gameState.energyManager.restoreFromEnergyZone();
    } else if (zoneType === 'bonus') {
      this.gameState.energyManager.restoreFromGoldZone();
    }
    
    eventBus.emit(GameEvents.ENERGY_ZONE_HIT, {
      amount: amount,
      zoneType: zoneType
    });
  }
}

// 11. –ù–û–í–´–ô –º–µ—Ç–æ–¥ handleEnergyConsumption()
handleEnergyConsumption(cost) {
  if (this.gameState.energyManager) {
    // –≠–Ω–µ—Ä–≥–∏—è —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤ checkEnergyForClick, –ø—Ä–æ—Å—Ç–æ —Ç—Ä–∞—Ç–∏–º
    this.gameState.energyManager.consumeEnergy(cost);
  }
}

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≥–ª–∞
  normalizeAngle(angle) {
    if (typeof angle !== 'number' || isNaN(angle)) {
      return 0;
    }
    return ((angle % (2 * Math.PI)) + (2 * Math.PI)) % (2 * Math.PI);
  }

  // –ü–æ–∏—Å–∫ –∑–æ–Ω—ã –ø–æ —É–≥–ª—É
  findZoneByAngle(angle) {
    return this.zones.find(zone => zone.contains(angle));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Ghost Click
  isGhostClickActive() {
    return this.gameState.debuffs && 
           this.gameState.debuffs.includes('ghost');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Heavy Click
  isHeavyClickActive() {
    return this.gameState.debuffs && 
           this.gameState.debuffs.includes('heavyClick');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Heavy Click debuff
  handleHeavyClick(zone) {
    const required = GAME_CONSTANTS.HEAVY_CLICK_REQUIRED;
    const zoneKey = `zone_${zone.index}`;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!this.gameState.effectStates.heavyClickRequired) {
      this.gameState.effectStates.heavyClickRequired = {};
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–æ–Ω
    Object.keys(this.gameState.effectStates.heavyClickRequired).forEach(key => {
      if (key !== zoneKey) {
        this.gameState.effectStates.heavyClickRequired[key] = 0;
      }
    });
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–æ–Ω—ã
    const currentCount = this.gameState.effectStates.heavyClickRequired[zoneKey] || 0;
    this.gameState.effectStates.heavyClickRequired[zoneKey] = currentCount + 1;
    
    if (this.gameState.effectStates.heavyClickRequired[zoneKey] < required) {
      eventBus.emit(GameEvents.HEAVY_CLICK_PROGRESS, {
        current: this.gameState.effectStates.heavyClickRequired[zoneKey],
        required: required,
        zone: zone.index
      });
      return false; // –ö–ª–∏–∫ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω
    } else {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–ª–∏–∫–∞
      this.gameState.effectStates.heavyClickRequired[zoneKey] = 0;
      return true; // –ö–ª–∏–∫ –∑–∞—Å—á–∏—Ç–∞–Ω
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∞–≤—Ç–æ—Å–±—Ä–æ—Å–æ–º
  handleCombo(zone, normalizedAngle, now) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≥–æ–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    this.gameState.combo.lastAngle = normalizedAngle;
    
    // Time Stretch skill - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–º–±–æ
    const extraTime = this.getSkillBonus('duration', 'combo_timeout');
    const comboTimeout = GAME_CONSTANTS.COMBO_TIMEOUT + extraTime;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∑–∫—É –∫–æ–º–±–æ (Freeze debuff)
    const isComboFrozen = this.gameState.debuffs && 
                         this.gameState.debuffs.includes('freeze');
    
    const safeNow = Math.max(now, 0);
    const currentDeadline = this.gameState.combo.deadline || 0;
    
    if (!isComboFrozen) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
      if (zone.index === this.gameState.targetZone) {
        // –ü–û–ü–ê–î–ê–ù–ò–ï –í –¶–ï–õ–¨
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
        const comboExpired = this.gameState.combo.count > 0 && safeNow > currentDeadline;
        
        if (comboExpired) {
          // –ö–æ–º–±–æ –∏—Å—Ç–µ–∫–ª–æ - –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
          console.log(`‚è∞ Combo expired on hit (was ${this.gameState.combo.count}), starting new combo`);
          this.gameState.combo.count = 1;
        } else {
          // –ö–æ–º–±–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫
          this.gameState.combo.count++;
        }
        
        console.log(`‚úÖ Combo HIT! Zone ${zone.index}, Combo: ${this.gameState.combo.count}`);
        
      } else {
        // –ü–†–û–ú–ê–•
        console.log(`‚ùå Combo MISS! Clicked zone ${zone.index}, target was ${this.gameState.targetZone}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –ø—Ä–æ–º–∞—Ö–∞
        if (this.canUseMissProtection()) {
          this.useMissProtection();
          eventBus.emit(GameEvents.MISS_PROTECTION_USED);
          console.log(`üõ°Ô∏è Miss protection used, combo preserved: ${this.gameState.combo.count}`);
          // –ö–æ–º–±–æ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º deadline
        } else {
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ
          this.gameState.combo.count = 1;
          console.log(`üí• Combo reset to 1 due to miss`);
        }
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º deadline –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –∫–ª–∏–∫–∞
      this.gameState.combo.deadline = safeNow + comboTimeout;
      
    } else {
      // –ö–æ–º–±–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ - –ª–æ–≥–∏—Ä—É–µ–º –Ω–æ –Ω–µ –∏–∑–º–µ–Ω—è–µ–º
      console.log(`‚ùÑÔ∏è Combo frozen at ${this.gameState.combo.count}`);
      // –ü—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ deadline –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–æ–Ω—É
    this.gameState.combo.lastZone = zone.index;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–º–±–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    this.gameState.combo.count = Math.min(
      Math.max(0, this.gameState.combo.count),
      GAME_CONSTANTS.MAX_COMBO_COUNT
    );
    
    // Combo Master skill - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–±–æ
    const comboMultiplier = 1 + this.getSkillBonus('multiplier', 'combo');
    const effectiveCombo = Math.floor(this.gameState.combo.count * comboMultiplier);
    
    // –í—Å–µ–≥–¥–∞ —ç–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–±–æ
    eventBus.emit(GameEvents.COMBO_CHANGED, {
      count: this.gameState.combo.count,
      effective: effectiveCombo,
      zone: zone.index,
      target: this.gameState.targetZone,
      deadline: this.gameState.combo.deadline,
      timeLeft: Math.max(0, this.gameState.combo.deadline - safeNow),
      reason: 'click'
    });
    
    console.log(`üìä Final combo state: ${this.gameState.combo.count} (effective: ${effectiveCombo})`);
    
    return effectiveCombo;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–æ–ª–æ—Ç–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  handleGoldAndEffects(zone, effectiveCombo) {
    let clickMultiplier = 1;
    
    // Double Tap buff - –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ 2
    if (this.gameState.buffs.includes('doubleTap')) {
      clickMultiplier = GAME_CONSTANTS.DOUBLE_TAP_MULTIPLIER;
    }
    
    let goldGain = effectiveCombo * clickMultiplier;
    
    // Golden Touch skill - –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–æ–ª–æ—Ç–∞
    const goldMultiplier = 1 + this.getSkillBonus('multiplier', 'gold');
    goldGain = Math.floor(goldGain * goldMultiplier);
    
    // Frenzy buff - —É–¥–≤–æ–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞
    if (this.gameState.buffs.includes('frenzy')) {
      goldGain *= GAME_CONSTANTS.FRENZY_MULTIPLIER;
    }
    
    // Golden Touch buff (—ç–ø–∏—á–µ—Å–∫–∏–π) - —É—Ç—Ä–æ–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞
    if (this.gameState.buffs.includes('goldenTouch')) {
      goldGain *= 3;
    }
    
    // Critical Strike skill - —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
    const critChance = this.getSkillBonus('chance', 'critical');
    if (Math.random() < critChance) {
      goldGain *= 2;
      eventBus.emit(GameEvents.CRITICAL_HIT, { damage: goldGain });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ
    this.addResource('gold', goldGain);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.handleStarPower();
    this.handleSlotMachine();
    this.handleResourceFinder(effectiveCombo);
    
    eventBus.emit(GameEvents.RESOURCE_CHANGED, { 
      resource: 'gold', 
      amount: this.gameState.resources.gold 
    });
  }

  handleGoldGain(zone, effectiveCombo, zoneType) {
  let clickMultiplier = 1;
  
  // Double Tap buff - –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ 2
  if (this.gameState.buffs.includes('doubleTap')) {
    clickMultiplier = GAME_CONSTANTS.DOUBLE_TAP_MULTIPLIER;
  }
  
  let goldGain = effectiveCombo * clickMultiplier;
  
  // –ù–û–í–´–ô: –ë–æ–Ω—É—Å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –æ—Å–æ–±—ã—Ö –∑–æ–Ω
  if (zoneType.effects.goldMultiplier) {
    goldGain *= zoneType.effects.goldMultiplier;
  }
  
  // Golden Touch skill - –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–æ–ª–æ—Ç–∞
  const goldMultiplier = 1 + this.getSkillBonus('multiplier', 'gold');
  goldGain = Math.floor(goldGain * goldMultiplier);
  
  // Frenzy buff - —É–¥–≤–æ–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞
  if (this.gameState.buffs.includes('frenzy')) {
    goldGain *= GAME_CONSTANTS.FRENZY_MULTIPLIER;
  }
  
  // Golden Touch buff (—ç–ø–∏—á–µ—Å–∫–∏–π) - —É—Ç—Ä–æ–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞
  if (this.gameState.buffs.includes('goldenTouch')) {
    goldGain *= 3;
  }
  
  // Critical Strike skill - —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
  const critChance = this.getSkillBonus('chance', 'critical');
  if (Math.random() < critChance) {
    goldGain *= 2;
    eventBus.emit(GameEvents.CRITICAL_HIT, { damage: goldGain });
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ
  this.addResource('gold', goldGain);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  this.handleStarPower();
  this.handleSlotMachine();
  this.handleResourceFinder(effectiveCombo);
  
  eventBus.emit(GameEvents.RESOURCE_CHANGED, { 
    resource: 'gold', 
    amount: this.gameState.resources.gold 
  });
  
  // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  eventBus.emit(GameEvents.RESOURCE_GAINED, {
    resource: 'gold',
    amount: goldGain
  });
}

refreshZoneTypes() {
  console.log('üîÑ Refreshing zone types...');
  this.generateZoneTypes();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–æ–Ω–∞—Ö
  this.zones.forEach((zone, index) => {
    const newZoneType = this.zoneTypes[index] || ZONE_TYPES.GOLD;
    zone.definition.zoneType = newZoneType;
    zone.definition.type = newZoneType.id;
  });
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
  if (this.gameState.gameLoop) {
    this.gameState.gameLoop.forceRedraw();
  }
}

// 14. –ù–û–í–´–ô –º–µ—Ç–æ–¥ getZoneStatistics()
getZoneStatistics() {
  const stats = {
    total: this.zones.length,
    types: {
      gold: 0,
      energy: 0,
      bonus: 0
    }
  };
  
  this.zoneTypes.forEach(zoneType => {
    if (stats.types[zoneType.id] !== undefined) {
      stats.types[zoneType.id]++;
    }
  });
  
  return stats;
}

  // Star Power buff - –±–æ–Ω—É—Å –∫ —Å–ª—É—á–∞–π–Ω–æ–º—É —Ä–µ—Å—É—Ä—Å—É
  handleStarPower() {
    if (this.gameState.buffs.includes('starPower') && 
        this.gameState.effectStates.starPowerClicks > 0) {
      
      const resourcePool = getResourcesInGroup('TRADEABLE');
      const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
      const bonusAmount = GAME_CONSTANTS.STAR_POWER_BONUS;
      
      this.addResource(randomResource, bonusAmount);
      this.gameState.effectStates.starPowerClicks--;
      
      eventBus.emit(GameEvents.STAR_POWER_USED, {
        resource: randomResource,
        amount: bonusAmount,
        remaining: this.gameState.effectStates.starPowerClicks
      });
      
      // –ï—Å–ª–∏ –∑–∞—Ä—è–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —É–¥–∞–ª—è–µ–º –±–∞—Ñ—Ñ
      if (this.gameState.effectStates.starPowerClicks <= 0) {
        this.removeBuff('starPower');
      }
    }
  }

  // Slot Machine buff - —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—É—Ä—Å
  handleSlotMachine() {
    if (this.gameState.buffs.includes('slotMachine') && 
        Math.random() < GAME_CONSTANTS.SLOT_MACHINE_CHANCE) {
      
      const resourcePool = getResourcesInGroup('TRADEABLE');
      const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
      const bonusAmount = GAME_CONSTANTS.SLOT_MACHINE_AMOUNT;
      
      this.addResource(randomResource, bonusAmount);
      
      eventBus.emit(GameEvents.SLOT_MACHINE_WIN, {
        resource: randomResource,
        amount: bonusAmount
      });
    }
  }

  // Resource Finder skill - —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—É—Ä—Å
  handleResourceFinder(effectiveCombo) {
    const bonusChance = this.getSkillBonus('chance', 'bonus_resource');
    
    if (Math.random() < bonusChance) {
      const resourcePool = getResourcesInGroup('TRADEABLE');
      const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
      const bonusAmount = Math.max(1, Math.floor(effectiveCombo * 0.5));
      
      this.addResource(randomResource, bonusAmount);
      
      eventBus.emit(GameEvents.BONUS_RESOURCE_FOUND, {
        resource: randomResource,
        amount: bonusAmount
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã
handleZoneShuffle(zone) {
  if (zone.index === this.gameState.targetZone && 
      Math.random() * 100 < GAME_CONSTANTS.ZONE_SHUFFLE_CHANCE) {
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â—É—é
    this.gameState.previousTargetZone = this.gameState.targetZone;
    
    // Reverse Controls debuff - –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    if (this.gameState.debuffs && this.gameState.debuffs.includes('reverseControls')) {
      this.gameState.targetZone = (this.gameState.targetZone - 1 + ZONE_COUNT) % ZONE_COUNT;
      eventBus.emit(GameEvents.ZONES_SHUFFLED, this.gameState.targetZone);
      eventBus.emit(GameEvents.TEMP_MESSAGE, 'üôÉ Reverse Controls: Zone moves backward');
    } else {
      // –û–±—ã—á–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
      let newTarget;
      let attempts = 0;
      const maxAttempts = ZONE_COUNT * 2;
      
      do {
        newTarget = Math.floor(Math.random() * ZONE_COUNT);
        attempts++;
      } while (newTarget === this.gameState.targetZone && 
               ZONE_COUNT > 1 && 
               attempts < maxAttempts);
      
      this.gameState.targetZone = newTarget;
      eventBus.emit(GameEvents.ZONES_SHUFFLED, this.gameState.targetZone);
    }
    
    // –ù–û–í–´–ô: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã –∑–æ–Ω –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–∏ (20% —à–∞–Ω—Å)
    if (Math.random() < 0.2) {
      this.refreshZoneTypes();
    }
  }
}

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–Ω—Å–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  handleEffectChance() {
    if (Math.random() * 100 < GAME_CONSTANTS.BASE_EFFECT_CHANCE) {
      const variation = (Math.random() - 0.5) * 
                       (GAME_CONSTANTS.EFFECT_CHANCE_RANGE.max - GAME_CONSTANTS.EFFECT_CHANCE_RANGE.min);
      
      // Lucky Charm skill - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –±–∞—Ñ—Ñ–æ–≤
      const buffChanceBonus = this.getSkillBonus('chance', 'buff') * 100;
      
      // Lucky Zone buff - –±–æ–Ω—É—Å –∫ —à–∞–Ω—Å—É –±–∞—Ñ—Ñ–æ–≤
      const luckyBonus = this.gameState.buffs.includes('lucky') ? 
                        GAME_CONSTANTS.LUCKY_BUFF_BONUS : 0;
      
      // Inner Peace skill - —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è —Ö–∞–æ—Å–∞
      const chaosReduction = this.getSkillBonus('reduction', 'chaos');
      const effectiveChaos = Math.max(0, this.gameState.resources.chaos * (1 - chaosReduction));
      
      // Curse debuff - —Å–Ω–∏–∂–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –±–∞—Ñ—Ñ–æ–≤
      const curseReduction = this.gameState.debuffs.includes('curse') ? 50 : 0;
      
      let buffChance = GAME_CONSTANTS.BASE_EFFECT_CHANCE + 
                      (this.gameState.resources.faith - effectiveChaos) + 
                      variation + 
                      buffChanceBonus + 
                      luckyBonus - 
                      curseReduction;
      
      buffChance = Math.max(0, Math.min(100, buffChance));

      if (Math.random() * 100 < buffChance) {
        this.triggerRandomBuff();
      } else {
        this.triggerRandomDebuff();
      }
    }
  }

  // –í—ã–∑–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –±–∞—Ñ—Ñ
  triggerRandomBuff() {
    if (this.buffManager && typeof this.buffManager.applyRandomBuff === 'function') {
      this.buffManager.applyRandomBuff();
    }
  }

  // –í—ã–∑–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ–±–∞—Ñ—Ñ
  triggerRandomDebuff() {
    if (this.buffManager && typeof this.buffManager.applyRandomDebuff === 'function') {
      this.buffManager.applyRandomDebuff();
    }
  }

  // ===== –£–¢–ò–õ–ò–¢–´ =====

  // –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
  getSkillBonus(type, target = null) {
    if (this.gameState.skillManager && 
        typeof this.gameState.skillManager.getSkillBonus === 'function') {
      return this.gameState.skillManager.getSkillBonus(type, target);
    }
    return 0;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ–º–∞—Ö–∞
  canUseMissProtection() {
    return this.gameState.skillManager && 
           typeof this.gameState.skillManager.canUseMissProtection === 'function' &&
           this.gameState.skillManager.canUseMissProtection();
  }

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –ø—Ä–æ–º–∞—Ö–∞
  useMissProtection() {
    if (this.gameState.skillManager && 
        typeof this.gameState.skillManager.useMissProtection === 'function') {
      return this.gameState.skillManager.useMissProtection();
    }
    return false;
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ
  addResource(resourceName, amount) {
    if (this.gameState.addResource) {
      return this.gameState.addResource(resourceName, amount);
    } else {
      // Fallback
      const currentAmount = this.gameState.resources[resourceName] || 0;
      const newAmount = Math.min(
        currentAmount + amount,
        GAME_CONSTANTS.MAX_SAFE_RESOURCE_VALUE
      );
      this.gameState.resources[resourceName] = newAmount;
      return true;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –±–∞—Ñ—Ñ
  removeBuff(buffId) {
    if (this.gameState.buffs) {
      this.gameState.buffs = this.gameState.buffs.filter(id => id !== buffId);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∫–æ–º–±–æ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  forceResetCombo() {
    console.log('üîÑ Force resetting combo...');
    this.gameState.combo.count = 0;
    this.gameState.combo.deadline = 0;
    this.gameState.combo.lastZone = null;
    this.gameState.combo.lastAngle = null;
    
    eventBus.emit(GameEvents.COMBO_CHANGED, {
      count: 0,
      effective: 0,
      zone: null,
      target: this.gameState.targetZone,
      deadline: 0,
      reason: 'force_reset'
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–æ–º–±–æ
  getComboTimeLeft() {
    if (!this.gameState.combo || this.gameState.combo.count === 0) {
      return 0;
    }
    
    const now = Date.now();
    const deadline = this.gameState.combo.deadline || 0;
    return Math.max(0, deadline - now);
  }

  // –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –∑–æ–Ω—ã (–¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤)
  shuffleZones() {
    if (!this.isActive()) return;
    
    for (let i = this.zones.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [this.zones[i], this.zones[j]] = [this.zones[j], this.zones[i]];
      this.zones[i].index = i;
      this.zones[j].index = j;
    }
    
    console.log('üéØ Zones shuffled');
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–∞—Ö
  getZoneInfo() {
    return {
      totalZones: this.zones.length,
      targetZone: this.gameState.targetZone,
      previousTargetZone: this.gameState.previousTargetZone,
      zones: this.zones.map(zone => ({
        index: zone.index,
        isTarget: zone.index === this.gameState.targetZone,
        angle: {
          start: zone.getStartAngle(),
          end: zone.getEndAngle(),
          center: zone.getCenterAngle()
        }
      }))
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–∫–æ–≤
  getClickStats() {
    return {
      currentCombo: this.gameState.combo.count,
      comboDeadline: this.gameState.combo.deadline,
      comboTimeLeft: this.getComboTimeLeft(),
      lastClickedZone: this.gameState.combo.lastZone,
      blockedUntil: this.gameState.blockedUntil,
      activeEffects: {
        buffs: this.gameState.buffs.length,
        debuffs: this.gameState.debuffs.length
      }
    };
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  setTargetZone(zoneIndex) {
    if (zoneIndex >= 0 && zoneIndex < ZONE_COUNT) {
      this.gameState.previousTargetZone = this.gameState.targetZone;
      this.gameState.targetZone = zoneIndex;
      eventBus.emit(GameEvents.ZONES_SHUFFLED, this.gameState.targetZone);
      return true;
    }
    return false;
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ FeatureManager cleanup started');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–æ
    if (this.comboCheckInterval) {
      this.cleanupManager.clearInterval(this.comboCheckInterval);
      this.comboCheckInterval = null;
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    super.destroy();
    
    console.log('‚úÖ FeatureManager destroyed');
  }
}