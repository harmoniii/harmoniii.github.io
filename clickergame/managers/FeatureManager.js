// managers/FeatureManager.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∑–æ–Ω
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { Zone } from '../utils/Zone.js';
import { ZONE_COUNT } from '../config/ResourceConfig.js';
import { GAME_CONSTANTS, UI_CONFIG } from '../config/GameConstants.js';
import { RESOURCE_GROUPS, getResourcesInGroup } from '../config/ResourceConfig.js';
import { ZONE_TYPES, ZoneTypeManager } from '../config/ZoneTypes.js';

export class FeatureManager extends CleanupMixin {
  constructor(gameState, buffManager = null) {
    super();
    
    this.gameState = gameState;
    this.buffManager = buffManager;
    this.zones = [];
    this.zoneTypes = []; // –ú–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –∑–æ–Ω
    
    this.comboCheckInterval = null;
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± —ç–Ω–µ—Ä–≥–∏–∏
    this.lastEnergyNotification = 0;
    this.energyNotificationCooldown = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ–± —ç–Ω–µ—Ä–≥–∏–∏
    
    this.initializeZones();
    this.bindEvents();
    this.startComboTimer();
    
    console.log('üéØ FeatureManager initialized with fixed zone system');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
  initializeZones() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    if (typeof this.gameState.targetZone !== 'number' || 
        this.gameState.targetZone < 0 || 
        this.gameState.targetZone >= ZONE_COUNT) {
      this.gameState.targetZone = 0; // –ü–µ—Ä–≤–∞—è –∑–æ–Ω–∞ –≤—Å–µ–≥–¥–∞ —Ü–µ–ª–µ–≤–∞—è
    }
    
    if (typeof this.gameState.previousTargetZone !== 'number') {
      this.gameState.previousTargetZone = this.gameState.targetZone;
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∑–æ–Ω
    this.generateZoneTypes();
    
    // –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã —Å —Ç–∏–ø–∞–º–∏
    this.zones = Array.from({ length: ZONE_COUNT }, (_, i) => {
      const zoneType = this.zoneTypes[i] || ZONE_TYPES.INACTIVE;
      return new Zone({ type: zoneType.id, zoneType: zoneType }, i, ZONE_COUNT);
    });
    
    console.log(`üéØ Created ${ZONE_COUNT} zones with fixed system - Target: ${this.gameState.targetZone}`);
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∑–æ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
  generateZoneTypes() {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const energyPercentage = this.calculateEnergyZonePercentage();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–æ–Ω—ã (–≤—Å–µ —Å–µ—Ä—ã–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ)
    this.zoneTypes = ZoneTypeManager.generateAdaptiveZoneTypes(ZONE_COUNT, energyPercentage);
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É –∫–∞–∫ –∫—Ä–∞—Å–Ω—É—é
    ZoneTypeManager.setTargetZone(this.zoneTypes, this.gameState.targetZone);
    
    console.log(`üéØ Generated zones: Target(${this.gameState.targetZone}) = RED, Others = varied`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–æ–Ω
    const stats = ZoneTypeManager.getZoneStatistics(this.zoneTypes);
    console.log(`Zone stats:`, stats);
  }

  calculateEnergyZonePercentage() {
    let energyPercentage = 0.25; // 25% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –µ—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏–∏ –º–∞–ª–æ
    if (this.gameState.energyManager) {
      const energyPerc = this.gameState.energyManager.getEnergyPercentage();
      
      if (energyPerc < 10) {
        energyPercentage = 0.6; // 60% –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
      } else if (energyPerc < 30) {
        energyPercentage = 0.45; // 45% –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
      } else if (energyPerc < 50) {
        energyPercentage = 0.35; // 35% –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π —ç–Ω–µ—Ä–≥–∏–∏
      }
    }
    
    return energyPercentage;
  }

  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–æ
  startComboTimer() {
    if (this.comboCheckInterval) {
      this.cleanupManager.clearInterval(this.comboCheckInterval);
    }
    
    this.comboCheckInterval = this.createInterval(() => {
      this.checkComboTimeout();
    }, 1000, 'combo-timeout-check');
    
    console.log('‚è∞ Combo timeout checker started');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∫–æ–º–±–æ
  checkComboTimeout() {
    if (!this.gameState.combo || this.gameState.combo.count === 0) {
      return;
    }
    
    const now = Date.now();
    const deadline = this.gameState.combo.deadline || 0;
    
    if (now > deadline && this.gameState.combo.count > 0) {
      console.log(`‚è∞ Combo timeout detected! Count was ${this.gameState.combo.count}, resetting to 0`);
      
      const oldCombo = this.gameState.combo.count;
      
      this.gameState.combo.count = 0;
      this.gameState.combo.deadline = 0;
      this.gameState.combo.lastZone = null;
      this.gameState.combo.lastAngle = null;
      
      eventBus.emit(GameEvents.COMBO_CHANGED, {
        count: 0,
        effective: 0,
        zone: null,
        target: this.gameState.targetZone,
        deadline: 0,
        reason: 'timeout',
        previousCount: oldCombo
      });
      
      eventBus.emit(GameEvents.NOTIFICATION, `‚è∞ Combo expired! (was ${oldCombo})`);
    }
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    eventBus.subscribe(GameEvents.CLICK, (data) => {
      this.handleClick(data.data || data);
    });
    
    console.log('üéØ Event handlers bound');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∑–æ–Ω
  handleClick(angle) {
    if (!this.isActive()) return;
    
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (Zone Lock debuff)
    if (now < (this.gameState.blockedUntil || 0)) {
      eventBus.emit(GameEvents.NOTIFICATION, 'üîí Zone is locked!');
      return;
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª –∏ –Ω–∞—Ö–æ–¥–∏–º –∑–æ–Ω—É
    const normalizedAngle = this.normalizeAngle(angle);
    const clickedZone = this.findZoneByAngle(normalizedAngle);
    
    if (!clickedZone) {
      console.warn('No zone found for angle:', normalizedAngle);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–æ–Ω—ã
    const zoneType = this.getZoneType(clickedZone.index);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–æ–Ω
    if (clickedZone.index === this.gameState.targetZone) {
      // –ü–û–ü–ê–î–ê–ù–ò–ï –í –ö–†–ê–°–ù–£–Æ (–¶–ï–õ–ï–í–£–Æ) –ó–û–ù–£
      this.handleTargetZoneHit(clickedZone, zoneType, normalizedAngle, now);
    } else {
      // –ü–û–ü–ê–î–ê–ù–ò–ï –í –î–†–£–ì–ò–ï –ó–û–ù–´
      this.handleNonTargetZoneHit(clickedZone, zoneType, normalizedAngle, now);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ü–µ–ª–µ–≤—É—é (–∫—Ä–∞—Å–Ω—É—é) –∑–æ–Ω—É
handleTargetZoneHit(clickedZone, zoneType, normalizedAngle, now) {
  console.log(`üéØ HIT TARGET ZONE ${clickedZone.index}! Current target: ${this.gameState.targetZone}`);
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ø–∞–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∑–æ–Ω—É
  if (clickedZone.index !== this.gameState.targetZone) {
    console.warn(`‚ö†Ô∏è Zone mismatch! Clicked: ${clickedZone.index}, Target: ${this.gameState.targetZone}`);
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    this.gameState.targetZone = clickedZone.index;
    this.updateZoneTypesAfterShuffle(clickedZone.index);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã
  if (zoneType.effects.energyCost > 0) {
    if (!this.checkEnergyForClick(zoneType.effects.energyCost)) {
      return;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–±–∞—Ñ—Ñ—ã
  if (this.isGhostClickActive() && Math.random() < GAME_CONSTANTS.GHOST_CLICK_CHANCE) {
    eventBus.emit(GameEvents.GHOST_CLICK);
    return;
  }

  if (this.isHeavyClickActive()) {
    if (!this.handleHeavyClick(clickedZone)) {
      return;
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–±–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã)
  const effectiveCombo = this.handleCombo(clickedZone, normalizedAngle, now);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞
  this.handleGoldGain(clickedZone, effectiveCombo, zoneType);
  
  // –¢—Ä–∞—Ç–∏–º —ç–Ω–µ—Ä–≥–∏—é
  if (zoneType.effects.energyCost > 0) {
    this.handleEnergyConsumption(zoneType.effects.energyCost);
  }
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  this.handleZoneShuffle(clickedZone);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –±–∞—Ñ—Ñ–æ–≤/–¥–µ–±–∞—Ñ—Ñ–æ–≤
  this.handleEffectChance();
  
  // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è
  eventBus.emit(GameEvents.ZONE_HIT, {
    zone: clickedZone.index,
    zoneType: zoneType.id,
    combo: effectiveCombo,
    angle: normalizedAngle,
    isTarget: true
  });
}

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –ù–ï —Ü–µ–ª–µ–≤—ã–µ –∑–æ–Ω—ã
  handleNonTargetZoneHit(clickedZone, zoneType, normalizedAngle, now) {
    console.log(`‚ùå HIT NON-TARGET ZONE ${clickedZone.index} (type: ${zoneType.id})`);
    
    // –°–µ—Ä—ã–µ –∑–æ–Ω—ã - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—é—Ç
    if (zoneType.id === 'inactive') {
      eventBus.emit(GameEvents.NOTIFICATION, '‚ö´ Inactive zone - no effect');
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ –≤ —Å–µ—Ä—É—é –∑–æ–Ω—É
      this.resetCombo('missed target');
      return;
    }
    
    // –ó–µ–ª–µ–Ω—ã–µ –∑–æ–Ω—ã - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —ç–Ω–µ—Ä–≥–∏—é
    if (zoneType.id === 'energy') {
      this.handleEnergyRestore(zoneType.effects.energyRestore, zoneType.id);
      eventBus.emit(GameEvents.NOTIFICATION, `‚ö° Energy zone: +${zoneType.effects.energyRestore} Energy`);
      
      // –ó–µ–ª–µ–Ω—ã–µ –∑–æ–Ω—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç –∫–æ–º–±–æ, –Ω–æ –∏ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –µ–≥–æ
      eventBus.emit(GameEvents.ENERGY_ZONE_HIT, {
        amount: zoneType.effects.energyRestore,
        zoneType: zoneType.id
      });
      return;
    }
    
    // –ó–æ–ª–æ—Ç—ã–µ –∑–æ–Ω—ã - –¥–∞—é—Ç —Ä–µ—Å—É—Ä—Å—ã –∏ —ç–Ω–µ—Ä–≥–∏—é
    if (zoneType.id === 'bonus') {
      this.handleEnergyRestore(zoneType.effects.energyRestore, zoneType.id);
      this.handleBonusResources(zoneType.effects.resourceAmount || 2);
      eventBus.emit(GameEvents.NOTIFICATION, `üí∞ Bonus zone: resources + energy!`);
      
      // –ë–æ–Ω—É—Å–Ω—ã–µ –∑–æ–Ω—ã —Ç–æ–∂–µ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç –∫–æ–º–±–æ
      return;
    }
    
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–æ–Ω - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ
    this.resetCombo('hit non-target zone');
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–º–∞—Ö–∞
    eventBus.emit(GameEvents.ZONE_MISS, {
      zone: clickedZone.index,
      zoneType: zoneType.id,
      target: this.gameState.targetZone,
      angle: normalizedAngle
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–±—Ä–æ—Å –∫–æ–º–±–æ
  resetCombo(reason = 'unknown') {
    if (this.gameState.combo && this.gameState.combo.count > 0) {
      console.log(`üí• Combo reset: ${reason} (was ${this.gameState.combo.count})`);
      
      const oldCombo = this.gameState.combo.count;
      this.gameState.combo.count = 0;
      this.gameState.combo.deadline = 0;
      this.gameState.combo.lastZone = null;
      this.gameState.combo.lastAngle = null;
      
      eventBus.emit(GameEvents.COMBO_CHANGED, {
        count: 0,
        effective: 0,
        zone: null,
        target: this.gameState.targetZone,
        deadline: 0,
        reason: reason,
        previousCount: oldCombo
      });
    }
  }

  checkEnergyForClick(energyCost) {
    if (!this.gameState.energyManager) return true;
    
    if (!this.gameState.energyManager.canClick()) {
      const energyInfo = this.gameState.energyManager.getEnergyInfo();
      eventBus.emit(GameEvents.NOTIFICATION, 
        `‚ö° Not enough energy! Need ${energyInfo.clickCost}, have ${energyInfo.current}`);
      return false;
    }
    
    return true;
  }

  getZoneType(zoneIndex) {
    return this.zoneTypes[zoneIndex] || ZONE_TYPES.INACTIVE;
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–≥–ª–∞
  normalizeAngle(angle) {
    if (typeof angle !== 'number' || isNaN(angle)) {
      return 0;
    }
    return ((angle % (2 * Math.PI)) + (2 * Math.PI)) % (2 * Math.PI);
  }

  // –ü–æ–∏—Å–∫ –∑–æ–Ω—ã –ø–æ —É–≥–ª—É
  findZoneByAngle(angle) {
    return this.zones.find(zone => zone.contains(angle));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Ghost Click
  isGhostClickActive() {
    return this.gameState.debuffs && 
           this.gameState.debuffs.includes('ghost');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Heavy Click
  isHeavyClickActive() {
    return this.gameState.debuffs && 
           this.gameState.debuffs.includes('heavyClick');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Heavy Click debuff
  handleHeavyClick(zone) {
    const required = GAME_CONSTANTS.HEAVY_CLICK_REQUIRED;
    const zoneKey = `zone_${zone.index}`;
    
    if (!this.gameState.effectStates.heavyClickRequired) {
      this.gameState.effectStates.heavyClickRequired = {};
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–æ–Ω
    Object.keys(this.gameState.effectStates.heavyClickRequired).forEach(key => {
      if (key !== zoneKey) {
        this.gameState.effectStates.heavyClickRequired[key] = 0;
      }
    });
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–æ–Ω—ã
    const currentCount = this.gameState.effectStates.heavyClickRequired[zoneKey] || 0;
    this.gameState.effectStates.heavyClickRequired[zoneKey] = currentCount + 1;
    
    if (this.gameState.effectStates.heavyClickRequired[zoneKey] < required) {
      eventBus.emit(GameEvents.HEAVY_CLICK_PROGRESS, {
        current: this.gameState.effectStates.heavyClickRequired[zoneKey],
        required: required,
        zone: zone.index
      });
      return false;
    } else {
      this.gameState.effectStates.heavyClickRequired[zoneKey] = 0;
      return true;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã
  handleCombo(zone, normalizedAngle, now) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≥–æ–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    this.gameState.combo.lastAngle = normalizedAngle;
    
    // Time Stretch skill - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–º–±–æ
    const extraTime = this.getSkillBonus('duration', 'combo_timeout');
    const comboTimeout = GAME_CONSTANTS.COMBO_TIMEOUT + extraTime;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–æ—Ä–æ–∑–∫—É –∫–æ–º–±–æ (Freeze debuff)
    const isComboFrozen = this.gameState.debuffs && 
                         this.gameState.debuffs.includes('freeze');
    
    const safeNow = Math.max(now, 0);
    const currentDeadline = this.gameState.combo.deadline || 0;
    
    if (!isComboFrozen) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –∫–æ–º–±–æ
      const comboExpired = this.gameState.combo.count > 0 && safeNow > currentDeadline;
      
      if (comboExpired) {
        console.log(`‚è∞ Combo expired on hit (was ${this.gameState.combo.count}), starting new combo`);
        this.gameState.combo.count = 1;
      } else {
        this.gameState.combo.count++;
      }
      
      console.log(`‚úÖ TARGET HIT! Combo: ${this.gameState.combo.count}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º deadline
      this.gameState.combo.deadline = safeNow + comboTimeout;
      
    } else {
      console.log(`‚ùÑÔ∏è Combo frozen at ${this.gameState.combo.count}`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–æ–Ω—É
    this.gameState.combo.lastZone = zone.index;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–º–±–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    this.gameState.combo.count = Math.min(
      Math.max(0, this.gameState.combo.count),
      GAME_CONSTANTS.MAX_COMBO_COUNT
    );
    
    // Combo Master skill - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–±–æ
    const comboMultiplier = 1 + this.getSkillBonus('multiplier', 'combo');
    const effectiveCombo = Math.floor(this.gameState.combo.count * comboMultiplier);
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–±–æ
    eventBus.emit(GameEvents.COMBO_CHANGED, {
      count: this.gameState.combo.count,
      effective: effectiveCombo,
      zone: zone.index,
      target: this.gameState.targetZone,
      deadline: this.gameState.combo.deadline,
      timeLeft: Math.max(0, this.gameState.combo.deadline - safeNow),
      reason: 'target_hit'
    });
    
    console.log(`üìä Combo state: ${this.gameState.combo.count} (effective: ${effectiveCombo})`);
    
    return effectiveCombo;
  }

forceZoneSync() {
  console.log('üîÑ Force syncing zones...');
  
  const currentTarget = this.gameState.targetZone || 0;
  this.updateZoneTypesAfterShuffle(currentTarget);
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (this.gameState.gameLoop) {
    this.gameState.gameLoop.forceRedraw();
  }
  
  eventBus.emit(GameEvents.ZONES_SHUFFLED, currentTarget);
}

getZonesDebugInfo() {
  return {
    targetZone: this.gameState.targetZone,
    previousTargetZone: this.gameState.previousTargetZone,
    zoneTypes: this.zoneTypes ? this.zoneTypes.map((zt, i) => ({
      index: i,
      id: zt.id,
      isTarget: i === this.gameState.targetZone
    })) : 'not initialized',
    totalZones: ZONE_COUNT
  };
}

  handleGoldGain(zone, effectiveCombo, zoneType) {
    let clickMultiplier = 1;
    
    // Double Tap buff
    if (this.gameState.buffs.includes('doubleTap')) {
      clickMultiplier = GAME_CONSTANTS.DOUBLE_TAP_MULTIPLIER;
    }
    
    let goldGain = effectiveCombo * clickMultiplier;
    
    // Golden Touch skill
    const goldMultiplier = 1 + this.getSkillBonus('multiplier', 'gold');
    goldGain = Math.floor(goldGain * goldMultiplier);
    
    // Frenzy buff
    if (this.gameState.buffs.includes('frenzy')) {
      goldGain *= GAME_CONSTANTS.FRENZY_MULTIPLIER;
    }
    
    // Golden Touch buff (—ç–ø–∏—á–µ—Å–∫–∏–π)
    if (this.gameState.buffs.includes('goldenTouch')) {
      goldGain *= 3;
    }
    
    // Critical Strike skill
    const critChance = this.getSkillBonus('chance', 'critical');
    if (Math.random() < critChance) {
      goldGain *= 2;
      eventBus.emit(GameEvents.CRITICAL_HIT, { damage: goldGain });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ
    this.addResource('gold', goldGain);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.handleStarPower();
    this.handleSlotMachine();
    this.handleResourceFinder(effectiveCombo);
    
    eventBus.emit(GameEvents.RESOURCE_CHANGED, { 
      resource: 'gold', 
      amount: this.gameState.resources.gold 
    });
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    eventBus.emit(GameEvents.RESOURCE_GAINED, {
      resource: 'gold',
      amount: goldGain
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  handleEnergyRestore(amount, zoneType) {
    if (this.gameState.energyManager) {
      const now = Date.now();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
      if (zoneType === 'energy') {
        this.gameState.energyManager.restoreEnergy(amount, 'energy_zone');
      } else if (zoneType === 'bonus') {
        this.gameState.energyManager.restoreEnergy(amount, 'bonus_zone');
      }
      
      // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      eventBus.emit(GameEvents.ENERGY_ZONE_HIT, {
        amount: amount,
        zoneType: zoneType
      });
    }
  }

  handleBonusResources(amount) {
    const resourcePool = getResourcesInGroup('TRADEABLE');
    const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
    
    this.addResource(randomResource, amount);
    eventBus.emit(GameEvents.RESOURCE_GAINED, {
      resource: randomResource,
      amount: amount
    });
  }

  handleEnergyConsumption(cost) {
    if (this.gameState.energyManager) {
      this.gameState.energyManager.consumeEnergy(cost);
    }
  }

  // Star Power buff
  handleStarPower() {
    if (this.gameState.buffs.includes('starPower') && 
        this.gameState.effectStates.starPowerClicks > 0) {
      
      const resourcePool = getResourcesInGroup('TRADEABLE');
      const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
      const bonusAmount = GAME_CONSTANTS.STAR_POWER_BONUS;
      
      this.addResource(randomResource, bonusAmount);
      this.gameState.effectStates.starPowerClicks--;
      
      eventBus.emit(GameEvents.STAR_POWER_USED, {
        resource: randomResource,
        amount: bonusAmount,
        remaining: this.gameState.effectStates.starPowerClicks
      });
      
      if (this.gameState.effectStates.starPowerClicks <= 0) {
        this.removeBuff('starPower');
      }
    }
  }

  // Slot Machine buff
  handleSlotMachine() {
    if (this.gameState.buffs.includes('slotMachine') && 
        Math.random() < GAME_CONSTANTS.SLOT_MACHINE_CHANCE) {
      
      const resourcePool = getResourcesInGroup('TRADEABLE');
      const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
      const bonusAmount = GAME_CONSTANTS.SLOT_MACHINE_AMOUNT;
      
      this.addResource(randomResource, bonusAmount);
      
      eventBus.emit(GameEvents.SLOT_MACHINE_WIN, {
        resource: randomResource,
        amount: bonusAmount
      });
    }
  }

  // Resource Finder skill
  handleResourceFinder(effectiveCombo) {
    const bonusChance = this.getSkillBonus('chance', 'bonus_resource');
    
    if (Math.random() < bonusChance) {
      const resourcePool = getResourcesInGroup('TRADEABLE');
      const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
      const bonusAmount = Math.max(1, Math.floor(effectiveCombo * 0.5));
      
      this.addResource(randomResource, bonusAmount);
      
      eventBus.emit(GameEvents.BONUS_RESOURCE_FOUND, {
        resource: randomResource,
        amount: bonusAmount
      });
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
handleZoneShuffle(zone) {
  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –≤ –Ω–µ—ë
  if (zone.index === this.gameState.targetZone && 
      Math.random() * 100 < GAME_CONSTANTS.ZONE_SHUFFLE_CHANCE) {
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â—É—é
    this.gameState.previousTargetZone = this.gameState.targetZone;
    
    // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    let newTarget;
    let attempts = 0;
    const maxAttempts = ZONE_COUNT * 2;
    
    do {
      newTarget = Math.floor(Math.random() * ZONE_COUNT);
      attempts++;
    } while (newTarget === this.gameState.targetZone && 
             ZONE_COUNT > 1 && 
             attempts < maxAttempts);
    
    // Reverse Controls debuff
    if (this.gameState.debuffs && this.gameState.debuffs.includes('reverseControls')) {
      newTarget = (this.gameState.targetZone - 1 + ZONE_COUNT) % ZONE_COUNT;
      eventBus.emit(GameEvents.TEMP_MESSAGE, 'üôÉ Reverse Controls: Zone moves backward');
    }
    
    console.log(`üéØ Zone shuffle: ${this.gameState.targetZone} -> ${newTarget}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    this.gameState.targetZone = newTarget;
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã –∑–æ–Ω
    this.updateZoneTypesAfterShuffle(newTarget);
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –Ω–æ–≤–æ–π —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω–æ–π
    eventBus.emit(GameEvents.ZONES_SHUFFLED, newTarget);
    
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    if (this.gameState.gameLoop) {
      this.gameState.gameLoop.forceRedraw();
    }
  }
}

updateZoneTypesAfterShuffle(newTargetZone) {
  console.log(`üîÑ Updating zone types for new target: ${newTargetZone}`);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∑–æ–Ω –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (!this.zoneTypes || this.zoneTypes.length !== ZONE_COUNT) {
    this.zoneTypes = new Array(ZONE_COUNT);
  }
  
  // –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –≤—Å–µ –∑–æ–Ω—ã —Å–µ—Ä—ã–º–∏ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏)
  for (let i = 0; i < ZONE_COUNT; i++) {
    this.zoneTypes[i] = {
      id: 'inactive',
      name: 'Inactive Zone',
      color: '#E5E5E5',
      effects: { givesGold: false, givesCombo: false, energyCost: 0 }
    };
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É –∫–∞–∫ –∫—Ä–∞—Å–Ω—É—é
  this.zoneTypes[newTargetZone] = {
    id: 'gold',
    name: 'Target Zone',
    color: '#C41E3A',
    effects: { givesGold: true, givesCombo: true, energyCost: 1 }
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
  this.addRandomSpecialZones(newTargetZone);
  
  console.log(`‚úÖ Zone types updated. Target: ${newTargetZone}, Types:`, 
    this.zoneTypes.map((zt, i) => `${i}:${zt.id}`).join(', '));
}

addRandomSpecialZones(excludeIndex) {
  const availableIndices = [];
  for (let i = 0; i < ZONE_COUNT; i++) {
    if (i !== excludeIndex) {
      availableIndices.push(i);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º 1-2 —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã
  const energyZoneCount = Math.random() < 0.6 ? 1 : 2;
  for (let i = 0; i < energyZoneCount && availableIndices.length > 0; i++) {
    const randomIndex = Math.floor(Math.random() * availableIndices.length);
    const zoneIndex = availableIndices.splice(randomIndex, 1)[0];
    
    this.zoneTypes[zoneIndex] = {
      id: 'energy',
      name: 'Energy Zone',
      color: '#228B22',
      effects: { 
        givesGold: false, 
        givesCombo: false, 
        energyRestore: 2, 
        energyCost: 0 
      }
    };
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º 0-1 –±–æ–Ω—É—Å–Ω—É—é –∑–æ–Ω—É
  if (Math.random() < 0.3 && availableIndices.length > 0) {
    const randomIndex = Math.floor(Math.random() * availableIndices.length);
    const zoneIndex = availableIndices[randomIndex];
    
    this.zoneTypes[zoneIndex] = {
      id: 'bonus',
      name: 'Bonus Zone',
      color: '#FFB347',
      effects: { 
        givesGold: false, 
        givesCombo: false, 
        energyRestore: 1, 
        energyCost: 0,
        resourceBonus: true,
        resourceAmount: 2
      }
    };
  }
}

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–Ω—Å–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  handleEffectChance() {
    if (Math.random() * 100 < GAME_CONSTANTS.BASE_EFFECT_CHANCE) {
      const variation = (Math.random() - 0.5) * 
                       (GAME_CONSTANTS.EFFECT_CHANCE_RANGE.max - GAME_CONSTANTS.EFFECT_CHANCE_RANGE.min);
      
      // Lucky Charm skill
      const buffChanceBonus = this.getSkillBonus('chance', 'buff') * 100;
      
      // Lucky Zone buff
      const luckyBonus = this.gameState.buffs.includes('lucky') ? 
                        GAME_CONSTANTS.LUCKY_BUFF_BONUS : 0;
      
      // Inner Peace skill
      const chaosReduction = this.getSkillBonus('reduction', 'chaos');
      const effectiveChaos = Math.max(0, this.gameState.resources.chaos * (1 - chaosReduction));
      
      // Curse debuff
      const curseReduction = this.gameState.debuffs.includes('curse') ? 50 : 0;
      
      let buffChance = GAME_CONSTANTS.BASE_EFFECT_CHANCE + 
                      (this.gameState.resources.faith - effectiveChaos) + 
                      variation + 
                      buffChanceBonus + 
                      luckyBonus - 
                      curseReduction;
      
      buffChance = Math.max(0, Math.min(100, buffChance));

      if (Math.random() * 100 < buffChance) {
        this.triggerRandomBuff();
      } else {
        this.triggerRandomDebuff();
      }
    }
  }

  // –í—ã–∑–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –±–∞—Ñ—Ñ
  triggerRandomBuff() {
    if (this.buffManager && typeof this.buffManager.applyRandomBuff === 'function') {
      this.buffManager.applyRandomBuff();
    }
  }

  // –í—ã–∑–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ–±–∞—Ñ—Ñ
  triggerRandomDebuff() {
    if (this.buffManager && typeof this.buffManager.applyRandomDebuff === 'function') {
      this.buffManager.applyRandomDebuff();
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–∏—Ç—å —Ç–∏–ø—ã –∑–æ–Ω
  refreshZoneTypes() {
    console.log('üîÑ Refreshing zone types...');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    const currentTarget = this.gameState.targetZone;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –∑–æ–Ω
    this.generateZoneTypes();
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –∑–æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å –∫—Ä–∞—Å–Ω–æ–π
    ZoneTypeManager.setTargetZone(this.zoneTypes, currentTarget);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–æ–Ω–∞—Ö
    this.zones.forEach((zone, index) => {
      const newZoneType = this.zoneTypes[index] || ZONE_TYPES.INACTIVE;
      zone.definition.zoneType = newZoneType;
      zone.definition.type = newZoneType.id;
    });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
    if (this.gameState.gameLoop) {
      this.gameState.gameLoop.forceRedraw();
    }
  }

  getZoneStatistics() {
    return ZoneTypeManager.getZoneStatistics(this.zoneTypes);
  }

  // ===== –£–¢–ò–õ–ò–¢–´ =====

  // –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
  getSkillBonus(type, target = null) {
    if (this.gameState.skillManager && 
        typeof this.gameState.skillManager.getSkillBonus === 'function') {
      return this.gameState.skillManager.getSkillBonus(type, target);
    }
    return 0;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ–º–∞—Ö–∞
  canUseMissProtection() {
    return this.gameState.skillManager && 
           typeof this.gameState.skillManager.canUseMissProtection === 'function' &&
           this.gameState.skillManager.canUseMissProtection();
  }

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç—É –æ—Ç –ø—Ä–æ–º–∞—Ö–∞
  useMissProtection() {
    if (this.gameState.skillManager && 
        typeof this.gameState.skillManager.useMissProtection === 'function') {
      return this.gameState.skillManager.useMissProtection();
    }
    return false;
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ
  addResource(resourceName, amount) {
    if (this.gameState.addResource) {
      return this.gameState.addResource(resourceName, amount);
    } else {
      const currentAmount = this.gameState.resources[resourceName] || 0;
      const newAmount = Math.min(
        currentAmount + amount,
        GAME_CONSTANTS.MAX_SAFE_RESOURCE_VALUE
      );
      this.gameState.resources[resourceName] = newAmount;
      return true;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –±–∞—Ñ—Ñ
  removeBuff(buffId) {
    if (this.gameState.buffs) {
      this.gameState.buffs = this.gameState.buffs.filter(id => id !== buffId);
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –∫–æ–º–±–æ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  forceResetCombo() {
    console.log('üîÑ Force resetting combo...');
    this.gameState.combo.count = 0;
    this.gameState.combo.deadline = 0;
    this.gameState.combo.lastZone = null;
    this.gameState.combo.lastAngle = null;
    
    eventBus.emit(GameEvents.COMBO_CHANGED, {
      count: 0,
      effective: 0,
      zone: null,
      target: this.gameState.targetZone,
      deadline: 0,
      reason: 'force_reset'
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–æ–º–±–æ
  getComboTimeLeft() {
    if (!this.gameState.combo || this.gameState.combo.count === 0) {
      return 0;
    }
    
    const now = Date.now();
    const deadline = this.gameState.combo.deadline || 0;
    return Math.max(0, deadline - now);
  }

  // –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –∑–æ–Ω—ã (–¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤)
  shuffleZones() {
    if (!this.isActive()) return;
    
    for (let i = this.zones.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [this.zones[i], this.zones[j]] = [this.zones[j], this.zones[i]];
      this.zones[i].index = i;
      this.zones[j].index = j;
    }
    
    console.log('üéØ Zones shuffled');
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–∞—Ö
  getZoneInfo() {
    return {
      totalZones: this.zones.length,
      targetZone: this.gameState.targetZone,
      previousTargetZone: this.gameState.previousTargetZone,
      zones: this.zones.map(zone => ({
        index: zone.index,
        isTarget: zone.index === this.gameState.targetZone,
        zoneType: this.zoneTypes[zone.index]?.id || 'inactive',
        angle: {
          start: zone.getStartAngle(),
          end: zone.getEndAngle(),
          center: zone.getCenterAngle()
        }
      }))
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–∫–æ–≤
  getClickStats() {
    return {
      currentCombo: this.gameState.combo.count,
      comboDeadline: this.gameState.combo.deadline,
      comboTimeLeft: this.getComboTimeLeft(),
      lastClickedZone: this.gameState.combo.lastZone,
      blockedUntil: this.gameState.blockedUntil,
      activeEffects: {
        buffs: this.gameState.buffs.length,
        debuffs: this.gameState.debuffs.length
      }
    };
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  setTargetZone(zoneIndex) {
    if (zoneIndex >= 0 && zoneIndex < ZONE_COUNT) {
      this.gameState.previousTargetZone = this.gameState.targetZone;
      this.gameState.targetZone = zoneIndex;
      
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—Ä–∞—Å–Ω—É—é –∑–æ–Ω—É –Ω–∞ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
      ZoneTypeManager.setTargetZone(this.zoneTypes, zoneIndex);
      
      eventBus.emit(GameEvents.ZONES_SHUFFLED, this.gameState.targetZone);
      return true;
    }
    return false;
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ FeatureManager cleanup started');
    
    if (this.comboCheckInterval) {
      this.cleanupManager.clearInterval(this.comboCheckInterval);
      this.comboCheckInterval = null;
    }
    
    super.destroy();
    
    console.log('‚úÖ FeatureManager destroyed');
  }
}