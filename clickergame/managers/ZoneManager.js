// managers/ZoneManager.js - –ï–î–ò–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä –∑–æ–Ω (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { Zone } from '../utils/Zone.js';
import { ZONE_COUNT } from '../config/ResourceConfig.js';

// –ï–î–ò–ù–´–ï —Ç–∏–ø—ã –∑–æ–Ω
export const ZONE_TYPES = {
  TARGET: {
    id: 'target',
    name: 'Target Zone',
    color: '#C41E3A', // –ö—Ä–∞—Å–Ω—ã–π
    effects: {
      givesGold: true,
      givesCombo: true,
      energyCost: 1
    }
  },
  
  ENERGY: {
    id: 'energy',
    name: 'Energy Zone',
    color: '#228B22', // –ó–µ–ª–µ–Ω—ã–π
    effects: {
      energyRestore: 3,
      energyCost: 0
    }
  },
  
  BONUS: {
    id: 'bonus',
    name: 'Bonus Zone',
    color: '#FFB347', // –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
    effects: {
      energyRestore: 2,
      resourceBonus: true,
      resourceAmount: 2,
      energyCost: 0
    }
  },
  
  INACTIVE: {
    id: 'inactive',
    name: 'Inactive Zone',
    color: '#E5E5E5', // –°–µ—Ä—ã–π
    effects: {
      energyCost: 0
    }
  }
};

export class ZoneManager extends CleanupMixin {
  constructor(gameState) {
    super();
    
    this.gameState = gameState;
    this.zones = [];
    this.zoneTypes = new Array(ZONE_COUNT); // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–æ–Ω
    this.targetZone = 0;
    
    this.initializeZones();
    this.bindEvents();
    
    console.log('üéØ ZoneManager initialized with unified zone system');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω
  initializeZones() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    this.targetZone = this.gameState.targetZone || 0;
    
    // –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã
    this.zones = Array.from({ length: ZONE_COUNT }, (_, i) => {
      return new Zone(ZONE_TYPES.INACTIVE, i, ZONE_COUNT);
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–æ–Ω
    this.generateZoneTypes();
    
    console.log(`üéØ Zones initialized - Target: ${this.targetZone}`);
  }

  // –ï–î–ò–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∑–æ–Ω
  generateZoneTypes() {
    console.log('üéØ Generating zone types...');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–æ–Ω—ã –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
    for (let i = 0; i < ZONE_COUNT; i++) {
      this.zoneTypes[i] = { ...ZONE_TYPES.INACTIVE };
      this.zones[i].definition = this.zoneTypes[i];
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    this.zoneTypes[this.targetZone] = { ...ZONE_TYPES.TARGET };
    this.zones[this.targetZone].definition = this.zoneTypes[this.targetZone];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
    const availableIndices = [];
    for (let i = 0; i < ZONE_COUNT; i++) {
      if (i !== this.targetZone) {
        availableIndices.push(i);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã (25% —à–∞–Ω—Å)
    const energyZoneCount = Math.max(1, Math.floor(availableIndices.length * 0.25));
    for (let i = 0; i < energyZoneCount && availableIndices.length > 0; i++) {
      const randomIndex = Math.floor(Math.random() * availableIndices.length);
      const zoneIndex = availableIndices.splice(randomIndex, 1)[0];
      
      this.zoneTypes[zoneIndex] = { ...ZONE_TYPES.ENERGY };
      this.zones[zoneIndex].definition = this.zoneTypes[zoneIndex];
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –∑–æ–Ω—ã (15% —à–∞–Ω—Å)
    const bonusZoneCount = Math.max(1, Math.floor(availableIndices.length * 0.15));
    for (let i = 0; i < bonusZoneCount && availableIndices.length > 0; i++) {
      const randomIndex = Math.floor(Math.random() * availableIndices.length);
      const zoneIndex = availableIndices.splice(randomIndex, 1)[0];
      
      this.zoneTypes[zoneIndex] = { ...ZONE_TYPES.BONUS };
      this.zones[zoneIndex].definition = this.zoneTypes[zoneIndex];
    }
    
    console.log(`‚úÖ Zone types generated - Target: ${this.targetZone}, Energy: ${energyZoneCount}, Bonus: ${bonusZoneCount}`);
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    eventBus.subscribe(GameEvents.ZONES_SHUFFLED, (newTargetZone) => {
      console.log(`üéØ Zone shuffle event: ${this.targetZone} -> ${newTargetZone}`);
      this.setTargetZone(newTargetZone);
    });
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
  setTargetZone(newTargetZone) {
    if (newTargetZone < 0 || newTargetZone >= ZONE_COUNT) {
      console.warn('Invalid target zone:', newTargetZone);
      return false;
    }
    
    const oldTargetZone = this.targetZone;
    this.targetZone = newTargetZone;
    this.gameState.targetZone = newTargetZone;
    this.gameState.previousTargetZone = oldTargetZone;
    
    // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–æ–Ω
    this.generateZoneTypes();
    
    console.log(`üéØ Target zone changed: ${oldTargetZone} -> ${newTargetZone}`);
    return true;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –∑–æ–Ω—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
  getZoneType(zoneIndex) {
    if (zoneIndex < 0 || zoneIndex >= ZONE_COUNT) {
      return ZONE_TYPES.INACTIVE;
    }
    return this.zoneTypes[zoneIndex] || ZONE_TYPES.INACTIVE;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–æ–Ω—É –ø–æ –∏–Ω–¥–µ–∫—Å—É
  getZone(zoneIndex) {
    if (zoneIndex < 0 || zoneIndex >= ZONE_COUNT) {
      return null;
    }
    return this.zones[zoneIndex];
  }

  // –ù–∞–π—Ç–∏ –∑–æ–Ω—É –ø–æ —É–≥–ª—É
  findZoneByAngle(angle) {
    return this.zones.find(zone => zone.contains(angle)) || null;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–æ–Ω—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  getZonesForRendering() {
    return this.zones.map((zone, index) => ({
      index,
      zone,
      type: this.zoneTypes[index],
      isTarget: index === this.targetZone,
      color: this.zoneTypes[index].color,
      startAngle: zone.getStartAngle(),
      endAngle: zone.getEndAngle(),
      centerAngle: zone.getCenterAngle()
    }));
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–∫ –ø–æ –∑–æ–Ω–µ
  handleZoneClick(clickedZone, angle) {
    if (!clickedZone) {
      console.warn('No zone found for click');
      return null;
    }
    
    const zoneIndex = clickedZone.index;
    const zoneType = this.getZoneType(zoneIndex);
    
    console.log(`üñ±Ô∏è Zone click: ${zoneIndex}, type: ${zoneType.id}`);
    
    const result = {
      zoneIndex,
      zoneType,
      angle,
      isTarget: zoneIndex === this.targetZone,
      effects: { ...zoneType.effects }
    };
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ –∑–æ–Ω–µ
    eventBus.emit(GameEvents.ZONE_HIT, result);
    
    return result;
  }

  // –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –∑–æ–Ω—ã (–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É)
  shuffleZones() {
    let newTarget;
    let attempts = 0;
    const maxAttempts = ZONE_COUNT * 2;
    
    do {
      newTarget = Math.floor(Math.random() * ZONE_COUNT);
      attempts++;
    } while (newTarget === this.targetZone && ZONE_COUNT > 1 && attempts < maxAttempts);
    
    if (attempts >= maxAttempts) {
      newTarget = (this.targetZone + 1) % ZONE_COUNT;
    }
    
    this.setTargetZone(newTarget);
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    eventBus.emit(GameEvents.ZONES_SHUFFLED, newTarget);
    
    return newTarget;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–æ–Ω
  getZoneStatistics() {
    const stats = {
      total: ZONE_COUNT,
      target: this.targetZone,
      types: {
        target: 0,
        energy: 0,
        bonus: 0,
        inactive: 0
      }
    };
    
    this.zoneTypes.forEach(zoneType => {
      if (zoneType && stats.types[zoneType.id] !== undefined) {
        stats.types[zoneType.id]++;
      }
    });
    
    return stats;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  getDebugInfo() {
    return {
      targetZone: this.targetZone,
      zoneCount: ZONE_COUNT,
      zoneTypes: this.zoneTypes.map((type, index) => ({
        index,
        type: type.id,
        color: type.color,
        isTarget: index === this.targetZone
      })),
      statistics: this.getZoneStatistics()
    };
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–æ–Ω
  forceUpdate() {
    console.log('üîÑ Force updating zones...');
    this.generateZoneTypes();
  }

  // –°–±—Ä–æ—Å –∑–æ–Ω –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  reset() {
    console.log('üîÑ Resetting zones...');
    this.targetZone = 0;
    this.gameState.targetZone = 0;
    this.gameState.previousTargetZone = 0;
    this.generateZoneTypes();
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–æ–Ω
  validateZones() {
    let isValid = true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–Ω
    if (this.zones.length !== ZONE_COUNT || this.zoneTypes.length !== ZONE_COUNT) {
      console.error('Zone count mismatch');
      isValid = false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    const targetZoneType = this.getZoneType(this.targetZone);
    if (targetZoneType.id !== 'target') {
      console.error('Target zone has wrong type:', targetZoneType.id);
      isValid = false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∑–æ–Ω–∞
    const targetCount = this.zoneTypes.filter(type => type.id === 'target').length;
    if (targetCount !== 1) {
      console.error('Expected exactly 1 target zone, found:', targetCount);
      isValid = false;
    }
    
    return isValid;
  }

  // –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
  fixCorruptedZones() {
    console.log('üîß Fixing corrupted zones...');
    
    if (!this.validateZones()) {
      this.reset();
      return true;
    }
    
    return false;
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ ZoneManager cleanup started');
    
    super.destroy();
    
    console.log('‚úÖ ZoneManager destroyed');
  }
}