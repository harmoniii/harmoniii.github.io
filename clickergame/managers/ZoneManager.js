// managers/ZoneManager.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∑–æ–Ω
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { Zone } from '../utils/Zone.js';
import { ZONE_COUNT } from '../config/ResourceConfig.js';

// –ï–î–ò–ù–´–ï —Ç–∏–ø—ã –∑–æ–Ω
export const ZONE_TYPES = {
  TARGET: {
    id: 'target',
    name: 'Target Zone',
    color: '#C41E3A', // –ö—Ä–∞—Å–Ω—ã–π
    effects: {
      givesGold: true,
      givesCombo: true,
      energyCost: 1
    }
  },
  
  ENERGY: {
    id: 'energy',
    name: 'Energy Zone',
    color: '#228B22', // –ó–µ–ª–µ–Ω—ã–π
    effects: {
      energyRestore: 3,
      energyCost: 0
    }
  },
  
  BONUS: {
    id: 'bonus',
    name: 'Bonus Zone',
    color: '#FFB347', // –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
    effects: {
      energyRestore: 2,
      resourceBonus: true,
      resourceAmount: 2,
      energyCost: 0
    }
  },
  
  INACTIVE: {
    id: 'inactive',
    name: 'Inactive Zone',
    color: '#E5E5E5', // –°–µ—Ä—ã–π
    effects: {
      energyCost: 0
    }
  }
};

export class ZoneManager extends CleanupMixin {
  constructor(gameState) {
    super();
    
    this.gameState = gameState;
    this.zones = [];
    this.zoneTypes = new Array(ZONE_COUNT); // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–æ–Ω
    this.targetZone = 0;
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.initializeZonesStructure();
    this.initializeZoneTypes();
    this.bindEvents();
    
    console.log('üéØ ZoneManager initialized with unified zone system');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–¥–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–æ–Ω
  initializeZonesStructure() {
    console.log('üéØ Initializing zones structure...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    this.targetZone = this.gameState.targetZone || 0;
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–æ–Ω –ü–ï–†–ï–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ç–∏–ø–æ–≤
    this.zones = Array.from({ length: ZONE_COUNT }, (_, i) => {
      return new Zone(ZONE_TYPES.INACTIVE, i, ZONE_COUNT);
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ç–∏–ø–æ–≤ –∑–æ–Ω —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    for (let i = 0; i < ZONE_COUNT; i++) {
      this.zoneTypes[i] = { ...ZONE_TYPES.INACTIVE };
    }
    
    console.log(`‚úÖ Created ${ZONE_COUNT} zones and initialized zone types array`);
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–¥–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∑–æ–Ω
  initializeZoneTypes() {
    console.log('üéØ Initializing zone types...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    if (!this.zones || this.zones.length !== ZONE_COUNT) {
      console.error('‚ùå Zones structure not properly initialized!');
      this.initializeZonesStructure();
    }
    
    if (!this.zoneTypes || this.zoneTypes.length !== ZONE_COUNT) {
      console.error('‚ùå Zone types array not properly initialized!');
      this.zoneTypes = new Array(ZONE_COUNT);
      for (let i = 0; i < ZONE_COUNT; i++) {
        this.zoneTypes[i] = { ...ZONE_TYPES.INACTIVE };
      }
    }
    
    // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–æ–Ω
    this.generateZoneTypes();
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∑–æ–Ω
  generateZoneTypes() {
    console.log('üéØ Generating zone types...');
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (!this.zones || this.zones.length !== ZONE_COUNT) {
      console.error('‚ùå Zones array not ready for type generation!');
      return false;
    }
    
    if (!this.zoneTypes || this.zoneTypes.length !== ZONE_COUNT) {
      console.error('‚ùå Zone types array not ready for type generation!');
      return false;
    }
    
    try {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–æ–Ω—ã –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
      for (let i = 0; i < ZONE_COUNT; i++) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º
        if (!this.zones[i]) {
          console.error(`‚ùå Zone ${i} is undefined! Recreating...`);
          this.zones[i] = new Zone(ZONE_TYPES.INACTIVE, i, ZONE_COUNT);
        }
        
        this.zoneTypes[i] = { ...ZONE_TYPES.INACTIVE };
        this.zones[i].definition = this.zoneTypes[i];
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
      if (this.targetZone >= 0 && this.targetZone < ZONE_COUNT) {
        this.zoneTypes[this.targetZone] = { ...ZONE_TYPES.TARGET };
        this.zones[this.targetZone].definition = this.zoneTypes[this.targetZone];
      } else {
        console.warn(`‚ö†Ô∏è Invalid target zone ${this.targetZone}, using 0`);
        this.targetZone = 0;
        this.zoneTypes[0] = { ...ZONE_TYPES.TARGET };
        this.zones[0].definition = this.zoneTypes[0];
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
      const availableIndices = [];
      for (let i = 0; i < ZONE_COUNT; i++) {
        if (i !== this.targetZone) {
          availableIndices.push(i);
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã (25% —à–∞–Ω—Å)
      const energyZoneCount = Math.max(1, Math.floor(availableIndices.length * 0.25));
      for (let i = 0; i < energyZoneCount && availableIndices.length > 0; i++) {
        const randomIndex = Math.floor(Math.random() * availableIndices.length);
        const zoneIndex = availableIndices.splice(randomIndex, 1)[0];
        
        this.zoneTypes[zoneIndex] = { ...ZONE_TYPES.ENERGY };
        this.zones[zoneIndex].definition = this.zoneTypes[zoneIndex];
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –∑–æ–Ω—ã (15% —à–∞–Ω—Å)
      const bonusZoneCount = Math.max(1, Math.floor(availableIndices.length * 0.15));
      for (let i = 0; i < bonusZoneCount && availableIndices.length > 0; i++) {
        const randomIndex = Math.floor(Math.random() * availableIndices.length);
        const zoneIndex = availableIndices.splice(randomIndex, 1)[0];
        
        this.zoneTypes[zoneIndex] = { ...ZONE_TYPES.BONUS };
        this.zones[zoneIndex].definition = this.zoneTypes[zoneIndex];
      }
      
      console.log(`‚úÖ Zone types generated - Target: ${this.targetZone}, Energy: ${energyZoneCount}, Bonus: ${bonusZoneCount}`);
      return true;
      
    } catch (error) {
      console.error('‚ùå Error during zone type generation:', error);
      return false;
    }
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    eventBus.subscribe(GameEvents.ZONES_SHUFFLED, (newTargetZone) => {
      console.log(`üéØ Zone shuffle event: ${this.targetZone} -> ${newTargetZone}`);
      this.setTargetZone(newTargetZone);
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã
  setTargetZone(newTargetZone) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    if (typeof newTargetZone !== 'number' || isNaN(newTargetZone)) {
      console.warn('Invalid target zone type:', typeof newTargetZone, newTargetZone);
      return false;
    }
    
    if (newTargetZone < 0 || newTargetZone >= ZONE_COUNT) {
      console.warn('Invalid target zone range:', newTargetZone);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä
    if (!this.zones || this.zones.length !== ZONE_COUNT) {
      console.error('‚ùå Zones not ready for target zone change');
      return false;
    }
    
    const oldTargetZone = this.targetZone;
    this.targetZone = newTargetZone;
    this.gameState.targetZone = newTargetZone;
    this.gameState.previousTargetZone = oldTargetZone;
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–æ–Ω
    const success = this.generateZoneTypes();
    if (!success) {
      console.error('‚ùå Failed to regenerate zone types');
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
      this.targetZone = oldTargetZone;
      this.gameState.targetZone = oldTargetZone;
      return false;
    }
    
    console.log(`üéØ Target zone changed: ${oldTargetZone} -> ${newTargetZone}`);
    return true;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –∑–æ–Ω—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
  getZoneType(zoneIndex) {
    if (zoneIndex < 0 || zoneIndex >= ZONE_COUNT) {
      return ZONE_TYPES.INACTIVE;
    }
    if (!this.zoneTypes || !this.zoneTypes[zoneIndex]) {
      return ZONE_TYPES.INACTIVE;
    }
    return this.zoneTypes[zoneIndex];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∑–æ–Ω—É –ø–æ –∏–Ω–¥–µ–∫—Å—É
  getZone(zoneIndex) {
    if (zoneIndex < 0 || zoneIndex >= ZONE_COUNT) {
      return null;
    }
    if (!this.zones || !this.zones[zoneIndex]) {
      return null;
    }
    return this.zones[zoneIndex];
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–æ–Ω—ã –ø–æ —É–≥–ª—É
  findZoneByAngle(angle) {
    if (!this.zones || this.zones.length === 0) {
      console.warn('‚ö†Ô∏è No zones available for angle search');
      return null;
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —É–≥–æ–ª
    if (typeof angle !== 'number' || isNaN(angle)) {
      console.warn('‚ö†Ô∏è Invalid angle for zone search:', angle);
      return null;
    }
    
    try {
      const foundZone = this.zones.find(zone => zone && zone.contains && zone.contains(angle));
      return foundZone || null;
    } catch (error) {
      console.error('‚ùå Error finding zone by angle:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–æ–Ω—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  getZonesForRendering() {
    if (!this.zones || this.zones.length === 0) {
      console.warn('‚ö†Ô∏è No zones available for rendering');
      return [];
    }
    
    try {
      return this.zones.map((zone, index) => {
        if (!zone) {
          console.warn(`‚ö†Ô∏è Zone ${index} is null, creating fallback`);
          return {
            index,
            zone: null,
            type: ZONE_TYPES.INACTIVE,
            isTarget: false,
            color: ZONE_TYPES.INACTIVE.color,
            startAngle: (index * 2 * Math.PI) / ZONE_COUNT,
            endAngle: ((index + 1) * 2 * Math.PI) / ZONE_COUNT,
            centerAngle: ((index + 0.5) * 2 * Math.PI) / ZONE_COUNT
          };
        }
        
        const zoneType = this.zoneTypes[index] || ZONE_TYPES.INACTIVE;
        
        return {
          index,
          zone,
          type: zoneType,
          isTarget: index === this.targetZone,
          color: zoneType.color,
          startAngle: zone.getStartAngle(),
          endAngle: zone.getEndAngle(),
          centerAngle: zone.getCenterAngle()
        };
      });
    } catch (error) {
      console.error('‚ùå Error getting zones for rendering:', error);
      return [];
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∑–æ–Ω–µ
  handleZoneClick(clickedZone, angle) {
    if (!clickedZone) {
      console.warn('‚ö†Ô∏è No zone provided for click handling');
      return null;
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∑–æ–Ω—ã
    let zoneIndex;
    if (typeof clickedZone === 'object' && clickedZone.index !== undefined) {
      zoneIndex = clickedZone.index;
    } else if (typeof clickedZone === 'number') {
      zoneIndex = clickedZone;
    } else {
      console.warn('‚ö†Ô∏è Invalid clicked zone format:', clickedZone);
      return null;
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
    if (zoneIndex < 0 || zoneIndex >= ZONE_COUNT) {
      console.warn('‚ö†Ô∏è Zone index out of range:', zoneIndex);
      return null;
    }
    
    const zoneType = this.getZoneType(zoneIndex);
    
    console.log(`üñ±Ô∏è Zone click: ${zoneIndex}, type: ${zoneType.id}`);
    
    const result = {
      zoneIndex,
      zoneType,
      angle: angle || 0,
      isTarget: zoneIndex === this.targetZone,
      effects: { ...zoneType.effects }
    };
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ –∑–æ–Ω–µ
    eventBus.emit(GameEvents.ZONE_HIT, result);
    
    return result;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∑–æ–Ω
  shuffleZones() {
    if (!this.zones || this.zones.length === 0) {
      console.warn('‚ö†Ô∏è Cannot shuffle zones - no zones available');
      return this.targetZone;
    }
    
    let newTarget;
    let attempts = 0;
    const maxAttempts = ZONE_COUNT * 2;
    
    do {
      newTarget = Math.floor(Math.random() * ZONE_COUNT);
      attempts++;
    } while (newTarget === this.targetZone && ZONE_COUNT > 1 && attempts < maxAttempts);
    
    if (attempts >= maxAttempts) {
      newTarget = (this.targetZone + 1) % ZONE_COUNT;
    }
    
    const success = this.setTargetZone(newTarget);
    if (!success) {
      console.warn('‚ö†Ô∏è Failed to shuffle zones, keeping current target');
      return this.targetZone;
    }
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
    eventBus.emit(GameEvents.ZONES_SHUFFLED, newTarget);
    
    return newTarget;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–æ–Ω
  getZoneStatistics() {
    const stats = {
      total: ZONE_COUNT,
      target: this.targetZone,
      types: {
        target: 0,
        energy: 0,
        bonus: 0,
        inactive: 0
      },
      zonesReady: this.zones ? this.zones.length : 0,
      typesReady: this.zoneTypes ? this.zoneTypes.length : 0
    };
    
    if (this.zoneTypes && this.zoneTypes.length > 0) {
      this.zoneTypes.forEach(zoneType => {
        if (zoneType && stats.types[zoneType.id] !== undefined) {
          stats.types[zoneType.id]++;
        }
      });
    }
    
    return stats;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  getDebugInfo() {
    return {
      targetZone: this.targetZone,
      zoneCount: ZONE_COUNT,
      zonesInitialized: !!(this.zones && this.zones.length === ZONE_COUNT),
      zoneTypesInitialized: !!(this.zoneTypes && this.zoneTypes.length === ZONE_COUNT),
      zoneTypes: this.zoneTypes ? this.zoneTypes.map((type, index) => ({
        index,
        type: type ? type.id : 'null',
        color: type ? type.color : 'none',
        isTarget: index === this.targetZone
      })) : [],
      statistics: this.getZoneStatistics()
    };
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–æ–Ω
  forceUpdate() {
    console.log('üîÑ Force updating zones...');
    
    try {
      // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!this.zones || this.zones.length !== ZONE_COUNT) {
        console.log('üîÑ Reinitializing zones structure...');
        this.initializeZonesStructure();
      }
      
      if (!this.zoneTypes || this.zoneTypes.length !== ZONE_COUNT) {
        console.log('üîÑ Reinitializing zone types...');
        this.initializeZoneTypes();
      } else {
        // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã
        this.generateZoneTypes();
      }
      
      console.log('‚úÖ Zones force updated successfully');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error during force update:', error);
      return false;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–±—Ä–æ—Å –∑–æ–Ω
  reset() {
    console.log('üîÑ Resetting zones...');
    
    try {
      this.targetZone = 0;
      this.gameState.targetZone = 0;
      this.gameState.previousTargetZone = 0;
      
      // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å –Ω—É–ª—è
      this.initializeZonesStructure();
      this.initializeZoneTypes();
      
      console.log('‚úÖ Zones reset successfully');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error during reset:', error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–æ–Ω
  validateZones() {
    let isValid = true;
    const errors = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–Ω
    if (!this.zones || this.zones.length !== ZONE_COUNT) {
      errors.push(`Zone count mismatch: expected ${ZONE_COUNT}, got ${this.zones ? this.zones.length : 0}`);
      isValid = false;
    }
    
    if (!this.zoneTypes || this.zoneTypes.length !== ZONE_COUNT) {
      errors.push(`Zone types count mismatch: expected ${ZONE_COUNT}, got ${this.zoneTypes ? this.zoneTypes.length : 0}`);
      isValid = false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    if (this.targetZone < 0 || this.targetZone >= ZONE_COUNT) {
      errors.push(`Target zone out of range: ${this.targetZone}`);
      isValid = false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –∑–æ–Ω–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    if (this.zoneTypes && this.zoneTypes[this.targetZone]) {
      const targetZoneType = this.zoneTypes[this.targetZone];
      if (targetZoneType.id !== 'target') {
        errors.push(`Target zone has wrong type: ${targetZoneType.id}`);
        isValid = false;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∑–æ–Ω–∞
    if (this.zoneTypes) {
      const targetCount = this.zoneTypes.filter(type => type && type.id === 'target').length;
      if (targetCount !== 1) {
        errors.push(`Expected exactly 1 target zone, found: ${targetCount}`);
        isValid = false;
      }
    }
    
    if (!isValid) {
      console.warn('‚ö†Ô∏è Zone validation failed:', errors);
    }
    
    return { isValid, errors };
  }

  // –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
  fixCorruptedZones() {
    console.log('üîß Fixing corrupted zones...');
    
    const validation = this.validateZones();
    if (validation.isValid) {
      console.log('‚úÖ Zones are valid, no fix needed');
      return false;
    }
    
    console.log('üîß Zones are corrupted, performing reset...');
    const success = this.reset();
    
    if (success) {
      const revalidation = this.validateZones();
      if (revalidation.isValid) {
        console.log('‚úÖ Zones fixed successfully');
        return true;
      } else {
        console.error('‚ùå Failed to fix zones:', revalidation.errors);
        return false;
      }
    }
    
    return false;
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–æ–Ω–µ
  getZoneInfo(zoneIndex) {
    if (zoneIndex < 0 || zoneIndex >= ZONE_COUNT) {
      return null;
    }
    
    const zone = this.getZone(zoneIndex);
    const zoneType = this.getZoneType(zoneIndex);
    
    return {
      index: zoneIndex,
      zone: zone,
      type: zoneType,
      isTarget: zoneIndex === this.targetZone,
      isValid: !!(zone && zoneType)
    };
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ ZoneManager cleanup started');
    
    // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤—ã
    this.zones = null;
    this.zoneTypes = null;
    
    super.destroy();
    
    console.log('‚úÖ ZoneManager destroyed');
  }
}