// managers/ZoneManager.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∑–æ–Ω
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { Zone } from '../utils/Zone.js';
import { AngleManager } from '../utils/AngleManager.js';
import { ZoneEventQueue } from '../core/ZoneEventQueue.js';
import { ZONE_COUNT } from '../config/ResourceConfig.js';

// –ï–î–ò–ù–´–ï —Ç–∏–ø—ã –∑–æ–Ω
export const ZONE_TYPES = {
  TARGET: {
    id: 'target',
    name: 'Target Zone',
    color: '#C41E3A', // –ö—Ä–∞—Å–Ω—ã–π
    effects: {
      givesGold: true,
      givesCombo: true,
      energyCost: 1
    }
  },
  
  ENERGY: {
    id: 'energy',
    name: 'Energy Zone',
    color: '#228B22', // –ó–µ–ª–µ–Ω—ã–π
    effects: {
      energyRestore: 3,
      energyCost: 0
    }
  },
  
  BONUS: {
    id: 'bonus',
    name: 'Bonus Zone',
    color: '#FFB347', // –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
    effects: {
      energyRestore: 2,
      resourceBonus: true,
      resourceAmount: 2,
      energyCost: 0
    }
  },
  
  INACTIVE: {
    id: 'inactive',
    name: 'Inactive Zone',
    color: '#E5E5E5', // –°–µ—Ä—ã–π
    effects: {
      energyCost: 0
    }
  }
};

export class ZoneManager extends CleanupMixin {
  constructor(gameState) {
    super();
    
    this.gameState = gameState;
    this.zones = [];
    this.zoneTypes = [];
    this.targetZone = 0;
    this.isInitialized = false;
    this.initializationPromise = null;
    
    // –û—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    this.eventQueue = new ZoneEventQueue();
    this.cleanupManager.registerComponent(this.eventQueue, 'ZoneEventQueue');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–æ–Ω—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ
    this.initialize();
    
    console.log('üéØ ZoneManager initialized with synchronized zone system');
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
   */
  initialize() {
    try {
      console.log('üéØ Starting ZoneManager initialization...');
      
      // –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      this.validateInitializationData();
      
      // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–æ–Ω
      this.createZoneStructure();
      
      // –®–∞–≥ 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∑–æ–Ω
      this.initializeZoneTypes();
      
      // –®–∞–≥ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      this.validateInitialization();
      
      // –®–∞–≥ 5: –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
      this.bindEvents();
      
      this.isInitialized = true;
      console.log('‚úÖ ZoneManager initialization completed successfully');
      
    } catch (error) {
      console.error('‚ùå ZoneManager initialization failed:', error);
      this.handleInitializationFailure(error);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  validateInitializationData() {
    if (!this.gameState) {
      throw new Error('GameState is required for ZoneManager');
    }
    
    if (typeof ZONE_COUNT !== 'number' || ZONE_COUNT < 4 || ZONE_COUNT > 16) {
      throw new Error(`Invalid ZONE_COUNT: ${ZONE_COUNT}. Must be between 4 and 16`);
    }
    
    if (!ZONE_TYPES || typeof ZONE_TYPES !== 'object') {
      throw new Error('ZONE_TYPES configuration is missing');
    }
    
    console.log(`‚úÖ Validation passed for ${ZONE_COUNT} zones`);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–æ–Ω
   */
  createZoneStructure() {
    console.log('üéØ Creating zone structure...');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    this.zones = [];
    this.zoneTypes = [];
    
    // –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Zone –∫–ª–∞—Å—Å–∞
    for (let i = 0; i < ZONE_COUNT; i++) {
      const zone = new Zone(ZONE_TYPES.INACTIVE, i, ZONE_COUNT);
      this.zones.push(zone);
      this.zoneTypes.push({ ...ZONE_TYPES.INACTIVE });
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (this.zones.length !== ZONE_COUNT) {
      throw new Error(`Zone creation failed: expected ${ZONE_COUNT}, got ${this.zones.length}`);
    }
    
    console.log(`‚úÖ Created ${ZONE_COUNT} zones successfully`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∑–æ–Ω
   */
  initializeZoneTypes() {
    console.log('üéØ Initializing zone types...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    this.targetZone = this.validateTargetZone(this.gameState.targetZone || 0);
    this.gameState.targetZone = this.targetZone;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–æ–Ω
    this.generateZoneTypes();
    
    console.log(`‚úÖ Zone types initialized with target zone: ${this.targetZone}`);
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∑–æ–Ω
   */
  generateZoneTypes() {
    try {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–æ–Ω—ã –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
      for (let i = 0; i < ZONE_COUNT; i++) {
        this.zoneTypes[i] = { ...ZONE_TYPES.INACTIVE };
        this.zones[i].definition = this.zoneTypes[i];
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
      this.zoneTypes[this.targetZone] = { ...ZONE_TYPES.TARGET };
      this.zones[this.targetZone].definition = this.zoneTypes[this.targetZone];
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
      this.generateSpecialZones();
      
      console.log(`‚úÖ Zone types generated successfully`);
      
    } catch (error) {
      console.error('‚ùå Error generating zone types:', error);
      this.fallbackZoneGeneration();
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω (—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ, –±–æ–Ω—É—Å–Ω—ã–µ)
   */
  generateSpecialZones() {
    const availableIndices = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (–∏—Å–∫–ª—é—á–∞—è —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É)
    for (let i = 0; i < ZONE_COUNT; i++) {
      if (i !== this.targetZone) {
        availableIndices.push(i);
      }
    }
    
    // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã (25% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)
    const energyZoneCount = Math.max(1, Math.floor(availableIndices.length * 0.25));
    for (let i = 0; i < energyZoneCount && availableIndices.length > 0; i++) {
      const randomIndex = Math.floor(Math.random() * availableIndices.length);
      const zoneIndex = availableIndices.splice(randomIndex, 1)[0];
      
      this.zoneTypes[zoneIndex] = { ...ZONE_TYPES.ENERGY };
      this.zones[zoneIndex].definition = this.zoneTypes[zoneIndex];
    }
    
    // –ë–æ–Ω—É—Å–Ω—ã–µ –∑–æ–Ω—ã (15% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)
    const bonusZoneCount = Math.max(1, Math.floor(availableIndices.length * 0.15));
    for (let i = 0; i < bonusZoneCount && availableIndices.length > 0; i++) {
      const randomIndex = Math.floor(Math.random() * availableIndices.length);
      const zoneIndex = availableIndices.splice(randomIndex, 1)[0];
      
      this.zoneTypes[zoneIndex] = { ...ZONE_TYPES.BONUS };
      this.zones[zoneIndex].definition = this.zoneTypes[zoneIndex];
    }
    
    console.log(`Generated ${energyZoneCount} energy zones and ${bonusZoneCount} bonus zones`);
  }

  /**
   * Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–æ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  fallbackZoneGeneration() {
    console.warn('‚ö†Ô∏è Using fallback zone generation');
    
    for (let i = 0; i < ZONE_COUNT; i++) {
      if (i === this.targetZone) {
        this.zoneTypes[i] = { ...ZONE_TYPES.TARGET };
      } else {
        this.zoneTypes[i] = { ...ZONE_TYPES.INACTIVE };
      }
      this.zones[i].definition = this.zoneTypes[i];
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  validateInitialization() {
    const errors = [];
    
    if (this.zones.length !== ZONE_COUNT) {
      errors.push(`Wrong zone count: ${this.zones.length} !== ${ZONE_COUNT}`);
    }
    
    if (this.zoneTypes.length !== ZONE_COUNT) {
      errors.push(`Wrong zone types count: ${this.zoneTypes.length} !== ${ZONE_COUNT}`);
    }
    
    if (this.targetZone < 0 || this.targetZone >= ZONE_COUNT) {
      errors.push(`Invalid target zone: ${this.targetZone}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∑–æ–Ω–∞
    const targetZones = this.zoneTypes.filter(type => type.id === 'target');
    if (targetZones.length !== 1) {
      errors.push(`Expected 1 target zone, found ${targetZones.length}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–ª—ã –∑–æ–Ω
    for (let i = 0; i < this.zones.length; i++) {
      const zone = this.zones[i];
      if (!AngleManager.isValidAngle(zone.getStartAngle()) || 
          !AngleManager.isValidAngle(zone.getEndAngle())) {
        errors.push(`Invalid angles in zone ${i}`);
      }
    }
    
    if (errors.length > 0) {
      throw new Error(`Zone validation failed: ${errors.join(', ')}`);
    }
    
    console.log('‚úÖ Zone initialization validation passed');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  handleInitializationFailure(error) {
    console.error('‚ùå ZoneManager initialization failed, attempting recovery...');
    
    try {
      // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      this.zones = Zone.createZones(ZONE_COUNT, ZONE_TYPES.INACTIVE);
      this.zoneTypes = Array(ZONE_COUNT).fill({ ...ZONE_TYPES.INACTIVE });
      this.targetZone = 0;
      this.zoneTypes[0] = { ...ZONE_TYPES.TARGET };
      this.zones[0].definition = this.zoneTypes[0];
      
      this.isInitialized = true;
      console.log('‚úÖ Recovery successful with minimal configuration');
      
    } catch (recoveryError) {
      console.error('‚ùå Recovery failed:', recoveryError);
      throw new Error(`ZoneManager initialization failed and recovery impossible: ${error.message}`);
    }
  }

  /**
   * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
   */
  bindEvents() {
    eventBus.subscribe(GameEvents.ZONES_SHUFFLED, (data) => {
      if (data && typeof data.newTargetZone === 'number') {
        this.handleZoneShuffleEvent(data.newTargetZone, data.reason);
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –∑–æ–Ω
   */
  handleZoneShuffleEvent(newTargetZone, reason = 'unknown') {
    if (!this.isInitialized) {
      console.warn('‚ö†Ô∏è ZoneManager not initialized, ignoring shuffle event');
      return;
    }
    
    console.log(`üéØ Handling zone shuffle: ${this.targetZone} -> ${newTargetZone} (${reason})`);
    this.setTargetZone(newTargetZone);
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  setTargetZone(newTargetZone) {
    if (!this.isInitialized) {
      console.warn('‚ö†Ô∏è Cannot set target zone: ZoneManager not initialized');
      return false;
    }
    
    const validatedTarget = this.validateTargetZone(newTargetZone);
    if (validatedTarget === this.targetZone) {
      return true; // –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    }
    
    const oldTargetZone = this.targetZone;
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
      if (oldTargetZone >= 0 && oldTargetZone < ZONE_COUNT) {
        this.zoneTypes[oldTargetZone] = { ...ZONE_TYPES.INACTIVE };
        this.zones[oldTargetZone].definition = this.zoneTypes[oldTargetZone];
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
      this.targetZone = validatedTarget;
      this.zoneTypes[this.targetZone] = { ...ZONE_TYPES.TARGET };
      this.zones[this.targetZone].definition = this.zoneTypes[this.targetZone];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      this.gameState.targetZone = this.targetZone;
      this.gameState.previousTargetZone = oldTargetZone;
      
      // –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
      this.generateSpecialZones();
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π
      this.eventQueue.safeEnqueue('TARGET_ZONE_CHANGE', {
        previousZone: oldTargetZone,
        newZone: this.targetZone,
        source: 'setTargetZone'
      }, 2);
      
      console.log(`‚úÖ Target zone changed: ${oldTargetZone} -> ${this.targetZone}`);
      return true;
      
    } catch (error) {
      console.error('‚ùå Error setting target zone:', error);
      
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
      this.targetZone = oldTargetZone;
      this.gameState.targetZone = oldTargetZone;
      return false;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã
   */
  validateTargetZone(zoneIndex) {
    if (typeof zoneIndex !== 'number' || isNaN(zoneIndex)) {
      console.warn(`Invalid target zone type: ${typeof zoneIndex}`);
      return 0;
    }
    
    if (zoneIndex < 0) {
      console.warn(`Target zone too low: ${zoneIndex}`);
      return 0;
    }
    
    if (zoneIndex >= ZONE_COUNT) {
      console.warn(`Target zone too high: ${zoneIndex} >= ${ZONE_COUNT}`);
      return ZONE_COUNT - 1;
    }
    
    return Math.floor(zoneIndex);
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∑–æ–Ω—ã –ø–æ —É–≥–ª—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AngleManager
   */
  findZoneByAngle(angle) {
    if (!this.isInitialized) {
      console.warn('‚ö†Ô∏è ZoneManager not initialized for angle search');
      return null;
    }
    
    return AngleManager.findZoneByAngle(angle, this.zones);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –∑–æ–Ω—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
   */
  getZoneType(zoneIndex) {
    if (!this.isInitialized || zoneIndex < 0 || zoneIndex >= ZONE_COUNT) {
      return ZONE_TYPES.INACTIVE;
    }
    return this.zoneTypes[zoneIndex] || ZONE_TYPES.INACTIVE;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–æ–Ω—É –ø–æ –∏–Ω–¥–µ–∫—Å—É
   */
  getZone(zoneIndex) {
    if (!this.isInitialized || zoneIndex < 0 || zoneIndex >= ZONE_COUNT) {
      return null;
    }
    return this.zones[zoneIndex] || null;
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–Ω –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   */
  getZonesForRendering() {
    if (!this.isInitialized) {
      console.warn('‚ö†Ô∏è ZoneManager not initialized for rendering');
      return this.createEmergencyRenderZones();
    }
    
    try {
      return this.zones.map((zone, index) => {
        const zoneType = this.zoneTypes[index] || ZONE_TYPES.INACTIVE;
        
        return {
          index,
          zone,
          type: zoneType,
          isTarget: index === this.targetZone,
          color: zoneType.color,
          startAngle: zone.getStartAngle(),
          endAngle: zone.getEndAngle(),
          centerAngle: zone.getCenterAngle(),
          definition: zoneType
        };
      });
      
    } catch (error) {
      console.error('‚ùå Error getting zones for rendering:', error);
      return this.createEmergencyRenderZones();
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –∑–æ–Ω –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   */
  createEmergencyRenderZones() {
    console.warn('‚ö†Ô∏è Creating emergency render zones');
    
    const stepAngle = (2 * Math.PI) / ZONE_COUNT;
    const emergencyZones = [];
    
    for (let i = 0; i < ZONE_COUNT; i++) {
      const isTarget = (i === (this.targetZone || 0));
      const zoneType = isTarget ? ZONE_TYPES.TARGET : ZONE_TYPES.INACTIVE;
      
      emergencyZones.push({
        index: i,
        zone: null,
        type: zoneType,
        isTarget,
        color: zoneType.color,
        startAngle: i * stepAngle,
        endAngle: (i + 1) * stepAngle,
        centerAngle: (i + 0.5) * stepAngle,
        definition: zoneType
      });
    }
    
    return emergencyZones;
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∑–æ–Ω–µ
   */
  handleZoneClick(clickedZone, angle) {
    if (!this.isInitialized) {
      console.warn('‚ö†Ô∏è ZoneManager not initialized for click handling');
      return null;
    }
    
    let zoneIndex;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∑–æ–Ω—ã
    if (typeof clickedZone === 'number') {
      zoneIndex = clickedZone;
    } else if (clickedZone && typeof clickedZone.index === 'number') {
      zoneIndex = clickedZone.index;
    } else {
      console.warn('‚ö†Ô∏è Invalid clicked zone format:', clickedZone);
      return null;
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
    if (zoneIndex < 0 || zoneIndex >= ZONE_COUNT) {
      console.warn('‚ö†Ô∏è Zone index out of range:', zoneIndex);
      return null;
    }
    
    const zoneType = this.getZoneType(zoneIndex);
    const normalizedAngle = AngleManager.normalize(angle);
    
    const result = {
      zoneIndex,
      zoneType,
      angle: normalizedAngle,
      isTarget: zoneIndex === this.targetZone,
      effects: { ...zoneType.effects },
      accuracy: this.calculateClickAccuracy(zoneIndex, normalizedAngle)
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π
    this.eventQueue.safeEnqueue('ZONE_CLICK', result, 3);
    
    console.log(`üñ±Ô∏è Zone click processed: ${zoneIndex} (${zoneType.id}), accuracy: ${result.accuracy.toFixed(2)}`);
    
    return result;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–ª–∏–∫–∞
   */
  calculateClickAccuracy(zoneIndex, angle) {
    const zone = this.getZone(zoneIndex);
    if (!zone) return 0;
    
    try {
      return zone.getAccuracy(angle);
    } catch (error) {
      console.warn('‚ö†Ô∏è Error calculating click accuracy:', error);
      return 0.5; // –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –∫–∞–∫ fallback
    }
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∑–æ–Ω
   */
  shuffleZones() {
    if (!this.isInitialized) {
      console.warn('‚ö†Ô∏è Cannot shuffle zones: ZoneManager not initialized');
      return this.targetZone;
    }
    
    let newTarget;
    let attempts = 0;
    const maxAttempts = ZONE_COUNT * 2;
    
    do {
      newTarget = Math.floor(Math.random() * ZONE_COUNT);
      attempts++;
    } while (newTarget === this.targetZone && ZONE_COUNT > 1 && attempts < maxAttempts);
    
    if (attempts >= maxAttempts) {
      newTarget = (this.targetZone + 1) % ZONE_COUNT;
    }
    
    const success = this.setTargetZone(newTarget);
    if (!success) {
      console.warn('‚ö†Ô∏è Failed to shuffle zones, keeping current target');
      return this.targetZone;
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π
    this.eventQueue.safeEnqueue('ZONE_SHUFFLE', {
      newTargetZone: newTarget,
      reason: 'shuffle'
    }, 2);
    
    return newTarget;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–æ–Ω
   */
  getZoneStatistics() {
    const stats = {
      total: ZONE_COUNT,
      target: this.targetZone,
      isInitialized: this.isInitialized,
      types: {
        target: 0,
        energy: 0,
        bonus: 0,
        inactive: 0
      },
      zonesReady: this.zones ? this.zones.length : 0,
      typesReady: this.zoneTypes ? this.zoneTypes.length : 0
    };
    
    if (this.isInitialized && this.zoneTypes) {
      this.zoneTypes.forEach(zoneType => {
        if (zoneType && stats.types[zoneType.id] !== undefined) {
          stats.types[zoneType.id]++;
        }
      });
    }
    
    return stats;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   */
  getDebugInfo() {
    return {
      isInitialized: this.isInitialized,
      targetZone: this.targetZone,
      zoneCount: ZONE_COUNT,
      zonesLength: this.zones ? this.zones.length : 0,
      zoneTypesLength: this.zoneTypes ? this.zoneTypes.length : 0,
      eventQueueStats: this.eventQueue ? this.eventQueue.getQueueStats() : null,
      zoneDetails: this.isInitialized ? this.zones.map((zone, index) => ({
        index,
        type: this.zoneTypes[index] ? this.zoneTypes[index].id : 'unknown',
        color: this.zoneTypes[index] ? this.zoneTypes[index].color : 'none',
        isTarget: index === this.targetZone,
        angles: zone ? {
          start: zone.getStartAngle(),
          end: zone.getEndAngle(),
          center: zone.getCenterAngle()
        } : null
      })) : [],
      statistics: this.getZoneStatistics()
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–æ–Ω
   */
  forceUpdate() {
    console.log('üîÑ Force updating zones...');
    
    if (!this.isInitialized) {
      console.log('üîÑ ZoneManager not initialized, performing full initialization...');
      this.initialize();
      return;
    }
    
    try {
      // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–æ–Ω
      this.generateZoneTypes();
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.validateInitialization();
      
      console.log('‚úÖ Zones force updated successfully');
      
    } catch (error) {
      console.error('‚ùå Error during force update:', error);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      this.isInitialized = false;
      this.initialize();
    }
  }

  /**
   * –°–±—Ä–æ—Å –∑–æ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  reset() {
    console.log('üîÑ Resetting zones...');
    
    try {
      this.isInitialized = false;
      this.targetZone = 0;
      this.gameState.targetZone = 0;
      this.gameState.previousTargetZone = 0;
      
      // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π
      this.eventQueue.clearQueue();
      
      // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
      this.initialize();
      
      console.log('‚úÖ Zones reset successfully');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error during reset:', error);
      return false;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–æ–Ω
   */
  validateZones() {
    const errors = [];
    
    if (!this.isInitialized) {
      errors.push('ZoneManager not initialized');
      return { isValid: false, errors };
    }
    
    if (!this.zones || this.zones.length !== ZONE_COUNT) {
      errors.push(`Zone count mismatch: expected ${ZONE_COUNT}, got ${this.zones ? this.zones.length : 0}`);
    }
    
    if (!this.zoneTypes || this.zoneTypes.length !== ZONE_COUNT) {
      errors.push(`Zone types count mismatch: expected ${ZONE_COUNT}, got ${this.zoneTypes ? this.zoneTypes.length : 0}`);
    }
    
    if (this.targetZone < 0 || this.targetZone >= ZONE_COUNT) {
      errors.push(`Target zone out of range: ${this.targetZone}`);
    }
    
    if (this.zoneTypes) {
      const targetCount = this.zoneTypes.filter(type => type && type.id === 'target').length;
      if (targetCount !== 1) {
        errors.push(`Expected exactly 1 target zone, found: ${targetCount}`);
      }
    }
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  isReady() {
    return this.isInitialized && 
           this.zones && 
           this.zones.length === ZONE_COUNT &&
           this.zoneTypes &&
           this.zoneTypes.length === ZONE_COUNT;
  }

  /**
   * –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
   */
  destroy() {
    console.log('üßπ ZoneManager cleanup started');
    
    this.isInitialized = false;
    this.zones = null;
    this.zoneTypes = null;
    
    super.destroy();
    
    console.log('‚úÖ ZoneManager destroyed');
  }
}