// featureManager.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ñ–∏–∫—Å–∞–º–∏ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
import { EventBus } from './eventBus.js';
import { Zone } from './zones.js';
import { BuffManager, BUFF_DEFS, DEBUFF_DEFS } from './buffs.js';
import { CONFIG, ZONE_COUNT, RESOURCES, GAME_CONSTANTS } from './config.js';

export class FeatureManager {
  constructor(state) {
    this.state = state;
    this.isDestroyed = false; // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫
    this.clickHandler = null; // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 11: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω
    if (typeof this.state.targetZone !== 'number') {
      this.state.targetZone = Math.floor(Math.random() * ZONE_COUNT);
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Reverse Controls
    if (typeof this.state.previousTargetZone !== 'number') {
      this.state.previousTargetZone = this.state.targetZone;
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 9: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º BuffManager
    if (!this.state.buffManager && !this.isDestroyed) {
      this.buffManager = new BuffManager(state);
      this.state.buffManager = this.buffManager;
    } else if (this.state.buffManager) {
      this.buffManager = this.state.buffManager;
    }
    
    this.initZones();
  }

  initZones() {
    if (this.isDestroyed) return;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 11: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    if (this.clickHandler) {
      EventBus.unsubscribe('click', this.clickHandler);
      this.clickHandler = null;
    }

    this.zones = Array.from({ length: ZONE_COUNT }, (_, i) =>
      new Zone({ type: 'random' }, i, ZONE_COUNT)
    );

    this.clickHandler = angle => this.handleClick(angle);
    EventBus.subscribe('click', this.clickHandler);
  }

  handleClick(angle) {
    if (this.isDestroyed) return;
    
    const now = Date.now();
    if (now < (this.state.blockedUntil || 0)) return;

    // Ghost Click debuff - 50% —à–∞–Ω—Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫
    if (this.state.debuffs && this.state.debuffs.includes('ghost') && 
        Math.random() < GAME_CONSTANTS.GHOST_CLICK_CHANCE) {
      EventBus.emit('ghostClick');
      return;
    }

    const normalizedAngle = ((angle % (2 * Math.PI)) + (2 * Math.PI)) % (2 * Math.PI);
    const z = this.zones.find(z => z.contains(normalizedAngle));
    if (!z) return;

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 6, 8: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Heavy Click —Å –æ—á–∏—Å—Ç–∫–æ–π
    if (this.state.debuffs && this.state.debuffs.includes('heavyClick')) {
      if (!this.handleHeavyClick(z)) {
        return; // –ö–ª–∏–∫ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω
      }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 14, 15: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–æ —Å —É—á–µ—Ç–æ–º freeze
    this.handleCombo(z, normalizedAngle, now);

    // –†–∞—Å—á–µ—Ç –∑–æ–ª–æ—Ç–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.handleGoldAndEffects(z, now);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ ZONE SHUFFLE —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Reverse Controls
    this.handleZoneShuffle(z);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ñ—Ñ–æ–≤/–¥–µ–±–∞—Ñ—Ñ–æ–≤
    this.handleBuffDebuffChance();
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 6, 8: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ Heavy Click
  handleHeavyClick(zone) {
    const required = GAME_CONSTANTS.HEAVY_CLICK_REQUIRED;
    const zoneKey = `zone_${zone.index}`;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!this.state.effectStates.heavyClickRequired) {
      this.state.effectStates.heavyClickRequired = {};
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 8: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –Ω–æ–≤–æ–π –∑–æ–Ω–µ
    Object.keys(this.state.effectStates.heavyClickRequired).forEach(key => {
      if (key !== zoneKey) {
        this.state.effectStates.heavyClickRequired[key] = 0;
      }
    });
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–æ–Ω—ã
    const currentCount = this.state.effectStates.heavyClickRequired[zoneKey] || 0;
    this.state.effectStates.heavyClickRequired[zoneKey] = currentCount + 1;
    
    if (this.state.effectStates.heavyClickRequired[zoneKey] < required) {
      EventBus.emit('heavyClickProgress', {
        current: this.state.effectStates.heavyClickRequired[zoneKey],
        required: required,
        zone: zone.index
      });
      return false; // –ö–ª–∏–∫ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω
    } else {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 8: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–ª–∏–∫–∞
      this.state.effectStates.heavyClickRequired[zoneKey] = 0;
      return true; // –ö–ª–∏–∫ –∑–∞—Å—á–∏—Ç–∞–Ω
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 14, 15: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–æ
  handleCombo(zone, normalizedAngle, now) {
    this.state.combo.lastAngle = normalizedAngle;
    
    // Time Stretch (‚è∞) - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–º–±–æ
    const extraTime = this.state.skillManager ? 
      this.state.skillManager.getSkillBonus('duration', 'combo_timeout') : 0;
    const comboTimeout = CONFIG.comboTimeout + extraTime;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 15: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –∫–æ–º–±–æ
    const isComboFrozen = this.state.debuffs && this.state.debuffs.includes('freeze');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 14: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º —Å —Ç–∞–π–º–∏–Ω–≥–æ–º
    const safeNow = Math.max(now, this.state.combo.deadline || 0);
    
    if (zone.index === this.state.targetZone && safeNow < (this.state.combo.deadline || 0) && !isComboFrozen) {
      this.state.combo.count++;
    } else if (!isComboFrozen) {
      // Steady Hand (üéØ) - –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–º–∞—Ö–∞
      if (zone.index !== this.state.targetZone && this.state.skillManager && 
          this.state.skillManager.canUseMissProtection()) {
        this.state.skillManager.useMissProtection();
        EventBus.emit('missProtectionUsed');
      } else {
        this.state.combo.count = 1;
      }
    }
    
    this.state.combo.lastZone = zone.index;
    this.state.combo.deadline = safeNow + comboTimeout;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–º–±–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    this.state.combo.count = Math.min(this.state.combo.count, GAME_CONSTANTS.MAX_COMBO_COUNT);
    
    // Combo Master (üî•) - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–±–æ
    const comboMultiplier = this.state.skillManager ? 
      1 + this.state.skillManager.getSkillBonus('multiplier', 'combo') : 1;
    const effectiveCombo = Math.floor(this.state.combo.count * comboMultiplier);
    
    EventBus.emit('comboChanged', this.state.combo.count);
    return effectiveCombo;
  }

  handleGoldAndEffects(zone, now) {
    // –ü–æ–ª—É—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–º–±–æ
    const effectiveCombo = this.handleCombo(zone, 0, now);
    
    let clickMultiplier = 1;
    
    // Double Tap buff - –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ 2
    if (this.state.buffs.includes('doubleTap')) {
      clickMultiplier = GAME_CONSTANTS.DOUBLE_TAP_MULTIPLIER;
    }
    
    let gain = effectiveCombo * clickMultiplier;
    
    // Golden Touch (üí∞) - –º–Ω–æ–∂–∏—Ç–µ–ª—å –∑–æ–ª–æ—Ç–∞
    const goldMultiplier = this.state.skillManager ? 
      1 + this.state.skillManager.getSkillBonus('multiplier', 'gold') : 1;
    gain = Math.floor(gain * goldMultiplier);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 13: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ Frenzy buff
    if (this.state.buffs.includes('frenzy')) {
      gain *= GAME_CONSTANTS.FRENZY_MULTIPLIER;
    }
    
    // Critical Strike (üí•) - —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
    const critChance = this.state.skillManager ? 
      this.state.skillManager.getSkillBonus('chance', 'critical') : 0;
    if (Math.random() < critChance) {
      gain *= 2;
      EventBus.emit('criticalHit', { damage: gain });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    const newGoldAmount = Math.min(
      this.state.resources.gold + gain, 
      GAME_CONSTANTS.MAX_SAFE_RESOURCE_VALUE
    );
    this.state.resources.gold = newGoldAmount;
    
    // Star Power buff - –±–æ–Ω—É—Å –∫ —Å–ª—É—á–∞–π–Ω–æ–º—É —Ä–µ—Å—É—Ä—Å—É
    this.handleStarPower();
    
    // Slot Machine buff - —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—É—Ä—Å
    this.handleSlotMachine();
    
    // Resource Finder (üîç) - —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Å—É—Ä—Å
    this.handleResourceFinder(effectiveCombo);
    
    EventBus.emit('resourceChanged', { resource: 'gold', amount: this.state.resources.gold });
  }

  handleStarPower() {
    if (this.state.buffs.includes('starPower') && this.state.effectStates.starPowerClicks > 0) {
      const resourcePool = RESOURCES.filter(r => r !== 'gold' && r !== 'faith' && r !== 'chaos');
      const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
      const bonusAmount = GAME_CONSTANTS.STAR_POWER_BONUS;
      
      const newAmount = Math.min(
        this.state.resources[randomResource] + bonusAmount,
        GAME_CONSTANTS.MAX_SAFE_RESOURCE_VALUE
      );
      this.state.resources[randomResource] = newAmount;
      
      this.state.effectStates.starPowerClicks--;
      
      EventBus.emit('starPowerUsed', { 
        resource: randomResource, 
        amount: bonusAmount,
        remaining: this.state.effectStates.starPowerClicks
      });
      
      // –ï—Å–ª–∏ –∑–∞—Ä—è–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —É–¥–∞–ª—è–µ–º –±–∞—Ñ—Ñ
      if (this.state.effectStates.starPowerClicks <= 0) {
        this.state.buffs = this.state.buffs.filter(id => id !== 'starPower');
        const starPowerDef = this.buffManager?.getBuff('starPower');
        if (starPowerDef) {
          EventBus.emit('buffExpired', { id: 'starPower', name: starPowerDef.name });
        }
      }
    }
  }

  handleSlotMachine() {
    if (this.state.buffs.includes('slotMachine') && Math.random() < GAME_CONSTANTS.SLOT_MACHINE_CHANCE) {
      const resourcePool = RESOURCES.filter(r => r !== 'gold' && r !== 'faith' && r !== 'chaos');
      const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
      const bonusAmount = GAME_CONSTANTS.SLOT_MACHINE_AMOUNT;
      
      const newAmount = Math.min(
        this.state.resources[randomResource] + bonusAmount,
        GAME_CONSTANTS.MAX_SAFE_RESOURCE_VALUE
      );
      this.state.resources[randomResource] = newAmount;
      
      EventBus.emit('slotMachineWin', { resource: randomResource, amount: bonusAmount });
    }
  }

  handleResourceFinder(effectiveCombo) {
    const bonusChance = this.state.skillManager ? 
      this.state.skillManager.getSkillBonus('chance', 'bonus_resource') : 0;
    
    if (Math.random() < bonusChance) {
      const resourcePool = RESOURCES.filter(r => r !== 'gold' && r !== 'faith' && r !== 'chaos');
      const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
      const bonusAmount = Math.max(1, Math.floor(effectiveCombo * 0.5));
      
      const newAmount = Math.min(
        this.state.resources[randomResource] + bonusAmount,
        GAME_CONSTANTS.MAX_SAFE_RESOURCE_VALUE
      );
      this.state.resources[randomResource] = newAmount;
      
      EventBus.emit('bonusResourceFound', { resource: randomResource, amount: bonusAmount });
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ ZONE SHUFFLE —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Reverse Controls
  handleZoneShuffle(zone) {
    if (zone.index === this.state.targetZone && Math.random() * 100 < CONFIG.zoneShuffleChance) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â—É—é
      this.state.previousTargetZone = this.state.targetZone;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ Reverse Controls
      if (this.state.debuffs && this.state.debuffs.includes('reverseControls')) {
        // –î–≤–∏–∂–µ–º—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        this.state.targetZone = (this.state.targetZone - 1 + ZONE_COUNT) % ZONE_COUNT;
        EventBus.emit('zonesShuffled', this.state.targetZone);
        EventBus.emit('tempNotification', 'üôÉ Reverse Controls: Zone moves backward');
      } else {
        // –û–±—ã—á–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–æ–Ω—É –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
        let newTarget;
        let attempts = 0;
        const maxAttempts = ZONE_COUNT * 2;
        
        do {
          newTarget = Math.floor(Math.random() * ZONE_COUNT);
          attempts++;
        } while (newTarget === this.state.targetZone && ZONE_COUNT > 1 && attempts < maxAttempts);
        
        this.state.targetZone = newTarget;
        EventBus.emit('zonesShuffled', this.state.targetZone);
      }
    }
  }

  handleBuffDebuffChance() {
    const { baseChance, chanceRange } = CONFIG;
    if (Math.random() * 100 < baseChance) {
      const minVar = -chanceRange.min;
      const maxVar = chanceRange.max;
      const variation = Math.random() * (maxVar - minVar) + minVar;
      
      // Lucky Charm (üçÄ) - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –±–∞—Ñ—Ñ–æ–≤
      const buffChanceBonus = this.state.skillManager ? 
        this.state.skillManager.getSkillBonus('chance', 'buff') * 100 : 0;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 13: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ Lucky buff
      const luckyBonus = this.state.buffs.includes('lucky') ? GAME_CONSTANTS.LUCKY_BUFF_BONUS : 0;
      
      // Inner Peace (‚òÆÔ∏è) - —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è —Ö–∞–æ—Å–∞
      const chaosReduction = this.state.skillManager ? 
        this.state.skillManager.getSkillBonus('reduction', 'chaos') : 0;
      const effectiveChaos = Math.max(0, this.state.resources.chaos * (1 - chaosReduction));
      
      let buffChance = baseChance + (this.state.resources.faith - effectiveChaos) + variation + buffChanceBonus + luckyBonus;
      buffChance = Math.max(0, Math.min(100, buffChance));

      if (Math.random() * 100 < buffChance) {
        const def = BUFF_DEFS[Math.floor(Math.random() * BUFF_DEFS.length)];
        if (this.buffManager) {
          this.buffManager.applyBuff(def);
        }
      } else {
        const def = DEBUFF_DEFS[Math.floor(Math.random() * DEBUFF_DEFS.length)];
        if (this.buffManager) {
          this.buffManager.applyDebuff(def);
        }
      }
    }
  }

  shuffleZones() {
    if (this.isDestroyed) return;
    
    const arr = this.zones;
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
      arr[i].index = i;
      arr[j].index = j;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2, 11: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  stopAllEffects() {
    this.isDestroyed = true;
    
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    if (this.clickHandler) {
      EventBus.unsubscribe('click', this.clickHandler);
      this.clickHandler = null;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BuffManager
    if (this.buffManager && typeof this.buffManager.stopAllEffects === 'function') {
      this.buffManager.stopAllEffects();
    }
    
    console.log('üßπ FeatureManager –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
  }
}