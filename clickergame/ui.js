// ui.js - –≤–µ—Ä—Å–∏—è —Å —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–º Reset + –º–µ–Ω—é –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è + –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –±–∞—Ñ—Ñ–æ–≤
import { EventBus }            from './eventBus.js';
import { SKILL_CATEGORIES,
         SKILL_DEFS,
         SkillManager }         from './skills.js';
import { BUILDING_DEFS }        from './buildings.js';
import { BUFF_DEFS,
         DEBUFF_DEFS }          from './config.js';

export default class UIManager {
  constructor(state) {
    this.state = state;
    this.currentPanel = null;
    this.initElements();
    this.bindControls();
    this.bindEvents();
    this.updateResources();
    this.createEffectIndicators();
  }

  initElements() {
    this.btnBuildings    = document.getElementById('toggle-buildings');
    this.btnSkills       = document.getElementById('toggle-skills');
    this.btnMarket       = document.getElementById('toggle-market');
    this.btnInfo         = document.getElementById('info-button');
    this.resourcesLeft   = document.getElementById('resources-left');
    this.resourcesRight  = document.getElementById('resources-right');
    this.panel           = document.getElementById('panel-container');
    this.btnLoad         = document.getElementById('load-button');
    this.btnSave         = document.getElementById('save-button');
    this.btnReset        = document.getElementById('reset-button');
    this.notifications   = document.getElementById('notifications');
    this.infoModal       = document.getElementById('info-modal');
    this.mysteryModal    = document.getElementById('mystery-modal');
  }

  bindControls() {
    // Buildings
    this.btnBuildings.addEventListener('click', () => {
      this.currentPanel === 'buildings' ? this.hidePanel() : this.showBuildings();
    });
    // Skills
    this.btnSkills.addEventListener('click', () => {
      this.currentPanel === 'skills' ? this.hidePanel() : this.showSkills();
    });
    // Market
    this.btnMarket.addEventListener('click', () => {
      this.currentPanel === 'market' ? this.hidePanel() : this.showMarket();
    });
    // Info - —Ç–µ–ø–µ—Ä—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –º–µ–Ω—é –≤–º–µ—Å—Ç–æ –º–æ–¥–∞–ª–∫–∏
    this.btnInfo.addEventListener('click', () => {
      this.currentPanel === 'info' ? this.hidePanel() : this.showInfo();
    });
    
    // Close modals on click
    this.infoModal.addEventListener('click',    () => this.infoModal.classList.add('hidden'));
    this.mysteryModal.addEventListener('click', () => this.mysteryModal.classList.add('hidden'));
    // Save
    this.btnSave.addEventListener('click', () => {
      const copy = { ...this.state };
      delete copy.featureMgr;
      delete copy.buildingManager;
      delete copy.skillManager;
      prompt('Copy save code:', btoa(JSON.stringify(copy)));
    });
    // Load
    this.btnLoad.addEventListener('click', () => {
      const code = prompt('Paste save code:');
      try {
        Object.assign(this.state, JSON.parse(atob(code)));
        EventBus.emit('gameReset');
        this.showNotification('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
      } catch {
        this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    });
    
    // –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô RESET - –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ–≥–æ
    this.btnReset.addEventListener('click', () => {
      if (confirm('üî• –ü–û–õ–ù–´–ô –°–ë–†–û–° –ò–ì–†–´ üî•\n\n–≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞!\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?')) {
        if (confirm('‚ö†Ô∏è –ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ‚ö†Ô∏è\n\n–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–±—Ä–æ—Å?')) {
          this.performUltimateReset();
        }
      }
    });
  }

  // –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞
  performUltimateReset() {
    try {
      console.log('üî• –ù–∞—á–∏–Ω–∞–µ–º —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π —Å–±—Ä–æ—Å...');
      
      // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      this.showNotification('üî• –°–ë–†–û–° –ò–ì–†–´ - –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –∏–≥—Ä–µ
      this.stopAllIntervals();
      
      // 3. –û—á–∏—â–∞–µ–º EventBus –ø–æ–ª–Ω–æ—Å—Ç—å—é
      if (EventBus && EventBus._handlers) {
        EventBus._handlers = {};
      }
      
      // 4. –ü–û–õ–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ localStorage - –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
      this.clearAllStorage();
      
      // 5. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
      this.resetInMemoryState();
      
      // 6. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤
      setTimeout(() => {
        this.showNotification('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        this.forcePageReload();
        
      }, 1500);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ:', error);
      // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      this.forcePageReload();
    }
  }

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
  stopAllIntervals() {
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
      if (this.state.buildingManager) {
        this.state.buildingManager.stopAllProduction();
      }
      if (this.state.skillManager) {
        this.state.skillManager.stopAllGeneration();
      }
      if (this.state.featureMgr && this.state.featureMgr.buffIntervals) {
        Object.values(this.state.featureMgr.buffIntervals).forEach(interval => {
          if (interval) clearInterval(interval);
        });
      }
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ window
      const highestTimeoutId = setTimeout(() => {}, 0);
      for (let i = 0; i < highestTimeoutId; i++) {
        clearTimeout(i);
        clearInterval(i);
      }
      
      console.log('‚úÖ –í—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:', error);
    }
  }

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ storage
  clearAllStorage() {
    try {
      // 1. –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–≥—Ä—ã
      localStorage.removeItem('gameState');
      
      // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–≥—Ä–æ–π
      const possibleKeys = [
        'gameState', 'game-state', 'advanced-clicker', 'clicker-game',
        'buildings', 'skills', 'resources', 'combo', 'achievements'
      ];
      
      possibleKeys.forEach(key => {
        localStorage.removeItem(key);
        sessionStorage.removeItem(key);
      });
      
      // 3. –ü–û–õ–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ localStorage (–Ø–î–ï–†–ù–´–ô –í–ê–†–ò–ê–ù–¢)
      localStorage.clear();
      sessionStorage.clear();
      
      // 4. –û—á–∏—Å—Ç–∫–∞ IndexedDB –µ—Å–ª–∏ –µ—Å—Ç—å
      if ('indexedDB' in window) {
        indexedDB.deleteDatabase('gameData');
      }
      
      // 5. –û—á–∏—Å—Ç–∫–∞ cookies —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∏–≥—Ä–æ–π
      document.cookie.split(";").forEach(function(c) { 
        document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
      });
      
      console.log('üóëÔ∏è –í—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ storage:', error);
    }
  }

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
  resetInMemoryState() {
    try {
      // –û–±–Ω—É–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (this.state) {
        Object.keys(this.state).forEach(key => {
          delete this.state[key];
        });
      }
      
      // –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (window.gameState) delete window.gameState;
      if (window.state) delete window.state;
      
      console.log('üß† –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ —Å–±—Ä–æ—à–µ–Ω–æ');
    } catch (error) {
      console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  forcePageReload() {
    try {
      // –°–ø–æ—Å–æ–± 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫–µ—à–∞
      if (window.location && window.location.reload) {
        window.location.reload(true);
        return;
      }
      
      // –°–ø–æ—Å–æ–± 2: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      if (window.location && window.location.href) {
        window.location.href = window.location.href;
        return;
      }
      
      // –°–ø–æ—Å–æ–± 3: –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (window.location && window.location.replace) {
        window.location.replace(window.location.href);
        return;
      }
      
      // –°–ø–æ—Å–æ–± 4: –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      if (window.location) {
        window.location = window.location;
        return;
      }
      
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É:', error);
      
      // –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      alert('‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.\n\nüîÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ä—É—á–Ω—É—é (F5 –∏–ª–∏ Ctrl+R)');
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  createEffectIndicators() {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!document.getElementById('effect-indicators')) {
      const indicatorContainer = document.createElement('div');
      indicatorContainer.id = 'effect-indicators';
      indicatorContainer.className = 'effect-indicators';
      document.body.appendChild(indicatorContainer);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  updateEffectIndicators() {
    const container = document.getElementById('effect-indicators');
    if (!container) return;
    
    container.innerHTML = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—Ñ—ã
    if (this.state.buffs && this.state.buffs.length > 0) {
      this.state.buffs.forEach(buffId => {
        const buffDef = BUFF_DEFS.find(b => b.id === buffId);
        if (buffDef) {
          const indicator = document.createElement('div');
          indicator.className = 'effect-indicator buff-indicator';
          indicator.innerHTML = `
            <span class="effect-icon">${buffDef.name.split(' ')[0]}</span>
            <span class="effect-name">${buffDef.name}</span>
          `;
          indicator.title = buffDef.description;
          container.appendChild(indicator);
        }
      });
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–±–∞—Ñ—Ñ—ã
    if (this.state.debuffs && this.state.debuffs.length > 0) {
      this.state.debuffs.forEach(debuffId => {
        const debuffDef = DEBUFF_DEFS.find(d => d.id === debuffId);
        if (debuffDef) {
          const indicator = document.createElement('div');
          indicator.className = 'effect-indicator debuff-indicator';
          indicator.innerHTML = `
            <span class="effect-icon">${debuffDef.name.split(' ')[0]}</span>
            <span class="effect-name">${debuffDef.name}</span>
          `;
          indicator.title = debuffDef.description;
          container.appendChild(indicator);
        }
      });
    }
  }

  bindEvents() {
    EventBus.subscribe('resourceChanged',   () => this.updateResources());
    EventBus.subscribe('comboChanged',      () => this.updateResources());
    EventBus.subscribe('skillPointsChanged',() => this.updateResources());
    EventBus.subscribe('buffApplied',       id => {
      this.showNotification(`‚ú® Buff: ${id}`);
      this.updateEffectIndicators();
    });
    EventBus.subscribe('debuffApplied',     id => {
      this.showNotification(`üíÄ Debuff: ${id}`);
      this.updateEffectIndicators();
    });
    EventBus.subscribe('buffExpired',       id => {
      this.showNotification(`‚è∞ Buff expired: ${id}`);
      this.updateEffectIndicators();
    });
    EventBus.subscribe('debuffExpired',     id => {
      this.showNotification(`‚è∞ Debuff expired: ${id}`);
      this.updateEffectIndicators();
    });
    EventBus.subscribe('mysteryBox',        opts => this.showMysteryModal(opts));
    
    EventBus.subscribe('buildingBought', () => {
      if (this.currentPanel === 'buildings') {
        this.showBuildings();
      }
    });
    
    EventBus.subscribe('skillBought', () => {
      if (this.currentPanel === 'skills') {
        this.showSkills();
      }
    });
  
    EventBus.subscribe('resourceBought', () => {
      if (this.currentPanel === 'market') {
        this.showMarket();
      }
    });
  
    // –ù–û–í–´–ï —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤
    EventBus.subscribe('criticalHit', (data) => {
      this.showSkillNotification('üí• Critical Strike!', `Double damage: ${data.damage} gold`);
    });
  
    EventBus.subscribe('bonusResourceFound', (data) => {
      this.showSkillNotification('üîç Resource Found!', `+${data.amount} ${data.resource}`);
    });
  
    EventBus.subscribe('missProtectionUsed', () => {
      this.showSkillNotification('üéØ Steady Hand!', 'Combo protected from miss');
    });

    // –ù–û–í–´–ï —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    EventBus.subscribe('starPowerUsed', (data) => {
      this.showSkillNotification('‚≠ê Star Power!', `+${data.amount} ${data.resource} (${data.remaining} left)`);
    });

    EventBus.subscribe('slotMachineWin', (data) => {
      this.showSkillNotification('üé∞ Slot Win!', `+${data.amount} ${data.resource}`);
    });

    EventBus.subscribe('shieldBlock', (data) => {
      this.showSkillNotification('üõ°Ô∏è Shield Block!', `Blocked ${data.debuff} (${data.remaining} left)`);
    });

    EventBus.subscribe('taxCollected', (data) => {
      this.showNotification(`üí∏ Tax Collector: -${data.percent}% all resources`);
    });

    EventBus.subscribe('heavyClickProgress', (data) => {
      this.showNotification(`‚öñÔ∏è Heavy Click: ${data.current}/${data.required}`);
    });

    EventBus.subscribe('ghostClick', () => {
      this.showNotification('üëª Ghost Click: Ignored!');
    });
  }
  
  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞–≤—ã–∫–∞—Ö
  showSkillNotification(title, description) {
    const div = document.createElement('div');
    div.className = 'notification skill-notification';
    div.innerHTML = `
      <div class="skill-notification-title">${title}</div>
      <div class="skill-notification-desc">${description}</div>
    `;
    this.notifications.appendChild(div);
    setTimeout(() => div.remove(), 4000);
  }

  updateResources() {
    // –°–±—Ä–æ—Å
    this.resourcesLeft.innerHTML  = '';
    this.resourcesRight.innerHTML = '';
    // –û—Å–Ω–æ–≤–Ω—ã–µ
    ['gold','wood','stone','food','water','iron'].forEach(key => {
      const val = this.state.resources[key] || 0;
      this.resourcesLeft.appendChild(this.createResourceElem(key, val));
      this.resourcesLeft.appendChild(document.createElement('br'));
    });
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ
    Object.keys(this.state.resources)
      .filter(key => !['gold','wood','stone','food','water','iron'].includes(key))
      .forEach(key => {
        const val = this.state.resources[key];
        this.resourcesRight.appendChild(this.createResourceElem(key, val));
        this.resourcesRight.appendChild(document.createElement('br'));
      });
    // –ö–æ–º–±–æ
    const combo = document.createElement('div');
    combo.textContent = `–ö–æ–º–±–æ: ${this.state.combo.count}`;
    this.resourcesRight.appendChild(combo);
    // Skill Points –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    const sp = document.createElement('div');
    sp.textContent = `Skill Points: ${Math.floor(this.state.skillPoints || 0)}`;
    this.resourcesRight.appendChild(sp);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.updateEffectIndicators();
  }

  createResourceElem(key, val) {
    const span = document.createElement('span');
    span.textContent = `${this.getEmoji(key)} ${Number(val).toFixed(1)}`;
    span.addEventListener('mouseenter', e => this.showTooltip(e, key));
    span.addEventListener('mouseleave',  () => this.hideTooltip());
    return span;
  }

  getEmoji(res) {
    return {
      gold: 'ü™ô', wood: 'üå≤', stone: 'ü™®', food: 'üçé',
      water: 'üíß', iron: '‚õìÔ∏è', people: 'üë•', energy: '‚ö°',
      science: 'üî¨', faith: 'üôè', chaos: 'üå™Ô∏è', skillPoints: '‚ú®'
    }[res] || res;
  }

  showTooltip(e, key) {
    if (!this.tooltip) {
      this.tooltip = document.createElement('div');
      this.tooltip.className = 'tooltip';
      document.body.appendChild(this.tooltip);
    }
    this.tooltip.textContent = key;
    this.tooltip.style.top     = `${e.pageY + 10}px`;
    this.tooltip.style.left    = `${e.pageX + 10}px`;
    this.tooltip.style.display = 'block';
  }

  hideTooltip() {
    if (this.tooltip) this.tooltip.style.display = 'none';
  }

  // –ù–û–í–û–ï: –ú–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –º–æ–¥–∞–ª–∫–∏
  showInfo() {
    this.currentPanel = 'info';
    this.panel.innerHTML = '<h2>üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ñ—Ñ–µ–∫—Ç–∞—Ö</h2>';
    
    // –°–µ–∫—Ü–∏—è –±–∞—Ñ—Ñ–æ–≤
    const buffsSection = document.createElement('div');
    buffsSection.className = 'category-section';
    buffsSection.innerHTML = '<h3>‚ú® –ë–∞—Ñ—Ñ—ã (–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã)</h3>';
    
    BUFF_DEFS.forEach(buff => {
      const buffCard = document.createElement('div');
      buffCard.className = 'item-card buff-card';
      buffCard.innerHTML = `
        <div class="item-header">
          <span class="item-icon">${buff.name.split(' ')[0]}</span>
          <span class="item-name">${buff.name}</span>
          <span class="item-level rarity-${buff.rarity}">${buff.rarity}</span>
        </div>
        <div class="item-description">${buff.description}</div>
        <div class="item-details">
          ${buff.duration ? `<div>‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${buff.duration} —Å–µ–∫—É–Ω–¥</div>` : '<div>‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç</div>'}
        </div>
      `;
      buffsSection.appendChild(buffCard);
    });
    
    // –°–µ–∫—Ü–∏—è –¥–µ–±–∞—Ñ—Ñ–æ–≤
    const debuffsSection = document.createElement('div');
    debuffsSection.className = 'category-section';
    debuffsSection.innerHTML = '<h3>üíÄ –î–µ–±–∞—Ñ—Ñ—ã (–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã)</h3>';
    
    DEBUFF_DEFS.forEach(debuff => {
      const debuffCard = document.createElement('div');
      debuffCard.className = 'item-card debuff-card';
      debuffCard.innerHTML = `
        <div class="item-header">
          <span class="item-icon">${debuff.name.split(' ')[0]}</span>
          <span class="item-name">${debuff.name}</span>
          <span class="item-level severity-${debuff.severity}">${debuff.severity}</span>
        </div>
        <div class="item-description">${debuff.description}</div>
        <div class="item-details">
          ${debuff.duration ? `<div>‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${debuff.duration} —Å–µ–∫—É–Ω–¥</div>` : '<div>‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç</div>'}
        </div>
      `;
      debuffsSection.appendChild(debuffCard);
    });

    // –°–µ–∫—Ü–∏—è –æ–±—â–∏—Ö –ø—Ä–∞–≤–∏–ª
    const rulesSection = document.createElement('div');
    rulesSection.className = 'category-section';
    rulesSection.innerHTML = `
      <h3>‚öñÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤</h3>
      <div class="item-card rules-card">
        <div class="item-description">
          <p><strong>–ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å:</strong> 10% –Ω–∞ –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ –ø–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç</p>
          <p><strong>–í–ª–∏—è–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:</strong></p>
          <ul>
            <li>üôè <strong>Faith</strong> —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –±–∞—Ñ—Ñ–æ–≤</li>
            <li>üå™Ô∏è <strong>Chaos</strong> —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –¥–µ–±–∞—Ñ—Ñ–æ–≤</li>
          </ul>
          <p><strong>–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:</strong></p>
          <ul>
            <li>üíé <strong>Lucky Zone</strong> –±–∞—Ñ—Ñ: +25% –∫ —à–∞–Ω—Å—É –±–∞—Ñ—Ñ–æ–≤</li>
            <li>üçÄ <strong>Lucky Charm</strong> –Ω–∞–≤—ã–∫: —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –±–∞—Ñ—Ñ–æ–≤</li>
            <li>üõ°Ô∏è <strong>Shield</strong> –±–∞—Ñ—Ñ: –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ 3 –¥–µ–±–∞—Ñ—Ñ–∞</li>
          </ul>
        </div>
      </div>
    `;

    this.panel.appendChild(buffsSection);
    this.panel.appendChild(debuffsSection);
    this.panel.appendChild(rulesSection);
    this.panel.classList.remove('hidden');
  }

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ú–∞—Ä–∫–µ—Ç
  showMarket() {
    this.currentPanel = 'market';
    this.panel.innerHTML = '<h2>üõí –ú–∞—Ä–∫–µ—Ç</h2>';
    
    const description = document.createElement('div');
    description.style.textAlign = 'center';
    description.style.marginBottom = '2rem';
    description.style.fontSize = '1.1rem';
    description.style.color = '#666';
    description.innerHTML = `
      <p>üí∞ –¶–µ–Ω–∞ –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –ª—é–±–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞: <strong>2000 –∑–æ–ª–æ—Ç–∞</strong></p>
      <p>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ—Å—É—Ä—Å –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏</p>
    `;
    this.panel.appendChild(description);

    const marketSection = document.createElement('div');
    marketSection.className = 'category-section';
    marketSection.innerHTML = '<h3>üè™ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã</h3>';

    // –°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    const marketResources = ['wood', 'stone', 'food', 'water', 'iron'];
    const resourcesGrid = document.createElement('div');
    resourcesGrid.style.display = 'grid';
    resourcesGrid.style.gridTemplateColumns = 'repeat(auto-fit, minmax(200px, 1fr))';
    resourcesGrid.style.gap = '1rem';

    marketResources.forEach(resource => {
      const resourceCard = this.createMarketResourceCard(resource);
      resourcesGrid.appendChild(resourceCard);
    });

    marketSection.appendChild(resourcesGrid);
    this.panel.appendChild(marketSection);
    this.panel.classList.remove('hidden');
  }

  createMarketResourceCard(resource) {
    const card = document.createElement('div');
    card.className = 'item-card market-card';
    
    const currentGold = this.state.resources.gold || 0;
    const canAfford = currentGold >= 2000;
    
    card.innerHTML = `
      <div class="item-header">
        <span class="item-icon">${this.getEmoji(resource)}</span>
        <span class="item-name">${resource.charAt(0).toUpperCase() + resource.slice(1)}</span>
      </div>
      <div class="item-description">
        –ö—É–ø–∏—Ç—å 1 –µ–¥–∏–Ω–∏—Ü—É ${resource}
      </div>
      <div class="item-footer">
        <span class="price">–¶–µ–Ω–∞: 2000 ü™ô</span>
        <button class="buy-button ${canAfford ? '' : 'disabled'}" 
                ${canAfford ? '' : 'disabled'}>
          –ö—É–ø–∏—Ç—å
        </button>
      </div>
    `;

    const buyButton = card.querySelector('.buy-button');
    buyButton.addEventListener('click', () => {
      if (this.buyResource(resource)) {
        this.showNotification(`–ö—É–ø–ª–µ–Ω–æ: +1 ${resource}`);
        this.showMarket(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
      } else {
        this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!');
      }
    });

    return card;
  }

  buyResource(resource) {
    const cost = 2000;
    if (this.state.resources.gold >= cost) {
      this.state.resources.gold -= cost;
      this.state.resources[resource] += 1;
      EventBus.emit('resourceChanged');
      EventBus.emit('resourceBought', { resource, cost });
      return true;
    }
    return false;
  }

  showBuildings() {
    this.currentPanel = 'buildings';
    this.panel.innerHTML = '<h2>üèóÔ∏è –°—Ç—Ä–æ–µ–Ω–∏—è</h2>';
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–¥–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = {};
    BUILDING_DEFS.forEach(def => {
      if (!categories[def.category]) {
        categories[def.category] = [];
      }
      categories[def.category].push(def);
    });

    Object.entries(categories).forEach(([category, buildings]) => {
      const categoryDiv = document.createElement('div');
      categoryDiv.className = 'category-section';
      categoryDiv.innerHTML = `<h3>${this.getCategoryName(category)}</h3>`;
      
      buildings.forEach(def => {
        const buildingInfo = this.state.buildingManager.getBuildingInfo(def.id);
        if (!buildingInfo) return;
        
        const buildingCard = this.createBuildingCard(def, buildingInfo);
        categoryDiv.appendChild(buildingCard);
      });
      
      this.panel.appendChild(categoryDiv);
    });
    
    this.panel.classList.remove('hidden');
  }

  createBuildingCard(def, buildingInfo) {
    const card = document.createElement('div');
    card.className = 'item-card';
    
    const header = document.createElement('div');
    header.className = 'item-header';
    header.innerHTML = `
      <span class="item-icon">${def.img}</span>
      <span class="item-name">${def.name}</span>
      <span class="item-level">–£—Ä–æ–≤–µ–Ω—å: ${buildingInfo.currentLevel}/${def.maxLevel}</span>
    `;
    
    const description = document.createElement('div');
    description.className = 'item-description';
    description.textContent = def.description;
    
    const details = document.createElement('div');
    details.className = 'item-details';
    
    if (buildingInfo.productionRate) {
      details.innerHTML += `<div>üìà –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: ${buildingInfo.productionRate}</div>`;
    }
    
    if (def.special) {
      details.innerHTML += `<div>‚ú® –û—Å–æ–±–æ–µ: ${def.special.description || '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç'}</div>`;
    }
    
    const footer = document.createElement('div');
    footer.className = 'item-footer';
    
    if (buildingInfo.isMaxLevel) {
      footer.innerHTML = '<span class="max-level">üèÜ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –£–†–û–í–ï–ù–¨</span>';
    } else {
      const priceText = Object.entries(buildingInfo.nextPrice)
        .map(([r, a]) => `${a} ${this.getEmoji(r)}`)
        .join(' ');
      
      footer.innerHTML = `
        <span class="price">–¶–µ–Ω–∞: ${priceText}</span>
        <button class="buy-button ${buildingInfo.canAfford ? '' : 'disabled'}" 
                ${buildingInfo.canAfford ? '' : 'disabled'}>
          –£–ª—É—á—à–∏—Ç—å
        </button>
      `;
      
      const buyButton = footer.querySelector('.buy-button');
      buyButton.addEventListener('click', () => {
        if (this.state.buildingManager.buyBuilding(def.id)) {
          this.showNotification(`${def.name} —É–ª—É—á—à–µ–Ω!`);
          this.showBuildings();
        } else {
          this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤');
        }
      });
    }
    
    card.appendChild(header);
    card.appendChild(description);
    card.appendChild(details);
    card.appendChild(footer);
    
    return card;
  }

  showSkills() {
    this.currentPanel = 'skills';
    this.panel.innerHTML = '<h2>üéØ –ù–∞–≤—ã–∫–∏</h2>';
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–≤—ã–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = {};
    SKILL_DEFS.forEach(def => {
      if (!categories[def.category]) {
        categories[def.category] = [];
      }
      categories[def.category].push(def);
    });

    Object.entries(categories).forEach(([category, skills]) => {
      const categoryDiv = document.createElement('div');
      categoryDiv.className = 'category-section';
      categoryDiv.innerHTML = `<h3>${SKILL_CATEGORIES[category]}</h3>`;
      
      skills.forEach(def => {
        const skillInfo = this.state.skillManager.getSkillInfo(def.id);
        if (!skillInfo) return;
        
        const skillCard = this.createSkillCard(def, skillInfo);
        categoryDiv.appendChild(skillCard);
      });
      
      this.panel.appendChild(categoryDiv);
    });
    
    this.panel.classList.remove('hidden');
  }

  createSkillCard(def, skillInfo) {
    const card = document.createElement('div');
    card.className = 'item-card';
    
    const header = document.createElement('div');
    header.className = 'item-header';
    header.innerHTML = `
      <span class="item-icon">${def.icon}</span>
      <span class="item-name">${def.name}</span>
      <span class="item-level">–£—Ä–æ–≤–µ–Ω—å: ${skillInfo.currentLevel}/${def.maxLevel}</span>
    `;
    
    const description = document.createElement('div');
    description.className = 'item-description';
    description.textContent = def.description;
    
    const details = document.createElement('div');
    details.className = 'item-details';
    
    if (skillInfo.currentLevel > 0) {
      const currentEffect = (skillInfo.currentEffect * 100).toFixed(1);
      details.innerHTML += `<div>üí™ –¢–µ–∫—É—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç: ${currentEffect}%</div>`;
    }
    
    const effectType = this.getEffectTypeDescription(def.effect.type);
    details.innerHTML += `<div>üéØ –¢–∏–ø: ${effectType}</div>`;
    
    const footer = document.createElement('div');
    footer.className = 'item-footer';
    
    if (skillInfo.isMaxLevel) {
      footer.innerHTML = '<span class="max-level">üèÜ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –£–†–û–í–ï–ù–¨</span>';
    } else {
      footer.innerHTML = `
        <span class="price">–¶–µ–Ω–∞: ${skillInfo.nextCost} ‚ú® SP</span>
        <button class="buy-button ${skillInfo.canAfford ? '' : 'disabled'}" 
                ${skillInfo.canAfford ? '' : 'disabled'}>
          –ò–∑—É—á–∏—Ç—å
        </button>
      `;
      
      const buyButton = footer.querySelector('.buy-button');
      buyButton.addEventListener('click', () => {
        if (this.state.skillManager.buySkill(def.id)) {
          this.showNotification(`${def.name} –∏–∑—É—á–µ–Ω!`);
          this.showSkills();
        } else {
          this.showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Skill Points');
        }
      });
    }
    
    card.appendChild(header);
    card.appendChild(description);
    card.appendChild(details);
    card.appendChild(footer);
    
    return card;
  }

  getCategoryName(category) {
    const names = {
      'production': 'üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
      'population': 'üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ', 
      'advanced': 'üî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ',
      'special': '‚ú® –û—Å–æ–±—ã–µ'
    };
    return names[category] || category;
  }

  getEffectTypeDescription(type) {
    const types = {
      'multiplier': '–ú–Ω–æ–∂–∏—Ç–µ–ª—å',
      'chance': '–®–∞–Ω—Å',
      'generation': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è',
      'reduction': '–°–Ω–∏–∂–µ–Ω–∏–µ',
      'duration': '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      'automation': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
      'protection': '–ó–∞—â–∏—Ç–∞',
      'charges': '–ó–∞—Ä—è–¥—ã',
      'preview': '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä'
    };
    return types[type] || type;
  }

  hidePanel() {
    this.currentPanel = null;
    this.panel.classList.add('hidden');
  }

  showMysteryModal(opts) {
    this.mysteryModal.innerHTML = '<h3>üì¶ Mystery Box</h3><p>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É:</p>';
    opts.forEach(r => {
      const btn = document.createElement('button');
      btn.textContent = `${this.getEmoji(r)} +5 ${r}`;
      btn.style.margin = '5px';
      btn.addEventListener('click', () => {
        this.state.resources[r] += 5;
        EventBus.emit('resourceChanged', { resource: r, amount: this.state.resources[r] });
        this.mysteryModal.classList.add('hidden');
        this.showNotification(`–ü–æ–ª—É—á–µ–Ω–æ: +5 ${r}`);
      });
      this.mysteryModal.appendChild(btn);
      this.mysteryModal.appendChild(document.createElement('br'));
    });
    this.mysteryModal.classList.remove('hidden');
  }

  showNotification(msg) {
    const div = document.createElement('div');
    div.className = 'notification';
    div.textContent = msg;
    this.notifications.appendChild(div);
    setTimeout(() => div.remove(), 3000);
  }
}