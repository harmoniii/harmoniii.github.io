// market.js - –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–æ–º
import { EventBus } from './eventBus.js';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞—Ä–∫–µ—Ç–µ
export const MARKET_ITEMS = [
  {
    id: 'wood',
    name: 'Wood',
    icon: 'üå≤',
    description: 'Essential building material',
    price: { gold: 2000 },
    reward: { wood: 1 },
    category: 'resources'
  },
  {
    id: 'stone',
    name: 'Stone',
    icon: 'ü™®',
    description: 'Durable construction material',
    price: { gold: 2000 },
    reward: { stone: 1 },
    category: 'resources'
  },
  {
    id: 'food',
    name: 'Food',
    icon: 'üçé',
    description: 'Sustenance for your people',
    price: { gold: 2000 },
    reward: { food: 1 },
    category: 'resources'
  },
  {
    id: 'water',
    name: 'Water',
    icon: 'üíß',
    description: 'Life-giving liquid',
    price: { gold: 2000 },
    reward: { water: 1 },
    category: 'resources'
  },
  {
    id: 'iron',
    name: 'Iron',
    icon: '‚õìÔ∏è',
    description: 'Strong metal for tools and weapons',
    price: { gold: 2000 },
    reward: { iron: 1 },
    category: 'resources'
  },
  {
    id: 'energy_pack',
    name: 'Energy Pack',
    icon: '‚ö°',
    description: 'Instant energy boost',
    price: { gold: 5000 },
    reward: { energy: 3 },
    category: 'advanced'
  },
  {
    id: 'science_book',
    name: 'Science Book',
    icon: 'üìö',
    description: 'Knowledge compilation',
    price: { gold: 8000, iron: 5 },
    reward: { science: 2 },
    category: 'advanced'
  },
  {
    id: 'faith_relic',
    name: 'Faith Relic',
    icon: '‚ú®',
    description: 'Sacred artifact that increases faith',
    price: { gold: 10000, stone: 20 },
    reward: { faith: 5 },
    category: 'special'
  },
  {
    id: 'chaos_neutralizer',
    name: 'Chaos Neutralizer',
    icon: 'üïäÔ∏è',
    description: 'Reduces chaos in your realm',
    price: { gold: 15000, science: 3 },
    reward: { chaos: -10 }, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —É–º–µ–Ω—å—à–∞–µ—Ç —Ö–∞–æ—Å
    category: 'special'
  },
  {
    id: 'skill_crystal',
    name: 'Skill Crystal',
    icon: 'üíé',
    description: 'Crystallized knowledge that grants skill points',
    price: { gold: 20000, science: 5, faith: 3 },
    reward: { skillPoints: 3 },
    category: 'premium'
  }
];

export const MARKET_CATEGORIES = {
  resources: 'Basic Resources',
  advanced: 'Advanced Materials',
  special: 'Special Items',
  premium: 'Premium Goods'
};

export class MarketManager {
  constructor(state) {
    this.state = state;
    this.initMarket();
  }

  initMarket() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!this.state.market) {
      this.state.market = {
        dailyDeals: [],
        purchaseHistory: [],
        reputation: 0
      };
    }
  }

  canAfford(itemId) {
    const item = MARKET_ITEMS.find(i => i.id === itemId);
    if (!item) return false;

    return Object.entries(item.price).every(([resource, amount]) => 
      (this.state.resources[resource] || 0) >= amount
    );
  }

  getItemInfo(itemId) {
    const item = MARKET_ITEMS.find(i => i.id === itemId);
    if (!item) return null;

    return {
      ...item,
      canAfford: this.canAfford(itemId),
      priceText: this.formatPrice(item.price),
      rewardText: this.formatReward(item.reward)
    };
  }

  formatPrice(price) {
    return Object.entries(price)
      .map(([resource, amount]) => `${amount} ${this.getEmoji(resource)}`)
      .join(' + ');
  }

  formatReward(reward) {
    return Object.entries(reward)
      .map(([resource, amount]) => {
        const prefix = amount > 0 ? '+' : '';
        return `${prefix}${amount} ${this.getEmoji(resource)}`;
      })
      .join(' + ');
  }

  getEmoji(resource) {
    const emojis = {
      gold: 'ü™ô', wood: 'üå≤', stone: 'ü™®', food: 'üçé',
      water: 'üíß', iron: '‚õìÔ∏è', people: 'üë•', energy: '‚ö°',
      science: 'üî¨', faith: 'üôè', chaos: 'üå™Ô∏è', skillPoints: '‚ú®'
    };
    return emojis[resource] || resource;
  }

  buyItem(itemId) {
    const item = MARKET_ITEMS.find(i => i.id === itemId);
    if (!item) return false;

    if (!this.canAfford(itemId)) return false;

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    Object.entries(item.price).forEach(([resource, amount]) => {
      this.state.resources[resource] -= amount;
    });

    // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    Object.entries(item.reward).forEach(([resource, amount]) => {
      if (resource === 'skillPoints') {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è skill points
        this.state.skillPoints = Math.floor((this.state.skillPoints || 0) + amount);
        EventBus.emit('skillPointsChanged', this.state.skillPoints);
      } else if (resource === 'chaos' && amount < 0) {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ö–∞–æ—Å–∞
        this.state.resources[resource] = Math.max(0, 
          (this.state.resources[resource] || 0) + amount);
      } else {
        this.state.resources[resource] = 
          (this.state.resources[resource] || 0) + amount;
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
    this.state.market.purchaseHistory.push({
      itemId: itemId,
      timestamp: Date.now(),
      price: { ...item.price },
      reward: { ...item.reward }
    });

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
    this.state.market.reputation += 1;

    EventBus.emit('resourceChanged');
    EventBus.emit('itemPurchased', { 
      item: item, 
      reputation: this.state.market.reputation 
    });

    return true;
  }

  getAllItems() {
    return MARKET_ITEMS.map(item => this.getItemInfo(item.id));
  }

  getItemsByCategory() {
    const categories = {};
    Object.keys(MARKET_CATEGORIES).forEach(cat => {
      categories[cat] = MARKET_ITEMS
        .filter(item => item.category === cat)
        .map(item => this.getItemInfo(item.id));
    });
    return categories;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
  generateDailyDeals() {
    const dealCount = 3;
    const availableItems = MARKET_ITEMS.filter(item => 
      item.category !== 'premium' // –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    );
    
    const deals = [];
    while (deals.length < dealCount && deals.length < availableItems.length) {
      const item = availableItems[Math.floor(Math.random() * availableItems.length)];
      if (!deals.find(deal => deal.id === item.id)) {
        // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é —Ç–æ–≤–∞—Ä–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
        const discountedItem = {
          ...item,
          id: `${item.id}_deal`,
          price: this.applyDiscount(item.price, 0.8), // 20% —Å–∫–∏–¥–∫–∞
          isDeal: true,
          originalPrice: { ...item.price }
        };
        deals.push(discountedItem);
      }
    }
    
    this.state.market.dailyDeals = deals;
    return deals;
  }

  applyDiscount(price, multiplier) {
    const discountedPrice = {};
    Object.entries(price).forEach(([resource, amount]) => {
      discountedPrice[resource] = Math.max(1, Math.floor(amount * multiplier));
    });
    return discountedPrice;
  }

  getMarketReputation() {
    return this.state.market.reputation;
  }

  getPurchaseHistory() {
    return this.state.market.purchaseHistory;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
  getReputationDiscount() {
    const reputation = this.state.market.reputation;
    if (reputation >= 50) return 0.9; // 10% —Å–∫–∏–¥–∫–∞
    if (reputation >= 25) return 0.95; // 5% —Å–∫–∏–¥–∫–∞
    return 1.0; // –ë–µ–∑ —Å–∫–∏–¥–∫–∏
  }
}