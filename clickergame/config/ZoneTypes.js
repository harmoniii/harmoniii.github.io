// config/ZoneTypes.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –∑–æ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
export const ZONE_TYPES = {
  // –ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ (—Ü–µ–ª–µ–≤–∞—è) - –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞
  GOLD: {
    id: 'gold',
    name: 'Target Zone',
    color: '#C41E3A', // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
    probability: 1.0,
    effects: {
      givesGold: true,
      givesCombo: true,
      energyCost: 1
    }
  },
  
  // –°–µ—Ä—ã–µ –∑–æ–Ω—ã (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ) - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  INACTIVE: {
    id: 'inactive',
    name: 'Inactive Zone',
    color: '#E5E5E5', // –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    probability: 1.0,
    effects: {
      givesGold: false,
      givesCombo: false,
      energyCost: 0
    }
  },
  
  // –ó–µ–ª–µ–Ω—ã–µ –∑–æ–Ω—ã (—ç–Ω–µ—Ä–≥–∏—è) - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —ç–Ω–µ—Ä–≥–∏—é
  ENERGY: {
    id: 'energy',
    name: 'Energy Zone',
    color: '#228B22', // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
    probability: 0.25, // 25% —à–∞–Ω—Å –ø–æ—è–≤–ª–µ–Ω–∏—è
    effects: {
      givesGold: false,
      givesCombo: false,
      energyRestore: 3,
      energyCost: 0
    }
  },
  
  // –ó–æ–ª–æ—Ç—ã–µ –∑–æ–Ω—ã (–±–æ–Ω—É—Å) - –¥–∞—é—Ç —Ä–µ—Å—É—Ä—Å—ã –∏ —ç–Ω–µ—Ä–≥–∏—é
  BONUS: {
    id: 'bonus',
    name: 'Bonus Zone',
    color: '#FFB347', // –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π —Ü–≤–µ—Ç
    probability: 0.15, // 15% —à–∞–Ω—Å –ø–æ—è–≤–ª–µ–Ω–∏—è
    effects: {
      givesGold: false,
      givesCombo: false,
      energyRestore: 2,
      energyCost: 0,
      resourceBonus: true,
      resourceAmount: 2
    }
  }
};

export class ZoneTypeManager {
  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–æ–Ω: 1 –∫—Ä–∞—Å–Ω–∞—è (—Ü–µ–ª–µ–≤–∞—è), –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä—ã–µ —Å —à–∞–Ω—Å–æ–º –Ω–∞ —Å–ø–µ—Ü–∑–æ–Ω—ã
   */
  static generateZoneTypes(zoneCount, targetZone = 0, energyPercentage = 1.0) {
    console.log(`üîß ZoneTypeManager: Generating ${zoneCount} zones with target: ${targetZone}`);
    
    const zones = new Array(zoneCount);
    
    // –®–ê–ì 1: –í—Å–µ –∑–æ–Ω—ã –¥–µ–ª–∞–µ–º —Å–µ—Ä—ã–º–∏
    for (let i = 0; i < zoneCount; i++) {
      zones[i] = { ...ZONE_TYPES.INACTIVE };
    }
    
    // –®–ê–ì 2: –¶–µ–ª–µ–≤—É—é –∑–æ–Ω—É –¥–µ–ª–∞–µ–º –∫—Ä–∞—Å–Ω–æ–π
    if (targetZone >= 0 && targetZone < zoneCount) {
      zones[targetZone] = { ...ZONE_TYPES.GOLD };
    }
    
    // –®–ê–ì 3: –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
    const availableIndices = [];
    for (let i = 0; i < zoneCount; i++) {
      if (i !== targetZone) {
        availableIndices.push(i);
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω
    const maxSpecialZones = availableIndices.length;
    const energyZoneCount = Math.min(
      maxSpecialZones,
      Math.max(1, Math.floor(maxSpecialZones * ZONE_TYPES.ENERGY.probability * energyPercentage))
    );
    const bonusZoneCount = Math.min(
      maxSpecialZones - energyZoneCount,
      Math.max(1, Math.floor(maxSpecialZones * ZONE_TYPES.BONUS.probability))
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã
    for (let i = 0; i < energyZoneCount && availableIndices.length > 0; i++) {
      const randomIndex = Math.floor(Math.random() * availableIndices.length);
      const zoneIndex = availableIndices.splice(randomIndex, 1)[0];
      zones[zoneIndex] = { ...ZONE_TYPES.ENERGY };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –∑–æ–Ω—ã
    for (let i = 0; i < bonusZoneCount && availableIndices.length > 0; i++) {
      const randomIndex = Math.floor(Math.random() * availableIndices.length);
      const zoneIndex = availableIndices.splice(randomIndex, 1)[0];
      zones[zoneIndex] = { ...ZONE_TYPES.BONUS };
    }
    
    console.log(`‚úÖ Generated zones: target=${targetZone} (gold), energy=${energyZoneCount}, bonus=${bonusZoneCount}`);
    
    return zones;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —ç–Ω–µ—Ä–≥–∏–∏
   */
  static generateAdaptiveZoneTypes(zoneCount, targetZone = 0, currentEnergyPercent = 100) {
    let energyPercentage = 1.0; // –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–æ–Ω –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
    if (currentEnergyPercent <= 10) {
      energyPercentage = 3.0; // 300% –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
    } else if (currentEnergyPercent <= 30) {
      energyPercentage = 2.0; // 200% –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
    } else if (currentEnergyPercent <= 50) {
      energyPercentage = 1.5; // 150% –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π —ç–Ω–µ—Ä–≥–∏–∏
    }
    
    return this.generateZoneTypes(zoneCount, targetZone, energyPercentage);
  }
  
  /**
   * –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Ü–µ–ª–µ–≤–æ–π (–∫—Ä–∞—Å–Ω–æ–π) –∑–æ–Ω—ã
   */
  static findGoldZoneIndex(zones) {
    if (!Array.isArray(zones)) return 0;
    
    const goldIndex = zones.findIndex(zone => zone && zone.id === 'gold');
    return goldIndex !== -1 ? goldIndex : 0;
  }
  
  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
   */
  static setTargetZone(zones, targetIndex) {
    if (!Array.isArray(zones) || targetIndex < 0 || targetIndex >= zones.length) {
      console.warn('Invalid zones array or target index');
      return zones;
    }
    
    console.log(`üéØ ZoneTypeManager: Setting target zone to ${targetIndex}`);
    
    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫—Ä–∞—Å–Ω—É—é –∑–æ–Ω—É –Ω–∞ —Å–µ—Ä—É—é
    for (let i = 0; i < zones.length; i++) {
      if (zones[i] && zones[i].id === 'gold') {
        zones[i] = { ...ZONE_TYPES.INACTIVE };
        break;
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Å–Ω—É—é –∑–æ–Ω—É –Ω–∞ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
    zones[targetIndex] = { ...ZONE_TYPES.GOLD };
    
    return zones;
  }
  
  /**
   * –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É –Ω–∞ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
   */
  static moveTargetZone(zones, newTargetIndex) {
    return this.setTargetZone(zones, newTargetIndex);
  }
  
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã (–∫—Ä–æ–º–µ —Ü–µ–ª–µ–≤–æ–π)
   */
  static refreshSpecialZones(zones, targetZone = 0, energyPercentage = 1.0) {
    if (!Array.isArray(zones)) return zones;
    
    console.log(`üîÑ ZoneTypeManager: Refreshing special zones, target: ${targetZone}`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–æ–Ω—ã –∫—Ä–æ–º–µ —Ü–µ–ª–µ–≤–æ–π –Ω–∞ —Å–µ—Ä—ã–µ
    for (let i = 0; i < zones.length; i++) {
      if (i !== targetZone) {
        zones[i] = { ...ZONE_TYPES.INACTIVE };
      }
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã
    const availableIndices = [];
    for (let i = 0; i < zones.length; i++) {
      if (i !== targetZone) {
        availableIndices.push(i);
      }
    }
    
    const maxSpecialZones = availableIndices.length;
    const energyZoneCount = Math.min(
      maxSpecialZones,
      Math.max(1, Math.floor(maxSpecialZones * ZONE_TYPES.ENERGY.probability * energyPercentage))
    );
    const bonusZoneCount = Math.min(
      maxSpecialZones - energyZoneCount,
      Math.max(1, Math.floor(maxSpecialZones * ZONE_TYPES.BONUS.probability))
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã
    for (let i = 0; i < energyZoneCount && availableIndices.length > 0; i++) {
      const randomIndex = Math.floor(Math.random() * availableIndices.length);
      const zoneIndex = availableIndices.splice(randomIndex, 1)[0];
      zones[zoneIndex] = { ...ZONE_TYPES.ENERGY };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –∑–æ–Ω—ã
    for (let i = 0; i < bonusZoneCount && availableIndices.length > 0; i++) {
      const randomIndex = Math.floor(Math.random() * availableIndices.length);
      const zoneIndex = availableIndices.splice(randomIndex, 1)[0];
      zones[zoneIndex] = { ...ZONE_TYPES.BONUS };
    }
    
    console.log(`‚úÖ Refreshed special zones: energy=${energyZoneCount}, bonus=${bonusZoneCount}`);
    
    return zones;
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–æ–Ω
   */
  static getZoneStatistics(zones) {
    const stats = {
      total: Array.isArray(zones) ? zones.length : 0,
      gold: 0,
      inactive: 0,
      energy: 0,
      bonus: 0
    };
    
    if (Array.isArray(zones)) {
      zones.forEach(zone => {
        if (zone && stats[zone.id] !== undefined) {
          stats[zone.id]++;
        }
      });
    }
    
    return stats;
  }
  
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –∑–æ–Ω
   */
  static validateZones(zones) {
    if (!Array.isArray(zones) || zones.length === 0) {
      console.warn('Invalid zones array');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∑–æ–Ω–∞
    const goldZones = zones.filter(zone => zone && zone.id === 'gold');
    if (goldZones.length !== 1) {
      console.warn(`Expected 1 gold zone, found ${goldZones.length}`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–æ–Ω—ã –∏–º–µ—é—Ç –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–ø—ã
    const isValid = zones.every(zone => 
      zone && 
      typeof zone.id === 'string' && 
      typeof zone.color === 'string' &&
      typeof zone.effects === 'object'
    );
    
    if (!isValid) {
      console.warn('Some zones have invalid structure');
      return false;
    }
    
    return true;
  }
  
  /**
   * –°–æ–∑–¥–∞—Ç—å –∑–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  static createDefaultZones(zoneCount = 8, targetZone = 0) {
    console.log(`üèóÔ∏è ZoneTypeManager: Creating default zones (count: ${zoneCount}, target: ${targetZone})`);
    
    const zones = this.generateZoneTypes(zoneCount, targetZone);
    
    if (!this.validateZones(zones)) {
      console.warn('Generated zones failed validation, creating fallback');
      // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã –∫–∞–∫ fallback
      const fallbackZones = new Array(zoneCount);
      for (let i = 0; i < zoneCount; i++) {
        fallbackZones[i] = i === targetZone ? 
          { ...ZONE_TYPES.GOLD } : 
          { ...ZONE_TYPES.INACTIVE };
      }
      return fallbackZones;
    }
    
    return zones;
  }
  
  /**
   * –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –∑–æ–Ω
   */
  static cloneZones(zones) {
    if (!Array.isArray(zones)) return [];
    
    return zones.map(zone => zone ? { ...zone } : null);
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –∑–æ–Ω—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   */
  static getZoneRenderColor(zone, isTarget = false) {
    if (isTarget || (zone && zone.id === 'gold')) {
      return '#C41E3A'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Ü–µ–ª–µ–≤–æ–π
    }
    
    if (!zone || !zone.color) {
      return '#E5E5E5'; // –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    return zone.color;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ –∑–æ–Ω–∞ –¥–∞–≤–∞—Ç—å –∫–æ–º–±–æ
   */
  static canGiveCombo(zone) {
    return zone && zone.effects && zone.effects.givesCombo === true;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏ –∑–æ–Ω–∞ —ç–Ω–µ—Ä–≥–∏—é
   */
  static restoresEnergy(zone) {
    return zone && zone.effects && zone.effects.energyRestore > 0;
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞—Ç–∏—Ç –ª–∏ –∑–æ–Ω–∞ —ç–Ω–µ—Ä–≥–∏—é
   */
  static consumesEnergy(zone) {
    return zone && zone.effects && zone.effects.energyCost > 0;
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–æ–Ω—ã
   */
  static getZoneDescription(zone) {
    if (!zone) return 'Unknown zone';
    
    switch (zone.id) {
      case 'gold':
        return 'Target zone - click here to gain gold and combo';
      case 'energy':
        return 'Energy zone - restores energy when clicked';
      case 'bonus':
        return 'Bonus zone - gives resources and energy';
      case 'inactive':
        return 'Inactive zone - no effect';
      default:
        return zone.name || 'Unknown zone type';
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –∑–æ–Ω—ã
   */
  static getZoneIcon(zone) {
    if (!zone) return '‚ùì';
    
    switch (zone.id) {
      case 'gold':
        return 'üéØ';
      case 'energy':
        return '‚ö°';
      case 'bonus':
        return 'üí∞';
      case 'inactive':
        return '';
      default:
        return '‚ùì';
    }
  }
  
  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø –∑–æ–Ω—ã
   */
  static createZoneType(id, name, color, effects, probability = 1.0) {
    return {
      id,
      name,
      color,
      probability,
      effects: {
        givesGold: false,
        givesCombo: false,
        energyCost: 0,
        energyRestore: 0,
        resourceBonus: false,
        resourceAmount: 0,
        ...effects
      }
    };
  }
  
  /**
   * –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–æ–Ω–∞—Ö
   */
  static getDebugInfo(zones) {
    if (!Array.isArray(zones)) {
      return { error: 'Invalid zones array' };
    }
    
    const stats = this.getZoneStatistics(zones);
    const isValid = this.validateZones(zones);
    const targetIndex = this.findGoldZoneIndex(zones);
    
    return {
      stats,
      isValid,
      targetIndex,
      zoneDetails: zones.map((zone, i) => ({
        index: i,
        id: zone?.id || 'undefined',
        name: zone?.name || 'undefined',
        color: zone?.color || 'undefined',
        isTarget: i === targetIndex
      }))
    };
  }
  
  /**
   * –°—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –∑–æ–Ω
   */
  static compareZones(zones1, zones2) {
    if (!Array.isArray(zones1) || !Array.isArray(zones2)) {
      return { equal: false, reason: 'Invalid arrays' };
    }
    
    if (zones1.length !== zones2.length) {
      return { equal: false, reason: 'Different lengths' };
    }
    
    for (let i = 0; i < zones1.length; i++) {
      const zone1 = zones1[i];
      const zone2 = zones2[i];
      
      if (!zone1 || !zone2) {
        if (zone1 !== zone2) {
          return { equal: false, reason: `Null mismatch at index ${i}` };
        }
        continue;
      }
      
      if (zone1.id !== zone2.id) {
        return { equal: false, reason: `ID mismatch at index ${i}: ${zone1.id} vs ${zone2.id}` };
      }
    }
    
    return { equal: true, reason: 'Arrays are identical' };
  }
  
  /**
   * –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
   */
  static fixCorruptedZones(zones, zoneCount = 8, targetZone = 0) {
    console.log('üîß ZoneTypeManager: Fixing corrupted zones...');
    
    if (!Array.isArray(zones) || zones.length !== zoneCount) {
      console.log('Creating new zones due to invalid array');
      return this.createDefaultZones(zoneCount, targetZone);
    }
    
    let needsFix = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
    const goldZones = zones.filter((zone, i) => zone && zone.id === 'gold');
    if (goldZones.length !== 1) {
      needsFix = true;
      console.log(`Found ${goldZones.length} gold zones, should be 1`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–æ–Ω
    for (let i = 0; i < zones.length; i++) {
      const zone = zones[i];
      if (!zone || !zone.id || !zone.effects) {
        needsFix = true;
        console.log(`Invalid zone at index ${i}`);
        break;
      }
    }
    
    if (needsFix) {
      console.log('Regenerating zones...');
      return this.generateZoneTypes(zoneCount, targetZone);
    }
    
    console.log('Zones are valid, no fix needed');
    return zones;
  }
}