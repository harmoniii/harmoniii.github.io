// effects/BuffManager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞—Ñ—Ñ–∞–º–∏ –∏ –¥–µ–±–∞—Ñ—Ñ–∞–º–∏
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { 
  BUFF_DEFS, 
  DEBUFF_DEFS, 
  EFFECT_CONFIG,
  getBuffById,
  getDebuffById,
  getRandomBuffByRarity,
  getRandomDebuffBySeverity
} from './EffectDefinitions.js';
import { getResourcesInGroup } from '../config/ResourceConfig.js';
import { GAME_CONSTANTS } from '../config/GameConstants.js';

export class BuffManager extends CleanupMixin {
  constructor(gameState) {
    super();
    
    this.gameState = gameState;
    this.activeEffects = new Map(); // id -> {timeoutId, config, startTime}
    this.effectIntervals = new Map(); // id -> intervalId
    
    this.initializeEffectStates();
    
    console.log('üé≠ BuffManager initialized');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  initializeEffectStates() {
    if (!this.gameState.effectStates) {
      this.gameState.effectStates = this.getDefaultEffectStates();
    } else {
      // –î–æ–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const defaults = this.getDefaultEffectStates();
      Object.keys(defaults).forEach(key => {
        if (this.gameState.effectStates[key] === undefined) {
          this.gameState.effectStates[key] = defaults[key];
        }
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  getDefaultEffectStates() {
    return {
      starPowerClicks: 0,
      shieldBlocks: 0,
      heavyClickRequired: {},
      reverseDirection: 1,
      frozenCombo: false
    };
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –±–∞—Ñ—Ñ
  applyRandomBuff() {
    const buffDef = getRandomBuffByRarity();
    if (buffDef) {
      this.applyBuff(buffDef);
    }
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ–±–∞—Ñ—Ñ
  applyRandomDebuff() {
    const debuffDef = getRandomDebuffBySeverity();
    if (debuffDef) {
      this.applyDebuff(debuffDef);
    }
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–∞—Ñ—Ñ
  applyBuff(buffDef) {
    if (!this.isActive() || !buffDef) return;

    console.log(`Applying buff: ${buffDef.name}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å—Ç–∞–∫–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç
    const config = EFFECT_CONFIG[buffDef.id] || {};
    if (!config.stackable && this.gameState.buffs.includes(buffDef.id)) {
      // –ï—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ —Å—Ç–∞–∫–∞–µ—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
      this.removeBuff(buffDef.id);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ñ—Ñ–æ–≤
    if (!this.gameState.buffs.includes(buffDef.id)) {
      this.gameState.buffs.push(buffDef.id);
    }

    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    eventBus.emit(GameEvents.BUFF_APPLIED, {
      id: buffDef.id,
      name: buffDef.name
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    this.applyBuffEffect(buffDef);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ—á–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (buffDef.duration) {
      this.setBuffExpiration(buffDef);
    }
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –±–∞—Ñ—Ñ–∞
  applyBuffEffect(buffDef) {
    const config = EFFECT_CONFIG[buffDef.id] || {};

    switch (buffDef.id) {
      case 'frenzy':
      case 'lucky':
      case 'doubleTap':
      case 'slotMachine':
      case 'goldenTouch':
        // –ü–∞—Å—Å–∏–≤–Ω—ã–µ –±–∞—Ñ—Ñ—ã - —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –ª–æ–≥–∏–∫–µ –∏–≥—Ä—ã
        break;

      case 'speedBoost':
        this.applySpeedBoost(true);
        break;

      case 'waterfall':
        this.startWaterfall();
        break;

      case 'starPower':
        this.gameState.effectStates.starPowerClicks = GAME_CONSTANTS.STAR_POWER_CLICKS;
        break;

      case 'shield':
        this.gameState.effectStates.shieldBlocks = GAME_CONSTANTS.SHIELD_BLOCKS;
        break;

      case 'timeWarp':
        this.applyTimeWarp(true);
        break;

      case 'roll':
        this.executeRoll();
        break;

      case 'mysteryBox':
        this.showMysteryBox();
        break;
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–µ—á–µ–Ω–∏–µ –±–∞—Ñ—Ñ–∞
  setBuffExpiration(buffDef) {
    // Buff Mastery skill - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞—Ñ—Ñ–æ–≤
    const buffDurationBonus = this.getSkillBonus('duration', 'buffs');
    const durationMultiplier = 1 + buffDurationBonus;
    const finalDuration = Math.floor(buffDef.duration * durationMultiplier * 1000);

    const timeoutId = this.createTimeout(() => {
      this.removeBuff(buffDef.id);
      eventBus.emit(GameEvents.BUFF_EXPIRED, {
        id: buffDef.id,
        name: buffDef.name
      });
    }, finalDuration, `buff-${buffDef.id}`);

    this.activeEffects.set(buffDef.id, {
      timeoutId,
      config: EFFECT_CONFIG[buffDef.id],
      startTime: Date.now()
    });
  }

  // –£–¥–∞–ª–∏—Ç—å –±–∞—Ñ—Ñ
  removeBuff(buffId) {
    if (!this.gameState.buffs.includes(buffId)) return;

    console.log(`Removing buff: ${buffId}`);

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
    this.gameState.buffs = this.gameState.buffs.filter(id => id !== buffId);

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    this.clearEffect(buffId);

    // –°–Ω–∏–º–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.removeBuffEffect(buffId);
  }

  // –°–Ω—è—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –±–∞—Ñ—Ñ–∞
  removeBuffEffect(buffId) {
    switch (buffId) {
      case 'speedBoost':
        this.applySpeedBoost(false);
        break;

      case 'timeWarp':
        this.applyTimeWarp(false);
        break;

      case 'waterfall':
        this.stopWaterfall();
        break;

      case 'starPower':
        this.gameState.effectStates.starPowerClicks = 0;
        break;

      case 'shield':
        this.gameState.effectStates.shieldBlocks = 0;
        break;
    }
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–±–∞—Ñ—Ñ
  applyDebuff(debuffDef) {
    if (!this.isActive() || !debuffDef) return;

    // Shield buff –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–µ–±–∞—Ñ—Ñ—ã
    if (this.gameState.buffs.includes('shield') && 
        this.gameState.effectStates.shieldBlocks > 0) {
      this.gameState.effectStates.shieldBlocks--;
      
      eventBus.emit(GameEvents.SHIELD_BLOCK, {
        debuff: debuffDef.name,
        remaining: this.gameState.effectStates.shieldBlocks
      });
      
      if (this.gameState.effectStates.shieldBlocks <= 0) {
        this.removeBuff('shield');
      }
      return;
    }

    console.log(`Applying debuff: ${debuffDef.name}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–∫–∞–µ–º–æ—Å—Ç—å
    const config = EFFECT_CONFIG[debuffDef.id] || {};
    if (!config.stackable && this.gameState.debuffs.includes(debuffDef.id)) {
      this.removeDebuff(debuffDef.id);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–±–∞—Ñ—Ñ–æ–≤
    if (!this.gameState.debuffs.includes(debuffDef.id)) {
      this.gameState.debuffs.push(debuffDef.id);
    }

    eventBus.emit(GameEvents.DEBUFF_APPLIED, {
      id: debuffDef.id,
      name: debuffDef.name
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–µ–±–∞—Ñ—Ñ–∞
    this.applyDebuffEffect(debuffDef);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ—á–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (debuffDef.duration) {
      this.setDebuffExpiration(debuffDef);
    }
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –¥–µ–±–∞—Ñ—Ñ–∞
  applyDebuffEffect(debuffDef) {
    switch (debuffDef.id) {
      case 'explosion':
        this.executeExplosion();
        break;

      case 'lock':
        this.gameState.blockedUntil = Date.now() + 1000;
        break;

      case 'rapid':
        this.applySpeedBoost(false, true); // rapid = anti-speed boost
        break;

      case 'freeze':
        this.gameState.effectStates.frozenCombo = true;
        break;

      case 'taxCollector':
        this.startTaxCollector();
        break;

      case 'decay':
        this.startDecay();
        break;

      case 'ghost':
      case 'heavyClick':
      case 'reverseControls':
      case 'curse':
        // –ü–∞—Å—Å–∏–≤–Ω—ã–µ –¥–µ–±–∞—Ñ—Ñ—ã - —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –ª–æ–≥–∏–∫–µ –∏–≥—Ä—ã
        break;
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–µ—á–µ–Ω–∏–µ –¥–µ–±–∞—Ñ—Ñ–∞
  setDebuffExpiration(debuffDef) {
    // Resilience skill - —É–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–±–∞—Ñ—Ñ–æ–≤
    const debuffReduction = this.getSkillBonus('reduction', 'debuffs');
    const finalDuration = Math.max(0.5, debuffDef.duration * (1 - debuffReduction));

    const timeoutId = this.createTimeout(() => {
      this.removeDebuff(debuffDef.id);
      eventBus.emit(GameEvents.DEBUFF_EXPIRED, {
        id: debuffDef.id,
        name: debuffDef.name
      });
    }, finalDuration * 1000, `debuff-${debuffDef.id}`);

    this.activeEffects.set(debuffDef.id, {
      timeoutId,
      config: EFFECT_CONFIG[debuffDef.id],
      startTime: Date.now()
    });
  }

  // –£–¥–∞–ª–∏—Ç—å –¥–µ–±–∞—Ñ—Ñ
  removeDebuff(debuffId) {
    if (!this.gameState.debuffs.includes(debuffId)) return;

    console.log(`Removing debuff: ${debuffId}`);

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
    this.gameState.debuffs = this.gameState.debuffs.filter(id => id !== debuffId);

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    this.clearEffect(debuffId);

    // –°–Ω–∏–º–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.removeDebuffEffect(debuffId);
  }

  // –°–Ω—è—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –¥–µ–±–∞—Ñ—Ñ–∞
  removeDebuffEffect(debuffId) {
    switch (debuffId) {
      case 'rapid':
        this.applySpeedBoost(true, false); // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        break;

      case 'freeze':
        this.gameState.effectStates.frozenCombo = false;
        break;

      case 'taxCollector':
        this.stopTaxCollector();
        break;

      case 'decay':
        this.stopDecay();
        break;

      case 'heavyClick':
        this.gameState.effectStates.heavyClickRequired = {};
        break;
    }
  }

  // ===== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´ =====

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
  applySpeedBoost(isSpeedBoost, isRapid = false) {
    if (!this.gameState.CONFIG) {
      this.gameState.CONFIG = { rotationSpeed: 0.005 };
    }

    if (isRapid) {
      this.gameState.CONFIG.rotationSpeed *= GAME_CONSTANTS.RAPID_SPEED_MULTIPLIER;
    } else if (isSpeedBoost) {
      this.gameState.CONFIG.rotationSpeed *= GAME_CONSTANTS.SPEED_BOOST_MULTIPLIER;
    } else {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
      this.gameState.CONFIG.rotationSpeed = 0.005;
    }
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å Time Warp
  applyTimeWarp(enabled) {
    // –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ BuildingManager
    // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    eventBus.emit(GameEvents.NOTIFICATION, 
      enabled ? '‚è∞ Time Warp: Buildings work 5x faster!' : 
                '‚è∞ Time Warp ended');
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å Resource Waterfall
  startWaterfall() {
    const intervalId = this.createInterval(() => {
      const resourcePool = getResourcesInGroup('TRADEABLE');
      const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
      const amount = GAME_CONSTANTS.WATERFALL_AMOUNT;
      
      this.gameState.addResource(randomResource, amount);
      eventBus.emit(GameEvents.RESOURCE_CHANGED);
    }, GAME_CONSTANTS.WATERFALL_INTERVAL, 'waterfall');

    this.effectIntervals.set('waterfall', intervalId);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Resource Waterfall
  stopWaterfall() {
    this.clearEffectInterval('waterfall');
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å Roll
  executeRoll() {
    const config = EFFECT_CONFIG.roll;
    const random = Math.random();
    let cumulativeChance = 0;
    
    for (const outcome of config.outcomes) {
      cumulativeChance += outcome.chance;
      if (random <= cumulativeChance) {
        const resourcePool = getResourcesInGroup('TRADEABLE');
        const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
        
        if (outcome.amount !== 0) {
          this.gameState.addResource(randomResource, outcome.amount);
          eventBus.emit(GameEvents.RESOURCE_CHANGED);
        }
        
        eventBus.emit(GameEvents.TEMP_MESSAGE, 
          `üé∞ Roll: ${outcome.message} ${outcome.amount ? `${outcome.amount > 0 ? '+' : ''}${outcome.amount} ${randomResource}` : ''}`);
        break;
      }
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å Mystery Box
  showMysteryBox() {
    const resourcePool = getResourcesInGroup('TRADEABLE');
    const options = [];
    
    while (options.length < 3 && options.length < resourcePool.length) {
      const resource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
      if (!options.includes(resource)) {
        options.push(resource);
      }
    }
    
    if (options.length >= 3) {
      eventBus.emit(GameEvents.MYSTERY_BOX, options);
    }
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å Explosion
  executeExplosion() {
    const resourcePool = getResourcesInGroup('TRADEABLE');
    const randomResource = resourcePool[Math.floor(Math.random() * resourcePool.length)];
    const currentAmount = this.gameState.resources[randomResource] || 0;
    
    // Efficient Storage skill - –∑–∞—â–∏—Ç–∞ –æ—Ç –≤–∑—Ä—ã–≤–æ–≤
    const explosionProtection = this.getSkillBonus('protection', 'explosion');
    const baseDamage = GAME_CONSTANTS.EXPLOSION_DAMAGE_PERCENT;
    const finalDamage = baseDamage * (1 - explosionProtection);
    
    const newAmount = Math.max(0, Math.floor(currentAmount * (1 - finalDamage)));
    this.gameState.resources[randomResource] = newAmount;
    
    const actualLoss = currentAmount - newAmount;
    const message = explosionProtection > 0 ?
      `üí£ Explosion: Lost ${actualLoss} ${randomResource} (${Math.floor(explosionProtection * 100)}% protected)` :
      `üí£ Explosion: Lost ${actualLoss} ${randomResource}`;
    
    eventBus.emit(GameEvents.TEMP_MESSAGE, message);
    eventBus.emit(GameEvents.RESOURCE_CHANGED);
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å Tax Collector
  startTaxCollector() {
    const intervalId = this.createInterval(() => {
      const taxPercent = GAME_CONSTANTS.TAX_COLLECTOR_PERCENT;
      
      Object.keys(this.gameState.resources).forEach(resource => {
        const currentAmount = this.gameState.resources[resource] || 0;
        const taxAmount = Math.floor(currentAmount * taxPercent);
        this.gameState.resources[resource] = Math.max(0, currentAmount - taxAmount);
      });
      
      eventBus.emit(GameEvents.TAX_COLLECTED, { percent: taxPercent * 100 });
      eventBus.emit(GameEvents.RESOURCE_CHANGED);
    }, GAME_CONSTANTS.TAX_COLLECTOR_INTERVAL, 'tax-collector');

    this.effectIntervals.set('taxCollector', intervalId);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Tax Collector
  stopTaxCollector() {
    this.clearEffectInterval('taxCollector');
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å Decay
  startDecay() {
    const intervalId = this.createInterval(() => {
      const decayPercent = 0.01; // 1% –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
      
      Object.keys(this.gameState.resources).forEach(resource => {
        const currentAmount = this.gameState.resources[resource] || 0;
        const decayAmount = Math.floor(currentAmount * decayPercent);
        this.gameState.resources[resource] = Math.max(0, currentAmount - decayAmount);
      });
      
      eventBus.emit(GameEvents.RESOURCE_CHANGED);
    }, 1000, 'decay');

    this.effectIntervals.set('decay', intervalId);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Decay
  stopDecay() {
    this.clearEffectInterval('decay');
  }

  // ===== –£–¢–ò–õ–ò–¢–´ =====

  // –û—á–∏—Å—Ç–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç
  clearEffect(effectId) {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ—á–µ–Ω–∏—è
    if (this.activeEffects.has(effectId)) {
      const effect = this.activeEffects.get(effectId);
      if (effect.timeoutId) {
        this.clearTimeout(effect.timeoutId);
      }
      this.activeEffects.delete(effectId);
    }

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    this.clearEffectInterval(effectId);
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —ç—Ñ—Ñ–µ–∫—Ç–∞
  clearEffectInterval(effectId) {
    if (this.effectIntervals.has(effectId)) {
      const intervalId = this.effectIntervals.get(effectId);
      this.clearInterval(intervalId);
      this.effectIntervals.delete(effectId);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
  getSkillBonus(type, target) {
    if (this.gameState.skillManager && 
        typeof this.gameState.skillManager.getSkillBonus === 'function') {
      return this.gameState.skillManager.getSkillBonus(type, target);
    }
    return 0;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∞—Ö
  getActiveEffectInfo() {
    const info = {
      buffs: [],
      debuffs: [],
      totalActive: 0
    };

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ñ—Ñ–∞—Ö
    this.gameState.buffs.forEach(buffId => {
      const def = getBuffById(buffId);
      const effect = this.activeEffects.get(buffId);
      
      if (def) {
        info.buffs.push({
          id: buffId,
          name: def.name,
          description: def.description,
          timeLeft: effect ? this.calculateTimeLeft(effect) : null,
          category: def.category,
          rarity: def.rarity
        });
      }
    });

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–±–∞—Ñ—Ñ–∞—Ö
    this.gameState.debuffs.forEach(debuffId => {
      const def = getDebuffById(debuffId);
      const effect = this.activeEffects.get(debuffId);
      
      if (def) {
        info.debuffs.push({
          id: debuffId,
          name: def.name,
          description: def.description,
          timeLeft: effect ? this.calculateTimeLeft(effect) : null,
          category: def.category,
          severity: def.severity
        });
      }
    });

    info.totalActive = info.buffs.length + info.debuffs.length;
    return info;
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —ç—Ñ—Ñ–µ–∫—Ç–∞
  calculateTimeLeft(effect) {
    if (!effect.startTime) return null;
    
    const elapsed = Date.now() - effect.startTime;
    const duration = effect.config?.duration || 0;
    
    if (duration <= 0) return null;
    
    const timeLeft = Math.max(0, (duration * 1000) - elapsed);
    return Math.ceil(timeLeft / 1000); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  getEffectStatistics() {
    return {
      activeBuffs: this.gameState.buffs.length,
      activeDebuffs: this.gameState.debuffs.length,
      totalActiveEffects: this.gameState.buffs.length + this.gameState.debuffs.length,
      runningIntervals: this.effectIntervals.size,
      scheduledExpirations: this.activeEffects.size,
      effectStates: {
        starPowerClicks: this.gameState.effectStates.starPowerClicks,
        shieldBlocks: this.gameState.effectStates.shieldBlocks,
        frozenCombo: this.gameState.effectStates.frozenCombo,
        heavyClickZones: Object.keys(this.gameState.effectStates.heavyClickRequired || {}).length
      }
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
  isEffectActive(effectId) {
    return this.gameState.buffs.includes(effectId) || 
           this.gameState.debuffs.includes(effectId);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–∏–ª—É —ç—Ñ—Ñ–µ–∫—Ç–∞ (–¥–ª—è —Å—Ç–∞–∫–∞—é—â–∏—Ö—Å—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤)
  getEffectStrength(effectId) {
    let strength = 0;
    
    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–µ—Å–ª–∏ —Å—Ç–∞–∫–∞—é—Ç—Å—è)
    this.gameState.buffs.forEach(buffId => {
      if (buffId === effectId) strength++;
    });
    
    this.gameState.debuffs.forEach(debuffId => {
      if (debuffId === effectId) strength++;
    });
    
    return strength;
  }

  // –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  clearAllEffects() {
    console.log('üßπ Clearing all effects...');
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    const buffsToRemove = [...this.gameState.buffs];
    const debuffsToRemove = [...this.gameState.debuffs];
    
    buffsToRemove.forEach(buffId => this.removeBuff(buffId));
    debuffsToRemove.forEach(debuffId => this.removeDebuff(debuffId));
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.activeEffects.clear();
    this.effectIntervals.clear();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.gameState.effectStates = this.getDefaultEffectStates();
    this.gameState.blockedUntil = 0;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
    if (this.gameState.CONFIG) {
      this.gameState.CONFIG.rotationSpeed = 0.005;
    }
    
    console.log('‚úÖ All effects cleared');
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –ø–æ ID (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  forceApplyEffect(effectId, isDebuff = false) {
    const def = isDebuff ? getDebuffById(effectId) : getBuffById(effectId);
    
    if (!def) {
      console.warn(`Unknown effect: ${effectId}`);
      return false;
    }
    
    if (isDebuff) {
      this.applyDebuff(def);
    } else {
      this.applyBuff(def);
    }
    
    return true;
  }

  // –ü—Ä–æ–¥–ª–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  extendEffect(effectId, additionalTime) {
    if (!this.activeEffects.has(effectId)) {
      console.warn(`Effect ${effectId} is not active`);
      return false;
    }
    
    const effect = this.activeEffects.get(effectId);
    if (effect.timeoutId) {
      // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä
      this.clearTimeout(effect.timeoutId);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
      const newTimeoutId = this.createTimeout(() => {
        const isDebuff = this.gameState.debuffs.includes(effectId);
        if (isDebuff) {
          this.removeDebuff(effectId);
          eventBus.emit(GameEvents.DEBUFF_EXPIRED, { id: effectId });
        } else {
          this.removeBuff(effectId);
          eventBus.emit(GameEvents.BUFF_EXPIRED, { id: effectId });
        }
      }, additionalTime, `extended-${effectId}`);
      
      effect.timeoutId = newTimeoutId;
      this.activeEffects.set(effectId, effect);
      
      console.log(`Extended effect ${effectId} by ${additionalTime}ms`);
      return true;
    }
    
    return false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getEffectsByCategory(category) {
    const effects = {
      buffs: [],
      debuffs: []
    };
    
    this.gameState.buffs.forEach(buffId => {
      const def = getBuffById(buffId);
      if (def && def.category === category) {
        effects.buffs.push({
          id: buffId,
          definition: def,
          active: true
        });
      }
    });
    
    this.gameState.debuffs.forEach(debuffId => {
      const def = getDebuffById(debuffId);
      if (def && def.category === category) {
        effects.debuffs.push({
          id: debuffId,
          definition: def,
          active: true
        });
      }
    });
    
    return effects;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∞–º
  getEffectRecommendations() {
    const recommendations = [];
    const stats = this.getEffectStatistics();
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ Shield –µ—Å–ª–∏ –º–Ω–æ–≥–æ –¥–µ–±–∞—Ñ—Ñ–æ–≤
    if (stats.activeDebuffs >= 2 && !this.gameState.buffs.includes('shield')) {
      recommendations.push({
        type: 'defense',
        message: 'Consider using Shield buff to block incoming debuffs',
        priority: 'high'
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∫–æ–º–±–æ —ç—Ñ—Ñ–µ–∫—Ç–∞–º
    if (this.gameState.combo.count >= 10 && !this.gameState.buffs.includes('frenzy')) {
      recommendations.push({
        type: 'combo',
        message: 'High combo! Frenzy buff would multiply your gold gain',
        priority: 'medium'
      });
    }
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–±–∞—Ñ—Ñ–∞—Ö
    const severeDebuffs = this.gameState.debuffs.filter(debuffId => {
      const def = getDebuffById(debuffId);
      return def && def.severity === 'severe';
    });
    
    if (severeDebuffs.length > 0) {
      recommendations.push({
        type: 'warning',
        message: `You have ${severeDebuffs.length} severe debuff(s) active!`,
        priority: 'urgent'
      });
    }
    
    return recommendations;
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ BuffManager cleanup started');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    this.clearAllEffects();
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    super.destroy();
    
    console.log('‚úÖ BuffManager destroyed');
  }
}