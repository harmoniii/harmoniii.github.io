// game.js - –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É
import { GameCore } from './core/GameCore.js';
import { eventBus, GameEvents } from './core/GameEvents.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
let gameCore = null;

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function main() {
  try {
    console.log('üöÄ Starting Advanced Clicker v0.8.0...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    setupErrorHandlers();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setupPageUnloadHandler();
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ —è–¥—Ä–æ
    gameCore = new GameCore();
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.gameCore = gameCore;
    window.eventBus = eventBus;
    window.GameEvents = GameEvents;
    
    console.log('‚úÖ Game started successfully');
    
  } catch (error) {
    console.error('üíÄ Critical error in main:', error);
    handleCriticalError(error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
function setupErrorHandlers() {
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  window.addEventListener('error', (event) => {
    console.error('üíÄ Global error:', event.error);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    if (gameCore && gameCore.isActive()) {
      try {
        gameCore.autoSave();
        console.log('‚úÖ Emergency save completed');
      } catch (saveError) {
        console.error('‚ùå Emergency save failed:', saveError);
      }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
  window.addEventListener('unhandledrejection', (event) => {
    console.error('üíÄ Unhandled promise rejection:', event.reason);
    event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function setupPageUnloadHandler() {
  const cleanup = () => {
    console.log('üëã Page unloading, cleaning up...');
    
    if (gameCore && gameCore.isActive()) {
      try {
        gameCore.autoSave();
        gameCore.destroy();
        console.log('‚úÖ Cleanup completed');
      } catch (error) {
        console.warn('‚ö†Ô∏è Error during cleanup:', error);
      }
    }
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è
  window.addEventListener('beforeunload', cleanup);
  window.addEventListener('unload', cleanup);
  window.addEventListener('pagehide', cleanup);
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
  document.addEventListener('visibilitychange', () => {
    if (document.hidden && gameCore && gameCore.isActive()) {
      try {
        gameCore.autoSave();
      } catch (error) {
        console.warn('‚ö†Ô∏è Error saving on visibility change:', error);
      }
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
function handleCriticalError(error) {
  const errorMessage = `Critical game error: ${error.message}`;
  
  // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏
  const errorDiv = document.createElement('div');
  errorDiv.style.cssText = `
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: linear-gradient(135deg, #ff4444 0%, #cc0000 100%);
    color: white;
    padding: 30px;
    border-radius: 15px;
    z-index: 10000;
    text-align: center;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    box-shadow: 0 10px 30px rgba(0,0,0,0.5);
    max-width: 400px;
    border: 2px solid #ffffff20;
  `;
  
  errorDiv.innerHTML = `
    <h2 style="margin-top: 0; font-size: 1.5em;">üö® Critical Error</h2>
    <p style="margin: 15px 0; line-height: 1.4;">${errorMessage}</p>
    <div style="margin-top: 20px;">
      <button onclick="location.reload()" style="
        background: white;
        color: #ff4444;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: bold;
        margin: 0 5px;
        font-size: 14px;
        transition: all 0.3s ease;
      " onmouseover="this.style.background='#f0f0f0'" onmouseout="this.style.background='white'">
        üîÑ Reload Game
      </button>
      <button onclick="this.parentElement.parentElement.remove()" style="
        background: transparent;
        color: white;
        border: 2px solid white;
        padding: 10px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: bold;
        margin: 0 5px;
        font-size: 14px;
        transition: all 0.3s ease;
      " onmouseover="this.style.background='rgba(255,255,255,0.1)'" onmouseout="this.style.background='transparent'">
        ‚úï Close
      </button>
    </div>
    <p style="margin-top: 15px; font-size: 12px; opacity: 0.8;">
      Your progress should be automatically saved.
    </p>
  `;
  
  document.body.appendChild(errorDiv);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏)
window.getGameStats = function() {
  if (gameCore && gameCore.isActive()) {
    return gameCore.getGameStats();
  }
  return null;
};

window.getGameState = function() {
  if (gameCore && gameCore.isActive()) {
    return gameCore.getGameState();
  }
  return null;
};

window.getManagers = function() {
  if (gameCore && gameCore.isActive()) {
    return gameCore.getManagers();
  }
  return null;
};

window.emergencySave = function() {
  if (gameCore && gameCore.isActive()) {
    try {
      gameCore.autoSave();
      console.log('‚úÖ Emergency save completed');
      return true;
    } catch (error) {
      console.error('‚ùå Emergency save failed:', error);
      return false;
    }
  }
  console.warn('‚ö†Ô∏è Game not active, cannot save');
  return false;
};

window.forceReload = function() {
  console.log('üîÑ Forcing page reload...');
  window.location.reload(true);
};

window.clearAllData = function() {
  if (confirm('‚ö†Ô∏è This will delete ALL game data! Are you sure?')) {
    try {
      localStorage.clear();
      sessionStorage.clear();
      console.log('üßπ All data cleared');
      window.location.reload();
    } catch (error) {
      console.error('‚ùå Failed to clear data:', error);
    }
  }
};

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DOM
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', main);
} else {
  main();
}