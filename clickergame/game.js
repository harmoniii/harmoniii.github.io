// game.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–æ–≤—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
import { EventBus }       from './eventBus.js';
import { FeatureManager } from './featureManager.js';
import { BuildingManager } from './buildings.js';
import { SkillManager }   from './skills.js';
import { MarketManager }  from './market.js';
import { loadState, saveState } from './storage.js';
import UIManager          from './ui.js';
import { CONFIG }         from './config.js';

let state = loadState();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
let fm = new FeatureManager(state);
let bm = new BuildingManager(state);
let sm = new SkillManager(state);
let mm = new MarketManager(state);

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
state.featureMgr = fm;
state.buildingManager = bm;
state.skillManager = sm;
state.marketManager = mm;
state.CONFIG = CONFIG; // –î–æ–±–∞–≤–ª—è–µ–º CONFIG –¥–ª—è BuffManager

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
new UIManager(state);

const canvas = document.getElementById('gameCanvas');
canvas.width = CONFIG.canvasSize;
canvas.height = CONFIG.canvasSize;
const ctx = canvas.getContext('2d');
let angle = 0;

function getClickAngle(e) {
  const r = canvas.getBoundingClientRect();
  const x = e.clientX - r.left - canvas.width / 2;
  const y = e.clientY - r.top - canvas.height / 2;
  return Math.atan2(y, x) - angle;
}

canvas.addEventListener('click', e => EventBus.emit('click', getClickAngle(e)));
canvas.addEventListener('touchstart', e => {
  e.preventDefault();
  EventBus.emit('click', getClickAngle(e.touches[0]));
});

// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥—ã skill points –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
let lastComboCheck = 0;
let lastResourceCheck = 0;

function checkAchievements() {
  const now = Date.now();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–º–±–æ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  if (now - lastComboCheck > 10000) {
    lastComboCheck = now;
    
    if (state.combo.count >= 10) {
      sm.addSkillPoints(1);
    }
    if (state.combo.count >= 25) {
      sm.addSkillPoints(2);
    }
    if (state.combo.count >= 50) {
      sm.addSkillPoints(5);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  if (now - lastResourceCheck > 30000) {
    lastResourceCheck = now;
    
    const totalResources = Object.values(state.resources)
      .reduce((sum, val) => sum + val, 0);
    
    if (totalResources >= 1000) {
      sm.addSkillPoints(1);
    }
    if (totalResources >= 5000) {
      sm.addSkillPoints(3);
    }
    if (totalResources >= 10000) {
      sm.addSkillPoints(5);
    }
  }
}

function loop() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  
  const total = 2 * Math.PI;
  const step = total / fm.zones.length;
  
  fm.zones.forEach(z => {
    const start = z.index * step + angle;
    const end = (z.index + 1) * step + angle;
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞
    ctx.beginPath();
    ctx.moveTo(CONFIG.canvasSize / 2, CONFIG.canvasSize / 2);
    ctx.arc(CONFIG.canvasSize / 2, CONFIG.canvasSize / 2, CONFIG.canvasSize / 2 - 10, start, end);
    ctx.closePath();
    ctx.fillStyle = '#888';
    ctx.fill();
    ctx.strokeStyle = '#333';
    ctx.lineWidth = 1;
    ctx.stroke();
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ
    if (state.targetZone === z.index) {
      ctx.strokeStyle = 'red';
      ctx.lineWidth = 4;
      ctx.beginPath();
      ctx.moveTo(CONFIG.canvasSize / 2, CONFIG.canvasSize / 2);
      ctx.arc(CONFIG.canvasSize / 2, CONFIG.canvasSize / 2, CONFIG.canvasSize / 2 - 10, start, end);
      ctx.closePath();
      ctx.stroke();
    }
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–π –∑–æ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–≤—ã–∫)
    if (sm && sm.skills.zonePreview && sm.skills.zonePreview.level > 0) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–æ–Ω—É –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π
      const nextZone = (state.targetZone + 1) % fm.zones.length;
      if (nextZone === z.index) {
        ctx.strokeStyle = 'yellow';
        ctx.lineWidth = 2;
        ctx.setLineDash([10, 5]);
        ctx.beginPath();
        ctx.moveTo(CONFIG.canvasSize / 2, CONFIG.canvasSize / 2);
        ctx.arc(CONFIG.canvasSize / 2, CONFIG.canvasSize / 2, CONFIG.canvasSize / 2 - 10, start, end);
        ctx.closePath();
        ctx.stroke();
        ctx.setLineDash([]);
      }
    }
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  checkAchievements();
  
  saveState(state);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
  let rotationSpeed = CONFIG.rotationSpeed;
  
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–±–∞—Ñ—Ñ rapid
  if (state.debuffs && state.debuffs.includes('rapid')) {
    rotationSpeed *= 5;
  }
  
  angle += rotationSpeed;
  requestAnimationFrame(loop);
}

loop();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π)
EventBus.subscribe('gameReset', () => {
  console.log('üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏...');
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
  if (fm) fm.stopAllEffects();
  if (bm) bm.stopAllProduction();
  if (sm) sm.stopAllGeneration();
  
  // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  fm = new FeatureManager(state);
  bm = new BuildingManager(state);
  sm = new SkillManager(state);
  mm = new MarketManager(state);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  state.featureMgr = fm;
  state.buildingManager = bm;
  state.skillManager = sm;
  state.marketManager = mm;
  state.CONFIG = CONFIG;
  
  console.log('‚úÖ –ò–≥—Ä–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});