// game.js - –ü–æ–ª–Ω–∞—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ—Å—É—Ä—Å–∞–º–∏
import { GameCore } from './core/GameCore.js';
import { eventBus, GameEvents } from './core/GameEvents.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
let gameCore = null;
let gameState = null;
let managers = {
  feature: null,
  building: null,
  skill: null,
  market: null,
  ui: null
};

let gameLoopId = null;
let achievementTimeouts = {
  combo: 0,
  resource: 0
};

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
function initializeGame() {
  try {
    console.log('üéÆ Initializing game...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gameState = loadState();
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 9: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if (!gameState) {
      throw new Error('Failed to load game state');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    managers.feature = new FeatureManager(gameState);
    managers.building = new BuildingManager(gameState);
    managers.skill = new SkillManager(gameState);
    managers.market = new MarketManager(gameState);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    gameState.featureMgr = managers.feature;
    gameState.buildingManager = managers.building;
    gameState.skillManager = managers.skill;
    gameState.marketManager = managers.market;
    gameState.CONFIG = CONFIG;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
    managers.ui = new UIManager(gameState);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º canvas –∏ –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    initializeCanvas();
    startGameLoop();
    
    console.log('‚úÖ Game initialized successfully');
    
  } catch (error) {
    console.error('üíÄ Critical error during game initialization:', error);
    handleInitializationError(error);
  }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function handleInitializationError(error) {
  const errorMessage = `Game initialization failed: ${error.message}`;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const errorDiv = document.createElement('div');
  errorDiv.style.position = 'fixed';
  errorDiv.style.top = '50%';
  errorDiv.style.left = '50%';
  errorDiv.style.transform = 'translate(-50%, -50%)';
  errorDiv.style.background = '#ff4444';
  errorDiv.style.color = 'white';
  errorDiv.style.padding = '20px';
  errorDiv.style.borderRadius = '10px';
  errorDiv.style.zIndex = '10000';
  errorDiv.style.textAlign = 'center';
  errorDiv.innerHTML = `
    <h3>üíÄ Game Initialization Error</h3>
    <p>${errorMessage}</p>
    <button onclick="location.reload()">üîÑ Reload Page</button>
  `;
  
  document.body.appendChild(errorDiv);
}

// Canvas –∏ –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
let canvas, ctx, angle = 0;

function initializeCanvas() {
  canvas = document.getElementById('gameCanvas');
  if (!canvas) {
    throw new Error('Game canvas not found');
  }
  
  canvas.width = CONFIG.canvasSize;
  canvas.height = CONFIG.canvasSize;
  ctx = canvas.getContext('2d');
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 12: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–ª–∏–∫–æ–≤
  setupCanvasEventHandlers();
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
  angle = 0;
  gameState.currentRotation = 0;
}

function setupCanvasEventHandlers() {
  const getClickAngle = (e) => {
    const r = canvas.getBoundingClientRect();
    const x = e.clientX - r.left - canvas.width / 2;
    const y = e.clientY - r.top - canvas.height / 2;
    return Math.atan2(y, x) - angle;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –º—ã—à–∏
  const clickHandler = (e) => {
    e.preventDefault();
    const clickAngle = getClickAngle(e);
    EventBus.emit('click', clickAngle);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏–π
  const touchHandler = (e) => {
    e.preventDefault();
    if (e.touches && e.touches.length > 0) {
      const clickAngle = getClickAngle(e.touches[0]);
      EventBus.emit('click', clickAngle);
    }
  };

  canvas.addEventListener('click', clickHandler);
  canvas.addEventListener('touchstart', touchHandler);
  
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
  canvas.addEventListener('contextmenu', (e) => e.preventDefault());
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 14: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø—Ä–æ–±–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏
function checkAchievements() {
  if (!gameState || !managers.skill) return;
  
  const now = Date.now();
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 14: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∫–æ–º–±–æ
  if (now - achievementTimeouts.combo > GAME_CONSTANTS.COMBO_CHECK_INTERVAL) {
    achievementTimeouts.combo = now;
    
    try {
      const comboCount = gameState.combo?.count || 0;
      
      if (comboCount >= GAME_CONSTANTS.COMBO_MILESTONE_3) {
        managers.skill.addSkillPoints(5);
      } else if (comboCount >= GAME_CONSTANTS.COMBO_MILESTONE_2) {
        managers.skill.addSkillPoints(2);
      } else if (comboCount >= GAME_CONSTANTS.COMBO_MILESTONE_1) {
        managers.skill.addSkillPoints(1);
      }
    } catch (error) {
      console.warn('Error in combo achievements:', error);
    }
  }
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 14: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
  if (now - achievementTimeouts.resource > GAME_CONSTANTS.RESOURCE_CHECK_INTERVAL) {
    achievementTimeouts.resource = now;
    
    try {
      const totalResources = Object.values(gameState.resources || {})
        .filter(val => typeof val === 'number' && !isNaN(val))
        .reduce((sum, val) => sum + val, 0);
      
      if (totalResources >= GAME_CONSTANTS.RESOURCE_MILESTONE_3) {
        managers.skill.addSkillPoints(5);
      } else if (totalResources >= GAME_CONSTANTS.RESOURCE_MILESTONE_2) {
        managers.skill.addSkillPoints(3);
      } else if (totalResources >= GAME_CONSTANTS.RESOURCE_MILESTONE_1) {
        managers.skill.addSkillPoints(1);
      }
    } catch (error) {
      console.warn('Error in resource achievements:', error);
    }
  }
}

// –ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
  if (!gameState || !managers.feature || !ctx) {
    console.warn('Game loop running without proper initialization');
    return;
  }
  
  try {
    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // –†–∏—Å—É–µ–º –∑–æ–Ω—ã
    drawZones();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    checkAchievements();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    saveState(gameState);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
    updateRotation();
    
  } catch (error) {
    console.warn('Error in game loop:', error);
  }
  
  // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
  gameLoopId = requestAnimationFrame(gameLoop);
}

function drawZones() {
  const total = 2 * Math.PI;
  const step = total / managers.feature.zones.length;
  
  managers.feature.zones.forEach(zone => {
    const start = zone.index * step + angle;
    const end = (zone.index + 1) * step + angle;
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ –∑–æ–Ω—ã
    ctx.beginPath();
    ctx.moveTo(CONFIG.canvasSize / 2, CONFIG.canvasSize / 2);
    ctx.arc(CONFIG.canvasSize / 2, CONFIG.canvasSize / 2, 
            CONFIG.canvasSize / 2 - GAME_CONSTANTS.CANVAS_BORDER_WIDTH, start, end);
    ctx.closePath();
    ctx.fillStyle = '#888';
    ctx.fill();
    ctx.strokeStyle = '#333';
    ctx.lineWidth = 1;
    ctx.stroke();
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã
    if (gameState.targetZone === zone.index) {
      ctx.strokeStyle = 'red';
      ctx.lineWidth = GAME_CONSTANTS.TARGET_ZONE_BORDER_WIDTH;
      ctx.beginPath();
      ctx.moveTo(CONFIG.canvasSize / 2, CONFIG.canvasSize / 2);
      ctx.arc(CONFIG.canvasSize / 2, CONFIG.canvasSize / 2, 
              CONFIG.canvasSize / 2 - GAME_CONSTANTS.CANVAS_BORDER_WIDTH, start, end);
      ctx.closePath();
      ctx.stroke();
    }
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–π –∑–æ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–≤—ã–∫)
    if (managers.skill?.skills?.zonePreview?.level > 0) {
      const nextZone = (gameState.targetZone + 1) % managers.feature.zones.length;
      if (nextZone === zone.index) {
        ctx.strokeStyle = 'yellow';
        ctx.lineWidth = GAME_CONSTANTS.PREVIEW_ZONE_BORDER_WIDTH;
        ctx.setLineDash([10, 5]);
        ctx.beginPath();
        ctx.moveTo(CONFIG.canvasSize / 2, CONFIG.canvasSize / 2);
        ctx.arc(CONFIG.canvasSize / 2, CONFIG.canvasSize / 2, 
                CONFIG.canvasSize / 2 - GAME_CONSTANTS.CANVAS_BORDER_WIDTH, start, end);
        ctx.closePath();
        ctx.stroke();
        ctx.setLineDash([]);
      }
    }
  });
}

function updateRotation() {
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
  let rotationSpeed = CONFIG.rotationSpeed;
  
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ–±–∞—Ñ—Ñ rapid
  if (gameState.debuffs && gameState.debuffs.includes('rapid')) {
    rotationSpeed *= GAME_CONSTANTS.RAPID_SPEED_MULTIPLIER;
  }
  
  angle += rotationSpeed;
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 12: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
  gameState.currentRotation = angle;
}

function startGameLoop() {
  if (gameLoopId) {
    cancelAnimationFrame(gameLoopId);
  }
  gameLoopId = requestAnimationFrame(gameLoop);
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1, 2: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
function setupGameResetHandler() {
  EventBus.subscribe('gameReset', () => {
    console.log('üîÑ Game reset initiated...');
    
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
      if (gameLoopId) {
        cancelAnimationFrame(gameLoopId);
        gameLoopId = null;
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
      stopAllManagers();
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      gameState = null;
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
      angle = 0;
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      achievementTimeouts.combo = 0;
      achievementTimeouts.resource = 0;
      
      console.log('‚úÖ Game reset preparation complete');
      
      // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        initializeGame();
      }, 100);
      
    } catch (error) {
      console.error('Error during game reset:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      window.location.reload();
    }
  });
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
function stopAllManagers() {
  try {
    if (managers.feature && typeof managers.feature.stopAllEffects === 'function') {
      managers.feature.stopAllEffects();
      managers.feature = null;
    }
  } catch (e) {
    console.warn('Error stopping FeatureManager:', e);
  }
  
  try {
    if (managers.building && typeof managers.building.stopAllProduction === 'function') {
      managers.building.stopAllProduction();
      managers.building = null;
    }
  } catch (e) {
    console.warn('Error stopping BuildingManager:', e);
  }
  
  try {
    if (managers.skill && typeof managers.skill.stopAllGeneration === 'function') {
      managers.skill.stopAllGeneration();
      managers.skill = null;
    }
  } catch (e) {
    console.warn('Error stopping SkillManager:', e);
  }
  
  try {
    if (managers.ui && typeof managers.ui.destroy === 'function') {
      managers.ui.destroy();
      managers.ui = null;
    }
  } catch (e) {
    console.warn('Error stopping UIManager:', e);
  }
  
  // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
  managers.market = null;
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function setupPageUnloadHandler() {
  const cleanup = () => {
    console.log('üßπ Page unloading, cleaning up...');
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (gameState) {
        saveState(gameState);
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
      if (gameLoopId) {
        cancelAnimationFrame(gameLoopId);
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
      stopAllManagers();
      
    } catch (error) {
      console.warn('Error during cleanup:', error);
    }
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è
  window.addEventListener('beforeunload', cleanup);
  window.addEventListener('unload', cleanup);
  window.addEventListener('pagehide', cleanup);
  
  // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
  document.addEventListener('visibilitychange', () => {
    if (document.hidden && gameState) {
      try {
        saveState(gameState);
      } catch (error) {
        console.warn('Error saving on visibility change:', error);
      }
    }
  });
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
function setupErrorHandlers() {
  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  window.addEventListener('error', (event) => {
    console.error('üíÄ Global error:', event.error);
    
    // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (gameState) {
      try {
        saveState(gameState);
        console.log('‚úÖ State saved after error');
      } catch (saveError) {
        console.error('Failed to save state after error:', saveError);
      }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
  window.addEventListener('unhandledrejection', (event) => {
    console.error('üíÄ Unhandled promise rejection:', event.reason);
  });
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 18: –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
// –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
function main() {
  console.log('üöÄ Starting Advanced Clicker v0.7.4...');
  
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setupErrorHandlers();
    setupPageUnloadHandler();
    setupGameResetHandler();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
    initializeGame();
    
  } catch (error) {
    console.error('üíÄ Critical error in main:', error);
    handleInitializationError(error);
  }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
window.emergencySave = function() {
  if (gameState) {
    try {
      saveState(gameState);
      console.log('‚úÖ Emergency save completed');
      return true;
    } catch (error) {
      console.error('‚ùå Emergency save failed:', error);
      return false;
    }
  } else {
    console.warn('‚ö†Ô∏è No game state to save');
    return false;
  }
};

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
window.getGameState = function() {
  return gameState;
};

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
window.getManagers = function() {
  return managers;
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', main);
} else {
  main();
}