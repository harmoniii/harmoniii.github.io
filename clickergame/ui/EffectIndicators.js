// ui/EffectIndicators.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
import { CleanupMixin } from '../core/CleanupManager.js';
import { BUFF_DEFS, DEBUFF_DEFS } from '../effects/EffectDefinitions.js';

export class EffectIndicators extends CleanupMixin {
  constructor(gameState) {
    super();
    this.gameState = gameState;
    this.container = null;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    this.currentIndicators = new Set();
    this.lastUpdateTime = 0;
    
    this.initializeContainer();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  initializeContainer() {
    this.container = document.getElementById('effect-indicators');
    
    if (!this.container) {
      this.createContainer();
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  createContainer() {
    this.container = document.createElement('div');
    this.container.id = 'effect-indicators';
    this.container.className = 'effect-indicators';
    document.body.appendChild(this.container);
    
    this.onDestroy(() => {
      if (document.body.contains(this.container)) {
        document.body.removeChild(this.container);
      }
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
  update() {
    if (!this.isActive() || !this.container) return;
    
    const now = Date.now();
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (now - this.lastUpdateTime < 100) return;
    this.lastUpdateTime = now;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    const currentBuffs = this.gameState.buffs || [];
    const currentDebuffs = this.gameState.debuffs || [];
    const allCurrentEffects = new Set([...currentBuffs, ...currentDebuffs]);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.removeInactiveIndicators(allCurrentEffects);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –Ω–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.addNewIndicators(currentBuffs, currentDebuffs);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫
    this.currentIndicators = new Set(allCurrentEffects);
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  removeInactiveIndicators(activeEffects) {
    const existingIndicators = this.container.querySelectorAll('.effect-indicator');
    
    existingIndicators.forEach(indicator => {
      const effectId = indicator.getAttribute('data-effect-id');
      
      if (effectId && !activeEffects.has(effectId)) {
        console.log(`üóëÔ∏è Removing indicator for inactive effect: ${effectId}`);
        this.animateEffectRemoved(effectId);
      }
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  addNewIndicators(currentBuffs, currentDebuffs) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –±–∞—Ñ—Ñ–æ–≤
    currentBuffs.forEach(buffId => {
      if (!this.hasIndicator(buffId)) {
        const buffDef = this.findBuffDefinition(buffId);
        if (buffDef) {
          const indicator = this.createBuffIndicator(buffDef);
          this.container.appendChild(indicator);
        }
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–µ–±–∞—Ñ—Ñ–æ–≤
    currentDebuffs.forEach(debuffId => {
      if (!this.hasIndicator(debuffId)) {
        const debuffDef = this.findDebuffDefinition(debuffId);
        if (debuffDef) {
          const indicator = this.createDebuffIndicator(debuffDef);
          this.container.appendChild(indicator);
        }
      }
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
  hasIndicator(effectId) {
    return this.container.querySelector(`[data-effect-id="${effectId}"]`) !== null;
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  clearContainer() {
    if (this.container) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–ª–∞–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
      const indicators = this.container.querySelectorAll('.effect-indicator');
      indicators.forEach(indicator => {
        indicator.style.transition = 'all 0.3s ease-out';
        indicator.style.opacity = '0';
        indicator.style.transform = 'translateX(-100%) scale(0.5)';
      });
      
      // –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      this.createTimeout(() => {
        if (this.container) {
          this.container.innerHTML = '';
        }
      }, 300);
    }
    
    this.currentIndicators.clear();
  }

  // –ù–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞—Ñ—Ñ–∞
  findBuffDefinition(buffId) {
    return BUFF_DEFS.find(buff => buff.id === buffId);
  }

  // –ù–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–±–∞—Ñ—Ñ–∞
  findDebuffDefinition(debuffId) {
    return DEBUFF_DEFS.find(debuff => debuff.id === debuffId);
  }

  // –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±–∞—Ñ—Ñ–∞
  createBuffIndicator(buffDef) {
    const indicator = document.createElement('div');
    indicator.className = 'effect-indicator buff-indicator';
    indicator.setAttribute('data-effect-id', buffDef.id);
    
    const icon = this.extractIcon(buffDef.name);
    const name = this.extractName(buffDef.name);
    
    indicator.innerHTML = `
      <span class="effect-icon">${icon}</span>
      <span class="effect-name">${name}</span>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    indicator.title = this.createEffectTooltip(buffDef);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    this.animateIndicatorAppearance(indicator, 'buff');
    
    return indicator;
  }

  // –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–µ–±–∞—Ñ—Ñ–∞
  createDebuffIndicator(debuffDef) {
    const indicator = document.createElement('div');
    indicator.className = 'effect-indicator debuff-indicator';
    indicator.setAttribute('data-effect-id', debuffDef.id);
    
    const icon = this.extractIcon(debuffDef.name);
    const name = this.extractName(debuffDef.name);
    
    indicator.innerHTML = `
      <span class="effect-icon">${icon}</span>
      <span class="effect-name">${name}</span>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    indicator.title = this.createEffectTooltip(debuffDef);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    this.animateIndicatorAppearance(indicator, 'debuff');
    
    return indicator;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  animateIndicatorAppearance(indicator, type) {
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    indicator.style.opacity = '0';
    indicator.style.transform = 'translateX(-100%) scale(0.8)';
    indicator.style.transition = 'none';
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–∞–ª—ã–π —Ç–∞–π–º–∞—É—Ç
    this.createTimeout(() => {
      indicator.style.transition = 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)';
      indicator.style.opacity = '1';
      indicator.style.transform = 'translateX(0) scale(1)';
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –º–µ—Ä—Ü–∞–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –¥–µ–±–∞—Ñ—Ñ–æ–≤
      if (type === 'debuff') {
        this.createTimeout(() => {
          indicator.style.boxShadow = '0 4px 12px rgba(244, 67, 54, 0.8)';
          this.createTimeout(() => {
            indicator.style.boxShadow = '';
          }, 200);
        }, 400);
      }
    }, 50);
  }

  // –ò–∑–≤–ª–µ—á—å –∏–∫–æ–Ω–∫—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
  extractIcon(effectName) {
    const parts = effectName.split(' ');
    return parts[0] || '‚ùì';
  }

  // –ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –∏–∫–æ–Ω–∫–∏
  extractName(effectName) {
    const parts = effectName.split(' ');
    return parts.slice(1).join(' ') || effectName;
  }

  // –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
  createEffectTooltip(effectDef) {
    let tooltip = `${effectDef.name}\n${effectDef.description}`;
    
    if (effectDef.duration) {
      tooltip += `\nDuration: ${effectDef.duration} seconds`;
    } else {
      tooltip += '\nInstant effect';
    }
    
    if (effectDef.rarity) {
      tooltip += `\nRarity: ${effectDef.rarity}`;
    }
    
    if (effectDef.severity) {
      tooltip += `\nSeverity: ${effectDef.severity}`;
    }
    
    return tooltip;
  }

  // –ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
  animateEffectAdded(effectId, isPositive = true) {
    if (!this.container) return;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    if (this.hasIndicator(effectId)) {
      console.log(`Indicator for ${effectId} already exists, skipping animation`);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const tempIndicator = document.createElement('div');
    tempIndicator.className = `effect-indicator ${isPositive ? 'buff' : 'debuff'}-indicator effect-adding`;
    tempIndicator.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(2);
      z-index: 10000;
      opacity: 0.8;
      pointer-events: none;
    `;
    
    const effectDef = isPositive ? 
      this.findBuffDefinition(effectId) : 
      this.findDebuffDefinition(effectId);
    
    if (effectDef) {
      const icon = this.extractIcon(effectDef.name);
      tempIndicator.innerHTML = `<span class="effect-icon">${icon}</span>`;
      
      document.body.appendChild(tempIndicator);
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
      this.createTimeout(() => {
        const containerRect = this.container.getBoundingClientRect();
        tempIndicator.style.transition = 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        tempIndicator.style.top = `${containerRect.top + 20}px`;
        tempIndicator.style.left = `${containerRect.left + 20}px`;
        tempIndicator.style.transform = 'scale(1)';
        tempIndicator.style.opacity = '0';
        
        this.createTimeout(() => {
          if (document.body.contains(tempIndicator)) {
            document.body.removeChild(tempIndicator);
          }
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
          this.update();
        }, 800);
      }, 100);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
  animateEffectRemoved(effectId) {
    if (!this.container) return;
    
    const indicator = this.container.querySelector(`[data-effect-id="${effectId}"]`);
    if (!indicator) {
      console.log(`Indicator for ${effectId} not found for removal`);
      return;
    }
    
    console.log(`üé¨ Animating removal of effect: ${effectId}`);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    indicator.style.transition = 'all 0.4s cubic-bezier(0.55, 0.055, 0.675, 0.19)';
    indicator.style.opacity = '0';
    indicator.style.transform = 'translateX(-100%) scale(0.5)';
    indicator.style.filter = 'blur(2px)';
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ DOM –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    this.createTimeout(() => {
      if (indicator.parentNode) {
        indicator.parentNode.removeChild(indicator);
        console.log(`üóëÔ∏è Removed indicator for ${effectId} from DOM`);
      }
    }, 400);
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  showSpecialStates() {
    if (!this.gameState.effectStates) return;
    
    const specialStates = [];
    const states = this.gameState.effectStates;
    
    if (states.starPowerClicks > 0) {
      specialStates.push({
        icon: '‚≠ê',
        name: 'Star Power',
        detail: `${states.starPowerClicks} clicks left`,
        id: 'special-star-power'
      });
    }
    
    if (states.shieldBlocks > 0) {
      specialStates.push({
        icon: 'üõ°Ô∏è',
        name: 'Shield',
        detail: `${states.shieldBlocks} blocks left`,
        id: 'special-shield'
      });
    }
    
    if (states.frozenCombo) {
      specialStates.push({
        icon: '‚ùÑÔ∏è',
        name: 'Frozen Combo',
        detail: 'Combo cannot grow',
        id: 'special-frozen'
      });
    }
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    const oldSpecialIndicators = this.container.querySelectorAll('.special-indicator');
    oldSpecialIndicators.forEach(indicator => {
      const id = indicator.getAttribute('data-effect-id');
      if (!specialStates.find(s => s.id === id)) {
        this.animateEffectRemoved(id);
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    specialStates.forEach(state => {
      if (!this.hasIndicator(state.id)) {
        const indicator = this.createSpecialStateIndicator(state);
        this.container.appendChild(indicator);
      }
    });
  }

  // –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  createSpecialStateIndicator(state) {
    const indicator = document.createElement('div');
    indicator.className = 'effect-indicator special-indicator';
    indicator.setAttribute('data-effect-id', state.id);
    
    indicator.innerHTML = `
      <span class="effect-icon">${state.icon}</span>
      <span class="effect-name">${state.name}</span>
    `;
    
    indicator.title = `${state.name}\n${state.detail}`;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    this.animateIndicatorAppearance(indicator, 'special');
    
    return indicator;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  getActiveEffectCount() {
    const buffCount = this.gameState.buffs ? this.gameState.buffs.length : 0;
    const debuffCount = this.gameState.debuffs ? this.gameState.debuffs.length : 0;
    return buffCount + debuffCount;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  hasActiveEffects() {
    return this.getActiveEffectCount() > 0;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  getActiveEffects() {
    const effects = [];
    
    if (this.gameState.buffs) {
      this.gameState.buffs.forEach(buffId => {
        const def = this.findBuffDefinition(buffId);
        if (def) {
          effects.push({ ...def, type: 'buff' });
        }
      });
    }
    
    if (this.gameState.debuffs) {
      this.gameState.debuffs.forEach(debuffId => {
        const def = this.findDebuffDefinition(debuffId);
        if (def) {
          effects.push({ ...def, type: 'debuff' });
        }
      });
    }
    
    return effects;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  forceCleanup() {
    console.log('üßπ Force cleaning all effect indicators...');
    
    if (this.container) {
      const indicators = this.container.querySelectorAll('.effect-indicator');
      console.log(`Found ${indicators.length} indicators to clean`);
      
      indicators.forEach((indicator, index) => {
        const effectId = indicator.getAttribute('data-effect-id');
        console.log(`Cleaning indicator ${index}: ${effectId}`);
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
        this.createTimeout(() => {
          if (indicator.parentNode) {
            indicator.parentNode.removeChild(indicator);
          }
        }, index * 50); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
      });
    }
    
    this.currentIndicators.clear();
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  getDebugInfo() {
    const indicators = this.container ? 
      Array.from(this.container.querySelectorAll('.effect-indicator')).map(el => ({
        id: el.getAttribute('data-effect-id'),
        class: el.className,
        text: el.textContent
      })) : [];
    
    return {
      containerExists: !!this.container,
      indicatorCount: indicators.length,
      indicators,
      gameStateBuffs: this.gameState.buffs || [],
      gameStateDebuffs: this.gameState.debuffs || [],
      currentIndicators: Array.from(this.currentIndicators),
      lastUpdateTime: this.lastUpdateTime
    };
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ EffectIndicators cleanup started');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    this.forceCleanup();
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    super.destroy();
    
    console.log('‚úÖ EffectIndicators destroyed');
  }
}