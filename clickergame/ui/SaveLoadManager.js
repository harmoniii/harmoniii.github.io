// ui/SaveLoadManager.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å —Ä–∞–±–æ—á–∏–º —Å–±—Ä–æ—Å–æ–º
import { CleanupMixin } from '../core/CleanupManager.js';
import { StorageManager } from '../core/StorageManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { GAME_CONSTANTS } from '../config/GameConstants.js';

export class SaveLoadManager extends CleanupMixin {
  constructor(gameState) {
    super();
    this.gameState = gameState;
    this.storageManager = new StorageManager();
    this.activeSaveElements = new Set();
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  performSave() {
    if (!this.gameState || this.gameState.isDestroyed === true) {
      eventBus.emit(GameEvents.NOTIFICATION, '‚ùå Cannot save - game state not available');
      return;
    }

    if (this.activeSaveElements.size > 0) {
      eventBus.emit(GameEvents.NOTIFICATION, 'üíæ Save already in progress...');
      return;
    }

    try {
      const saveCode = this.storageManager.exportToString(this.gameState);
      
      if (!saveCode) {
        throw new Error('Export returned empty save code');
      }

      this.displaySaveCode(saveCode);
      eventBus.emit(GameEvents.NOTIFICATION, 'üíæ Save created successfully!');
      
    } catch (error) {
      console.error('‚ùå Save error:', error);
      eventBus.emit(GameEvents.NOTIFICATION, `‚ùå Save failed: ${error.message}`);
    }
  }

  // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  displaySaveCode(saveCode) {
    const textarea = this.createSaveTextarea(saveCode);
    this.activeSaveElements.add(textarea);
    document.body.appendChild(textarea);
    
    textarea.focus();
    textarea.select();
    
    this.copyToClipboard(saveCode);
    
    this.createTimeout(() => {
      this.cleanupSaveElement(textarea);
    }, GAME_CONSTANTS.SAVE_ELEMENT_TIMEOUT);
    
    const blurHandler = () => this.cleanupSaveElement(textarea);
    textarea.addEventListener('blur', blurHandler);
    textarea._blurHandler = blurHandler;
  }

  // –°–æ–∑–¥–∞—Ç—å textarea –¥–ª—è –∫–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  createSaveTextarea(saveCode) {
    const textarea = document.createElement('textarea');
    textarea.value = saveCode;
    textarea.readOnly = true;
    
    Object.assign(textarea.style, {
      position: 'fixed',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      width: '80%',
      maxWidth: '600px',
      height: '200px',
      zIndex: '9999',
      background: 'white',
      border: '2px solid #333',
      borderRadius: '8px',
      padding: '10px',
      fontSize: '12px',
      fontFamily: 'monospace',
      boxShadow: '0 4px 20px rgba(0,0,0,0.3)',
      resize: 'none'
    });
    
    return textarea;
  }

  // –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  async copyToClipboard(text) {
    try {
      if (navigator.clipboard && window.isSecureContext) {
        await navigator.clipboard.writeText(text);
        eventBus.emit(GameEvents.NOTIFICATION, 'üìã Save code copied to clipboard!');
      } else {
        eventBus.emit(GameEvents.NOTIFICATION, 'üíæ Save code ready. Copy it manually.');
      }
    } catch (error) {
      console.warn('Clipboard copy failed:', error);
      eventBus.emit(GameEvents.NOTIFICATION, 'üíæ Save code ready. Copy it manually.');
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  cleanupSaveElement(textarea) {
    if (!this.activeSaveElements.has(textarea)) return;
    
    if (textarea._blurHandler) {
      textarea.removeEventListener('blur', textarea._blurHandler);
      delete textarea._blurHandler;
    }
    
    if (document.body.contains(textarea)) {
      document.body.removeChild(textarea);
    }
    
    this.activeSaveElements.delete(textarea);
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
  performLoad() {
    const code = prompt('üîÑ LOAD SAVE\n\nPaste your save code:');
    if (!code || code.trim() === '') {
      eventBus.emit(GameEvents.NOTIFICATION, '‚ùå No save code entered');
      return;
    }

    try {
      console.log('üîÑ Starting load process...');
      
      const saveData = this.storageManager.importFromString(code.trim());
      this.storageManager.createBackup();
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
      localStorage.setItem('advancedClickerState', JSON.stringify(saveData));
      
      eventBus.emit(GameEvents.NOTIFICATION, '‚úÖ Save loaded! Reloading...');
      
      this.createTimeout(() => {
        this.performReload('load');
      }, GAME_CONSTANTS.RELOAD_DELAY);
      
    } catch (error) {
      console.error('‚ùå Load error:', error);
      eventBus.emit(GameEvents.NOTIFICATION, `‚ùå Load failed: ${error.message}`);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ–π–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  createEmptySaveData() {
    return {
      // –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã = 0
      resources: {
        gold: 0,
        wood: 0,
        stone: 0,
        food: 0,
        water: 0,
        iron: 0,
        people: 0,
        energy: 0,
        science: 0,
        faith: 0,
        chaos: 0
      },
      
      // –°–±—Ä–æ—Å –∫–æ–º–±–æ
      combo: {
        lastZone: null,
        count: 0,
        deadline: 0,
        lastAngle: null
      },
      
      // –°–±—Ä–æ—Å skill points
      skillPoints: 0,
      
      // –°–±—Ä–æ—Å –∑–æ–Ω
      targetZone: 0,
      previousTargetZone: 0,
      
      // –°–±—Ä–æ—Å –∑–¥–∞–Ω–∏–π
      buildings: {},
      
      // –°–±—Ä–æ—Å –Ω–∞–≤—ã–∫–æ–≤
      skills: {},
      
      // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞–≤—ã–∫–æ–≤
      skillStates: {
        missProtectionCharges: 0,
        autoClickerActive: false
      },
      
      // –°–±—Ä–æ—Å –º–∞—Ä–∫–µ—Ç–∞
      market: {
        dailyDeals: [],
        purchaseHistory: [],
        reputation: 0,
        permanentBonuses: {}
      },
      
      // –û—á–∏—Å—Ç–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
      buffs: [],
      debuffs: [],
      blockedUntil: 0,
      effectStates: {
        starPowerClicks: 0,
        shieldBlocks: 0,
        heavyClickRequired: {},
        reverseDirection: 1,
        frozenCombo: false
      },
      
      saveTimestamp: Date.now(),
      saveVersion: '0.8.0'
    };
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å–±—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑–∫—É –ø—É—Å—Ç–æ–≥–æ —Å–µ–π–≤–∞
  performCompleteReset() {
    if (!this.confirmNuclearReset()) return;

    try {
      console.log('üî•üíÄ NUCLEAR RESET INITIATED üíÄüî•');
      eventBus.emit(GameEvents.NOTIFICATION, 'üî• NUCLEAR RESET IN PROGRESS...');
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      try {
        this.storageManager.createBackup();
        console.log('‚úÖ Backup created before nuclear reset');
      } catch (e) {
        console.warn('‚ö†Ô∏è Backup failed, continuing reset:', e);
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–µ–π–≤ –≤–º–µ—Å—Ç–æ –æ—á–∏—Å—Ç–∫–∏ localStorage
      const emptySave = this.createEmptySaveData();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      localStorage.setItem('advancedClickerState', JSON.stringify(emptySave));
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
      this.storageManager.deleteSave();
      
      // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–±—Ä–æ—Å–∞
      eventBus.emit(GameEvents.GAME_RESET);
      
      eventBus.emit(GameEvents.NOTIFICATION, 'üíÄ NUCLEAR RESET COMPLETE');
      eventBus.emit(GameEvents.NOTIFICATION, 'üîÑ Reloading with empty data...');
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      this.createTimeout(() => {
        this.performNuclearReload();
      }, GAME_CONSTANTS.NUCLEAR_RELOAD_DELAY);
      
    } catch (error) {
      console.error('üíÄ CRITICAL ERROR in nuclear reset:', error);
      this.emergencyNuclearReset(error);
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
  confirmNuclearReset() {
    const warnings = [
      'üî•üíÄ NUCLEAR GAME RESET üíÄüî•\n\nThis will COMPLETELY DESTROY:\n‚Ä¢ All progress\n‚Ä¢ All resources\n‚Ä¢ All buildings\n‚Ä¢ All skills\n‚Ä¢ All reputation\n‚Ä¢ EVERYTHING!\n\nAre you absolutely sure?',
      '‚ö†Ô∏èüíÄ FINAL WARNING üíÄ‚ö†Ô∏è\n\nThere is NO UNDO!\nALL data will be PERMANENTLY DESTROYED!\n\nType "DESTROY" to confirm:'
    ];
    
    if (!confirm(warnings[0])) {
      return false;
    }
    
    const confirmation = prompt(warnings[1]);
    if (confirmation !== 'DESTROY') {
      eventBus.emit(GameEvents.NOTIFICATION, '‚ùå Reset cancelled - incorrect confirmation');
      return false;
    }
    
    return true;
  }

  // –Ø–¥–µ—Ä–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
  performNuclearReload() {
    console.log('üî• Performing nuclear reload...');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
    try {
      window.location.href = window.location.protocol + '//' + 
                             window.location.host + 
                             window.location.pathname + 
                             '?nuclear_reset=' + Date.now() + 
                             '&cache_bust=' + Math.random();
    } catch (e) {
      try {
        window.location.reload(true);
      } catch (e2) {
        this.showManualReloadDialog('nuclear');
      }
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  performReload(type) {
    console.log(`üîÑ Performing ${type} reload...`);
    
    try {
      const url = new URL(window.location);
      url.searchParams.set(type, Date.now().toString());
      window.location.replace(url.toString());
    } catch (e) {
      try {
        window.location.reload(true);
      } catch (e2) {
        this.showManualReloadDialog(type);
      }
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
  showManualReloadDialog(type) {
    const dialog = document.createElement('div');
    dialog.style.cssText = `
      position: fixed; top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0,0,0,0.8); display: flex; 
      align-items: center; justify-content: center;
      z-index: 99999; font-family: Arial, sans-serif;
      color: white;
    `;
    
    const isNuclear = type === 'nuclear';
    const title = isNuclear ? 'üî•üíÄ NUCLEAR RESET COMPLETE üíÄüî•' : `üîÑ ${type.toUpperCase()} COMPLETE`;
    const message = isNuclear ? 'All game data has been <strong>COMPLETELY DESTROYED</strong>!' : `${type} operation completed successfully!`;
    
    dialog.innerHTML = `
      <div style="
        background: ${isNuclear ? 'linear-gradient(135deg, #ff4444 0%, #cc0000 100%)' : '#333'}; 
        padding: 40px; border-radius: 20px; text-align: center;
        max-width: 500px; box-shadow: 0 20px 40px rgba(0,0,0,0.5);
      ">
        <h2 style="margin-top: 0; font-size: 2em;">${title}</h2>
        <p style="font-size: 1.2em; margin: 20px 0;">
          ${message}
        </p>
        <p style="margin: 20px 0;">
          Please manually refresh the page to start fresh:
        </p>
        <div style="font-size: 1.1em; margin: 20px 0;">
          <div>‚Ä¢ Press <strong>F5</strong></div>
          <div>‚Ä¢ Press <strong>Ctrl+R</strong> (or Cmd+R on Mac)</div>
          <div>‚Ä¢ Close and reopen the page</div>
        </div>
        <button onclick="window.location.reload(true)" style="
          background: white; color: ${isNuclear ? '#ff4444' : '#333'}; border: none;
          padding: 15px 30px; border-radius: 10px; font-size: 1.1em;
          font-weight: bold; cursor: pointer; margin-top: 20px;
          box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        ">
          üîÑ Try Auto-Reload Again
        </button>
      </div>
    `;
    
    document.body.appendChild(dialog);
  }

  // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —è–¥–µ—Ä–Ω—ã–π —Å–±—Ä–æ—Å
  emergencyNuclearReset(error) {
    console.error('üíÄ EMERGENCY NUCLEAR RESET ACTIVATED');
    
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ localStorage
      localStorage.clear();
      sessionStorage.clear();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
      const emptySave = this.createEmptySaveData();
      localStorage.setItem('advancedClickerState', JSON.stringify(emptySave));
      
    } catch (e) {
      console.error('Emergency nuclear cleanup failed:', e);
    }
    
    setTimeout(() => {
      alert(`üî•üíÄ EMERGENCY NUCLEAR RESET COMPLETED üíÄüî•

CRITICAL ERROR OCCURRED DURING RESET!

ALL GAME DATA HAS BEEN DESTROYED!

Please manually refresh the page:
- Press F5
- Press Ctrl+R (or Cmd+R on Mac)  
- Close and reopen the page

Error: ${error.message}`);
    }, 1000);
  }

  // –ë–û–ù–£–°: –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ–π–≤–∞ —Å –Ω—É–ª–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  generateEmptySaveCode() {
    try {
      const emptySave = this.createEmptySaveData();
      return this.storageManager.encodeData(JSON.stringify(emptySave));
    } catch (error) {
      console.error('Failed to generate empty save code:', error);
      return null;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  cleanupAllSaveElements() {
    const elementsToClean = Array.from(this.activeSaveElements);
    elementsToClean.forEach(element => {
      this.cleanupSaveElement(element);
    });
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    this.cleanupAllSaveElements();
    super.destroy();
  }
}