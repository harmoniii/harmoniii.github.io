// ui/SaveLoadManager.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ü–û–õ–ù–´–ú —è–¥–µ—Ä–Ω—ã–º —Å–±—Ä–æ—Å–æ–º
import { CleanupMixin } from '../core/CleanupManager.js';
import { StorageManager } from '../core/StorageManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { GAME_CONSTANTS } from '../config/GameConstants.js';

export class SaveLoadManager extends CleanupMixin {
  constructor(gameState) {
    super();
    this.gameState = gameState;
    this.storageManager = new StorageManager();
    this.activeSaveElements = new Set();
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  performSave() {
    if (this.activeSaveElements.size > 0) {
      eventBus.emit(GameEvents.NOTIFICATION, 'üíæ Save already in progress...');
      return;
    }

    try {
      const saveCode = this.storageManager.exportToString(this.gameState);
      this.displaySaveCode(saveCode);
      eventBus.emit(GameEvents.NOTIFICATION, 'üíæ Save created successfully!');
    } catch (error) {
      console.error('Save error:', error);
      eventBus.emit(GameEvents.NOTIFICATION, '‚ùå Error creating save');
    }
  }

  // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  displaySaveCode(saveCode) {
    const textarea = this.createSaveTextarea(saveCode);
    this.activeSaveElements.add(textarea);
    document.body.appendChild(textarea);
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –∏ –≤—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç
    textarea.focus();
    textarea.select();
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    this.copyToClipboard(saveCode);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    this.createTimeout(() => {
      this.cleanupSaveElement(textarea);
    }, GAME_CONSTANTS.SAVE_ELEMENT_TIMEOUT);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    const blurHandler = () => this.cleanupSaveElement(textarea);
    textarea.addEventListener('blur', blurHandler);
    textarea._blurHandler = blurHandler;
  }

  // –°–æ–∑–¥–∞—Ç—å textarea –¥–ª—è –∫–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  createSaveTextarea(saveCode) {
    const textarea = document.createElement('textarea');
    textarea.value = saveCode;
    textarea.readOnly = true;
    
    // –°—Ç–∏–ª–∏
    Object.assign(textarea.style, {
      position: 'fixed',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      width: '80%',
      maxWidth: '600px',
      height: '200px',
      zIndex: '9999',
      background: 'white',
      border: '2px solid #333',
      borderRadius: '8px',
      padding: '10px',
      fontSize: '12px',
      fontFamily: 'monospace',
      boxShadow: '0 4px 20px rgba(0,0,0,0.3)',
      resize: 'none'
    });
    
    return textarea;
  }

  // –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  async copyToClipboard(text) {
    try {
      if (navigator.clipboard && window.isSecureContext) {
        await navigator.clipboard.writeText(text);
        eventBus.emit(GameEvents.NOTIFICATION, 'üìã Save code copied to clipboard!');
      } else {
        eventBus.emit(GameEvents.NOTIFICATION, 'üíæ Save code ready. Copy it manually.');
      }
    } catch (error) {
      console.warn('Clipboard copy failed:', error);
      eventBus.emit(GameEvents.NOTIFICATION, 'üíæ Save code ready. Copy it manually.');
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  cleanupSaveElement(textarea) {
    if (!this.activeSaveElements.has(textarea)) return;
    
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    if (textarea._blurHandler) {
      textarea.removeEventListener('blur', textarea._blurHandler);
      delete textarea._blurHandler;
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ DOM
    if (document.body.contains(textarea)) {
      document.body.removeChild(textarea);
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    this.activeSaveElements.delete(textarea);
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
  performLoad() {
    const code = prompt('üîÑ LOAD SAVE\n\nPaste your save code:');
    if (!code || code.trim() === '') {
      eventBus.emit(GameEvents.NOTIFICATION, '‚ùå No save code entered');
      return;
    }

    try {
      console.log('üîÑ Starting load process...');
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const saveData = this.storageManager.importFromString(code.trim());
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      this.storageManager.createBackup();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      this.gameState.loadSaveData(saveData);
      this.storageManager.save(this.gameState);
      
      eventBus.emit(GameEvents.NOTIFICATION, '‚úÖ Save loaded! Reloading...');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      this.createTimeout(() => {
        this.performReload('load');
      }, GAME_CONSTANTS.RELOAD_DELAY);
      
    } catch (error) {
      console.error('‚ùå Load error:', error);
      eventBus.emit(GameEvents.NOTIFICATION, `‚ùå Load failed: ${error.message}`);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–û–õ–ù–´–ô –Ø–î–ï–†–ù–´–ô –°–ë–†–û–°
  performCompleteReset() {
    if (!this.confirmNuclearReset()) return;

    try {
      console.log('üî•üíÄ NUCLEAR RESET INITIATED üíÄüî•');
      eventBus.emit(GameEvents.NOTIFICATION, 'üî• NUCLEAR RESET IN PROGRESS...');
      
      // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ–º
      try {
        this.storageManager.createBackup();
        console.log('‚úÖ Backup created before nuclear reset');
      } catch (e) {
        console.warn('‚ö†Ô∏è Backup failed, continuing reset:', e);
      }
      
      // –®–∞–≥ 2: –ü–û–õ–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
      this.executeNuclearStorageWipe();
      
      // –®–∞–≥ 3: –û—á–∏—Å—Ç–∫–∞ IndexedDB
      this.clearIndexedDB();
      
      // –®–∞–≥ 4: –û—á–∏—Å—Ç–∫–∞ WebSQL (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤)
      this.clearWebSQL();
      
      // –®–∞–≥ 5: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö cookies –∏–≥—Ä—ã
      this.clearGameCookies();
      
      // –®–∞–≥ 6: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      this.clearApplicationCache();
      
      // –®–∞–≥ 7: –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
      eventBus.emit(GameEvents.GAME_RESET);
      
      eventBus.emit(GameEvents.NOTIFICATION, 'üíÄ NUCLEAR RESET COMPLETE');
      eventBus.emit(GameEvents.NOTIFICATION, 'üîÑ Initiating total reload...');
      
      // –®–∞–≥ 8: –ñ–µ—Å—Ç–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
      this.createTimeout(() => {
        this.performNuclearReload();
      }, GAME_CONSTANTS.NUCLEAR_RELOAD_DELAY);
      
    } catch (error) {
      console.error('üíÄ CRITICAL ERROR in nuclear reset:', error);
      this.emergencyNuclearReset(error);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  confirmNuclearReset() {
    const warnings = [
      'üî•üíÄ NUCLEAR GAME RESET üíÄüî•\n\nThis will COMPLETELY DESTROY:\n‚Ä¢ All progress\n‚Ä¢ All resources\n‚Ä¢ All buildings\n‚Ä¢ All skills\n‚Ä¢ All reputation\n‚Ä¢ EVERYTHING!\n\nAre you absolutely sure?',
      '‚ö†Ô∏èüíÄ FINAL WARNING üíÄ‚ö†Ô∏è\n\nThere is NO UNDO!\nALL data will be PERMANENTLY DESTROYED!\n\nType "DESTROY" to confirm:'
    ];
    
    // –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if (!confirm(warnings[0])) {
      return false;
    }
    
    // –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞
    const confirmation = prompt(warnings[1]);
    if (confirmation !== 'DESTROY') {
      eventBus.emit(GameEvents.NOTIFICATION, '‚ùå Reset cancelled - incorrect confirmation');
      return false;
    }
    
    return true;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–æ–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
  executeNuclearStorageWipe() {
    console.log('üí• Executing nuclear storage wipe...');
    
    try {
      // 1. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ localStorage
      const localStorageKeys = [];
      for (let i = 0; i < localStorage.length; i++) {
        localStorageKeys.push(localStorage.key(i));
      }
      
      localStorageKeys.forEach(key => {
        try {
          localStorage.removeItem(key);
          console.log(`üóëÔ∏è Removed localStorage: ${key}`);
        } catch (e) {
          console.warn(`Failed to remove localStorage key: ${key}`, e);
        }
      });
      
      // 2. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ sessionStorage
      const sessionStorageKeys = [];
      for (let i = 0; i < sessionStorage.length; i++) {
        sessionStorageKeys.push(sessionStorage.key(i));
      }
      
      sessionStorageKeys.forEach(key => {
        try {
          sessionStorage.removeItem(key);
          console.log(`üóëÔ∏è Removed sessionStorage: ${key}`);
        } catch (e) {
          console.warn(`Failed to remove sessionStorage key: ${key}`, e);
        }
      });
      
      // 3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
      try {
        localStorage.clear();
        sessionStorage.clear();
        console.log('‚úÖ Force cleared all storage');
      } catch (e) {
        console.warn('‚ö†Ô∏è Force clear failed:', e);
      }
      
    } catch (error) {
      console.error('üíÄ Nuclear storage wipe failed:', error);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ IndexedDB
  async clearIndexedDB() {
    try {
      if (!window.indexedDB) return;
      
      console.log('üóëÔ∏è Clearing IndexedDB...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
      if (indexedDB.databases) {
        const databases = await indexedDB.databases();
        
        await Promise.all(databases.map(async (db) => {
          return new Promise((resolve, reject) => {
            const deleteReq = indexedDB.deleteDatabase(db.name);
            deleteReq.onsuccess = () => {
              console.log(`‚úÖ Deleted IndexedDB: ${db.name}`);
              resolve();
            };
            deleteReq.onerror = () => {
              console.warn(`‚ö†Ô∏è Failed to delete IndexedDB: ${db.name}`);
              resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            };
          });
        }));
      }
      
      // –û—á–∏—â–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
      const gameDBNames = ['gameState', 'advancedClicker', 'clickerGame'];
      await Promise.all(gameDBNames.map(async (name) => {
        return new Promise((resolve) => {
          const deleteReq = indexedDB.deleteDatabase(name);
          deleteReq.onsuccess = () => {
            console.log(`‚úÖ Deleted game IndexedDB: ${name}`);
            resolve();
          };
          deleteReq.onerror = () => resolve(); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        });
      }));
      
    } catch (error) {
      console.warn('‚ö†Ô∏è IndexedDB clear failed:', error);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ WebSQL (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤)
  clearWebSQL() {
    try {
      if (!window.openDatabase) return;
      
      console.log('üóëÔ∏è Clearing WebSQL...');
      
      // –û—á–∏—â–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ WebSQL –±–∞–∑—ã
      const webSQLNames = ['gameState', 'advancedClicker'];
      webSQLNames.forEach(name => {
        try {
          const db = openDatabase(name, '', '', '');
          db.transaction(tx => {
            tx.executeSql('DELETE FROM data');
            console.log(`‚úÖ Cleared WebSQL: ${name}`);
          });
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ WebSQL
        }
      });
      
    } catch (error) {
      console.warn('‚ö†Ô∏è WebSQL clear failed:', error);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ cookies –∏–≥—Ä—ã
  clearGameCookies() {
    try {
      console.log('üóëÔ∏è Clearing game cookies...');
      
      const cookies = document.cookie.split(';');
      const gameKeywords = ['game', 'clicker', 'save', 'state', 'advanced'];
      
      cookies.forEach(cookie => {
        const eqPos = cookie.indexOf('=');
        const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
        
        // –£–¥–∞–ª—è–µ–º cookie –µ—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–≥—Ä–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if (gameKeywords.some(keyword => name.toLowerCase().includes(keyword))) {
          document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`;
          document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;domain=${window.location.hostname}`;
          console.log(`‚úÖ Cleared cookie: ${name}`);
        }
      });
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Cookie clear failed:', error);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—Å—Ç–∫–∞ Application Cache
  clearApplicationCache() {
    try {
      if (!window.applicationCache) return;
      
      console.log('üóëÔ∏è Clearing application cache...');
      window.applicationCache.update();
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Application cache clear failed:', error);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–¥–µ—Ä–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
  performNuclearReload() {
    console.log('üî• Performing nuclear reload...');
    
    const reloadMethods = [
      // –ú–µ—Ç–æ–¥ 1: –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
      () => {
        window.location.href = window.location.protocol + '//' + 
                               window.location.host + 
                               window.location.pathname + 
                               '?nuclear_reset=' + Date.now() + 
                               '&cache_bust=' + Math.random();
      },
      
      // –ú–µ—Ç–æ–¥ 2: –ó–∞–º–µ–Ω–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      () => {
        const url = new URL(window.location);
        url.searchParams.set('nuclear_reset', Date.now().toString());
        url.searchParams.set('cache_bust', Math.random().toString());
        url.searchParams.set('force_reload', 'true');
        window.location.replace(url.toString());
      },
      
      // –ú–µ—Ç–æ–¥ 3: –ñ–µ—Å—Ç–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      () => {
        window.location.reload(true);
      },
      
      // –ú–µ—Ç–æ–¥ 4: Assign —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      () => {
        window.location.assign(window.location.href + 
                              (window.location.href.includes('?') ? '&' : '?') + 
                              'nuclear_reset=' + Date.now());
      },
      
      // –ú–µ—Ç–æ–¥ 5: –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ URL
      () => {
        window.location = window.location.protocol + '//' + 
                         window.location.host + 
                         window.location.pathname;
      }
    ];
    
    let methodIndex = 0;
    
    const tryReload = () => {
      if (methodIndex >= reloadMethods.length) {
        console.error('üíÄ ALL NUCLEAR RELOAD METHODS FAILED!');
        this.showManualReloadDialog();
        return;
      }
      
      try {
        console.log(`üî• Nuclear reload attempt ${methodIndex + 1}...`);
        reloadMethods[methodIndex]();
      } catch (error) {
        console.warn(`‚ùå Nuclear reload method ${methodIndex + 1} failed:`, error);
        methodIndex++;
        setTimeout(tryReload, 1000);
      }
    };
    
    tryReload();
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–∏–∞–ª–æ–≥ —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
  showManualReloadDialog() {
    const dialog = document.createElement('div');
    dialog.style.cssText = `
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0,0,0,0.8);
      display: flex; align-items: center; justify-content: center;
      z-index: 99999;
      font-family: Arial, sans-serif;
      color: white;
    `;
    
    dialog.innerHTML = `
      <div style="
        background: linear-gradient(135deg, #ff4444 0%, #cc0000 100%);
        padding: 40px; border-radius: 20px; text-align: center;
        max-width: 500px; box-shadow: 0 20px 40px rgba(0,0,0,0.5);
      ">
        <h2 style="margin-top: 0; font-size: 2em;">üî•üíÄ NUCLEAR RESET COMPLETE üíÄüî•</h2>
        <p style="font-size: 1.2em; margin: 20px 0;">
          All game data has been <strong>COMPLETELY DESTROYED</strong>!
        </p>
        <p style="margin: 20px 0;">
          Please manually refresh the page to start fresh:
        </p>
        <div style="font-size: 1.1em; margin: 20px 0;">
          <div>‚Ä¢ Press <strong>F5</strong></div>
          <div>‚Ä¢ Press <strong>Ctrl+R</strong> (or Cmd+R on Mac)</div>
          <div>‚Ä¢ Close and reopen the page</div>
        </div>
        <button onclick="window.location.reload(true)" style="
          background: white; color: #ff4444; border: none;
          padding: 15px 30px; border-radius: 10px; font-size: 1.1em;
          font-weight: bold; cursor: pointer; margin-top: 20px;
          box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        ">
          üîÑ Try Auto-Reload Again
        </button>
      </div>
    `;
    
    document.body.appendChild(dialog);
  }

  // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —è–¥–µ—Ä–Ω—ã–π —Å–±—Ä–æ—Å
  emergencyNuclearReset(error) {
    console.error('üíÄ EMERGENCY NUCLEAR RESET ACTIVATED');
    
    try {
      // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ —á—Ç–æ –º–æ–∂–Ω–æ
      this.executeNuclearStorageWipe();
      
      // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      this.activeSaveElements.forEach(element => {
        try {
          if (document.body.contains(element)) {
            document.body.removeChild(element);
          }
        } catch (e) {
          console.warn('Failed to remove element:', e);
        }
      });
      this.activeSaveElements.clear();
      
    } catch (e) {
      console.error('Emergency nuclear cleanup failed:', e);
    }
    
    setTimeout(() => {
      alert(`üî•üíÄ EMERGENCY NUCLEAR RESET COMPLETED üíÄüî•

CRITICAL ERROR OCCURRED DURING RESET!

ALL GAME DATA HAS BEEN DESTROYED!

Please manually refresh the page:
- Press F5
- Press Ctrl+R (or Cmd+R on Mac)  
- Close and reopen the page

Error: ${error.message}`);
    }, 1000);
  }

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è –æ–±—ã—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
  performReload(type) {
    console.log(`üîÑ Performing ${type} reload...`);
    
    const reloadMethods = [
      () => {
        const url = new URL(window.location);
        url.searchParams.set(type, Date.now().toString());
        window.location.replace(url.toString());
      },
      () => {
        window.location.href = window.location.origin + window.location.pathname + `?${type}=` + Date.now();
      },
      () => {
        window.location.assign(window.location.href + `?${type}=` + Date.now());
      },
      () => {
        window.location.reload(true);
      },
      () => {
        window.location = window.location;
      }
    ];
    
    let methodIndex = 0;
    
    const tryReload = () => {
      if (methodIndex >= reloadMethods.length) {
        console.error('üíÄ ALL RELOAD METHODS FAILED!');
        alert(`üî• ${type.toUpperCase()} COMPLETE! üî•\n\nPlease manually refresh the page (F5 or Ctrl+R)`);
        return;
      }
      
      try {
        console.log(`üîÑ Reload attempt ${methodIndex + 1}...`);
        reloadMethods[methodIndex]();
      } catch (error) {
        console.warn(`‚ùå Reload method ${methodIndex + 1} failed:`, error);
        methodIndex++;
        setTimeout(tryReload, 1000);
      }
    };
    
    tryReload();
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  cleanupAllSaveElements() {
    const elementsToClean = Array.from(this.activeSaveElements);
    elementsToClean.forEach(element => {
      this.cleanupSaveElement(element);
    });
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    this.cleanupAllSaveElements();
    super.destroy();
  }
}