// ui/SaveLoadManager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –∑–∞–≥—Ä—É–∑–∫–æ–π —á–µ—Ä–µ–∑ UI
import { CleanupMixin } from '../core/CleanupManager.js';
import { StorageManager } from '../core/StorageManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { GAME_CONSTANTS } from '../config/GameConstants.js';

export class SaveLoadManager extends CleanupMixin {
  constructor(gameState) {
    super();
    this.gameState = gameState;
    this.storageManager = new StorageManager();
    this.activeSaveElements = new Set();
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  performSave() {
    if (this.activeSaveElements.size > 0) {
      eventBus.emit(GameEvents.NOTIFICATION, 'üíæ Save already in progress...');
      return;
    }

    try {
      const saveCode = this.storageManager.exportToString(this.gameState);
      this.displaySaveCode(saveCode);
      eventBus.emit(GameEvents.NOTIFICATION, 'üíæ Save created successfully!');
    } catch (error) {
      console.error('Save error:', error);
      eventBus.emit(GameEvents.NOTIFICATION, '‚ùå Error creating save');
    }
  }

  // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  displaySaveCode(saveCode) {
    const textarea = this.createSaveTextarea(saveCode);
    this.activeSaveElements.add(textarea);
    document.body.appendChild(textarea);
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –∏ –≤—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç
    textarea.focus();
    textarea.select();
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    this.copyToClipboard(saveCode);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    this.createTimeout(() => {
      this.cleanupSaveElement(textarea);
    }, GAME_CONSTANTS.SAVE_ELEMENT_TIMEOUT);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
    const blurHandler = () => this.cleanupSaveElement(textarea);
    textarea.addEventListener('blur', blurHandler);
    textarea._blurHandler = blurHandler;
  }

  // –°–æ–∑–¥–∞—Ç—å textarea –¥–ª—è –∫–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  createSaveTextarea(saveCode) {
    const textarea = document.createElement('textarea');
    textarea.value = saveCode;
    textarea.readOnly = true;
    
    // –°—Ç–∏–ª–∏
    Object.assign(textarea.style, {
      position: 'fixed',
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      width: '80%',
      maxWidth: '600px',
      height: '200px',
      zIndex: '9999',
      background: 'white',
      border: '2px solid #333',
      borderRadius: '8px',
      padding: '10px',
      fontSize: '12px',
      fontFamily: 'monospace',
      boxShadow: '0 4px 20px rgba(0,0,0,0.3)',
      resize: 'none'
    });
    
    return textarea;
  }

  // –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  async copyToClipboard(text) {
    try {
      if (navigator.clipboard && window.isSecureContext) {
        await navigator.clipboard.writeText(text);
        eventBus.emit(GameEvents.NOTIFICATION, 'üìã Save code copied to clipboard!');
      } else {
        eventBus.emit(GameEvents.NOTIFICATION, 'üíæ Save code ready. Copy it manually.');
      }
    } catch (error) {
      console.warn('Clipboard copy failed:', error);
      eventBus.emit(GameEvents.NOTIFICATION, 'üíæ Save code ready. Copy it manually.');
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  cleanupSaveElement(textarea) {
    if (!this.activeSaveElements.has(textarea)) return;
    
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    if (textarea._blurHandler) {
      textarea.removeEventListener('blur', textarea._blurHandler);
      delete textarea._blurHandler;
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ DOM
    if (document.body.contains(textarea)) {
      document.body.removeChild(textarea);
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    this.activeSaveElements.delete(textarea);
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
  performLoad() {
    const code = prompt('üîÑ LOAD SAVE\n\nPaste your save code:');
    if (!code || code.trim() === '') {
      eventBus.emit(GameEvents.NOTIFICATION, '‚ùå No save code entered');
      return;
    }

    try {
      console.log('üîÑ Starting load process...');
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const saveData = this.storageManager.importFromString(code.trim());
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      this.storageManager.createBackup();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      this.gameState.loadSaveData(saveData);
      this.storageManager.save(this.gameState);
      
      eventBus.emit(GameEvents.NOTIFICATION, '‚úÖ Save loaded! Reloading...');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      this.createTimeout(() => {
        this.performReload('load');
      }, GAME_CONSTANTS.RELOAD_DELAY);
      
    } catch (error) {
      console.error('‚ùå Load error:', error);
      eventBus.emit(GameEvents.NOTIFICATION, `‚ùå Load failed: ${error.message}`);
    }
  }

  // –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
  performCompleteReset() {
    if (!this.confirmReset()) return;

    try {
      console.log('üî• COMPLETE RESET INITIATED');
      eventBus.emit(GameEvents.NOTIFICATION, 'üî• RESETTING GAME...');
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
      this.storageManager.createBackup();
      
      // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      this.storageManager.clearAllData();
      
      // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–±—Ä–æ—Å–∞
      eventBus.emit(GameEvents.GAME_RESET);
      
      eventBus.emit(GameEvents.NOTIFICATION, 'üíÄ GAME RESET COMPLETE');
      eventBus.emit(GameEvents.NOTIFICATION, 'üîÑ Reloading...');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      this.createTimeout(() => {
        this.performReload('reset');
      }, GAME_CONSTANTS.NUCLEAR_RELOAD_DELAY);
      
    } catch (error) {
      console.error('üíÄ CRITICAL ERROR in reset:', error);
      this.emergencyReset(error);
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
  confirmReset() {
    if (!confirm('üî• COMPLETE GAME RESET üî•\n\nThis will delete ALL data forever!\nAre you sure?')) {
      return false;
    }
    
    if (!confirm('‚ö†Ô∏è FINAL WARNING ‚ö†Ô∏è\n\nAll progress will be lost!\nContinue reset?')) {
      return false;
    }
    
    return true;
  }

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  performReload(type) {
    console.log(`üîÑ Performing ${type} reload...`);
    
    const reloadMethods = [
      () => {
        const url = new URL(window.location);
        url.searchParams.set(type, Date.now().toString());
        window.location.replace(url.toString());
      },
      () => {
        window.location.href = window.location.origin + window.location.pathname + `?${type}=` + Date.now();
      },
      () => {
        window.location.assign(window.location.href + `?${type}=` + Date.now());
      },
      () => {
        window.location.reload(true);
      },
      () => {
        window.location = window.location;
      }
    ];
    
    let methodIndex = 0;
    
    const tryReload = () => {
      if (methodIndex >= reloadMethods.length) {
        console.error('üíÄ ALL RELOAD METHODS FAILED!');
        alert(`üî• ${type.toUpperCase()} COMPLETE! üî•\n\nPlease manually refresh the page (F5 or Ctrl+R)`);
        return;
      }
      
      try {
        console.log(`üîÑ Reload attempt ${methodIndex + 1}...`);
        reloadMethods[methodIndex]();
      } catch (error) {
        console.warn(`‚ùå Reload method ${methodIndex + 1} failed:`, error);
        methodIndex++;
        setTimeout(tryReload, 1000);
      }
    };
    
    tryReload();
  }

  // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å
  emergencyReset(error) {
    console.error('üíÄ EMERGENCY RESET ACTIVATED');
    
    try {
      // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
      this.storageManager.clearAllData();
      
      // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      this.activeSaveElements.forEach(element => {
        try {
          if (document.body.contains(element)) {
            document.body.removeChild(element);
          }
        } catch (e) {
          console.warn('Failed to remove element:', e);
        }
      });
      this.activeSaveElements.clear();
      
    } catch (e) {
      console.error('Emergency cleanup failed:', e);
    }
    
    setTimeout(() => {
      alert(`üî• EMERGENCY RESET COMPLETED üî•

The game has been reset but some errors occurred.

Please manually refresh the page:
- Press F5, or
- Press Ctrl+R, or  
- Close and reopen the page

Error: ${error.message}`);
    }, 1000);
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  cleanupAllSaveElements() {
    const elementsToClean = Array.from(this.activeSaveElements);
    elementsToClean.forEach(element => {
      this.cleanupSaveElement(element);
    });
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    this.cleanupAllSaveElements();
    super.destroy();
  }
}