// ui/ResourceDisplay.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∫–æ–º–±–æ
import { CleanupMixin } from '../core/CleanupManager.js';
import { getResourceEmoji, RESOURCE_GROUPS } from '../config/ResourceConfig.js';
import { GAME_CONSTANTS } from '../config/GameConstants.js';

export class ResourceDisplay extends CleanupMixin {
  constructor(gameState) {
    super();
    this.gameState = gameState;
    this.tooltip = null;
    this.comboIndicator = null;
    this.comboValue = null;
    this.comboBonus = null;
    
    this.initializeComboIndicator();
  }

  // –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ–º–±–æ
  initializeComboIndicator() {
    this.comboIndicator = document.getElementById('combo-indicator');
    this.comboValue = document.getElementById('combo-value');
    this.comboBonus = document.getElementById('combo-bonus');
    
    if (!this.comboIndicator || !this.comboValue || !this.comboBonus) {
      console.warn('Combo indicator elements not found');
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ò –∫–æ–º–±–æ
  update(leftContainer, rightContainer) {
    if (!this.isActive() || !leftContainer || !rightContainer) return;
    
    this.clearContainers(leftContainer, rightContainer);
    this.displayMainResources(leftContainer);
    this.displayOtherResources(rightContainer);
    this.displayGameStats(rightContainer);
    
    // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–º–±–æ
    this.updateComboIndicator();
  }

  // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∫–æ–º–±–æ
  updateComboIndicator() {
    if (!this.comboIndicator || !this.comboValue || !this.comboBonus) return;
    
    const comboCount = this.gameState.combo?.count || 0;
    const comboDeadline = this.gameState.combo?.deadline || 0;
    const now = Date.now();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–±–æ
    this.comboValue.textContent = comboCount.toString();
    
    // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∫–æ–º–±–æ
    this.comboIndicator.className = 'combo-indicator';
    
    if (comboCount >= 50) {
      this.comboIndicator.classList.add('combo-perfect');
      this.comboBonus.textContent = 'PERFECT COMBO! üåü';
    } else if (comboCount >= 20) {
      this.comboIndicator.classList.add('combo-high');
      this.comboBonus.textContent = 'Amazing streak! üî•';
    } else if (comboCount >= 10) {
      this.comboBonus.textContent = 'Great combo! Keep going!';
    } else if (comboCount >= 5) {
      this.comboBonus.textContent = 'Good streak! üëç';
    } else if (comboCount > 0) {
      this.comboBonus.textContent = 'Building momentum...';
    } else {
      this.comboBonus.textContent = 'Keep hitting the target!';
    }
    
    // –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –µ—Å–ª–∏ –∫–æ–º–±–æ –∞–∫—Ç–∏–≤–Ω–æ
    if (comboCount > 0 && comboDeadline > now) {
      const timeLeft = Math.ceil((comboDeadline - now) / 1000);
      this.comboBonus.textContent += ` (${timeLeft}s)`;
    }
    
    // –ù–û–í–û–ï: –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–±–æ
    if (this.lastComboCount !== comboCount) {
      this.animateComboChange(comboCount > (this.lastComboCount || 0));
      this.lastComboCount = comboCount;
    }
  }

  // –ù–û–í–û–ï: –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–±–æ
  animateComboChange(isIncrease) {
    if (!this.comboValue) return;
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã –∞–Ω–∏–º–∞—Ü–∏–∏
    this.comboValue.classList.remove('combo-increase', 'combo-decrease');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
    const animationClass = isIncrease ? 'combo-increase' : 'combo-decrease';
    this.comboValue.classList.add(animationClass);
    
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    this.createTimeout(() => {
      if (this.comboValue) {
        this.comboValue.classList.remove(animationClass);
      }
    }, 600);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    if (!document.getElementById('combo-animation-styles')) {
      const style = document.createElement('style');
      style.id = 'combo-animation-styles';
      style.textContent = `
        .combo-increase {
          animation: comboIncrease 0.6s ease-out;
        }
        
        .combo-decrease {
          animation: comboDecrease 0.6s ease-out;
        }
        
        @keyframes comboIncrease {
          0% { transform: scale(1); color: inherit; }
          50% { transform: scale(1.2); color: #4CAF50; text-shadow: 0 0 10px #4CAF50; }
          100% { transform: scale(1); color: inherit; }
        }
        
        @keyframes comboDecrease {
          0% { transform: scale(1); color: inherit; }
          50% { transform: scale(0.8); color: #f44336; text-shadow: 0 0 10px #f44336; }
          100% { transform: scale(1); color: inherit; }
        }
      `;
      document.head.appendChild(style);
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  clearContainers(leftContainer, rightContainer) {
    leftContainer.innerHTML = '';
    rightContainer.innerHTML = '';
  }

  // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
  displayMainResources(container) {
    const mainResources = RESOURCE_GROUPS.BASIC;
    
    mainResources.forEach(resourceName => {
      const value = this.gameState.resources[resourceName] || 0;
      const element = this.createResourceElement(resourceName, value);
      container.appendChild(element);
      container.appendChild(document.createElement('br'));
    });
  }

  // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
  displayOtherResources(container) {
    const otherResources = [...RESOURCE_GROUPS.ADVANCED, ...RESOURCE_GROUPS.SPECIAL];
    
    otherResources.forEach(resourceName => {
      const value = this.gameState.resources[resourceName] || 0;
      const element = this.createResourceElement(resourceName, value);
      container.appendChild(element);
      container.appendChild(document.createElement('br'));
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–ï–ó –∫–æ–º–±–æ (—Ç–µ–ø–µ—Ä—å –æ—Ç–¥–µ–ª—å–Ω–æ)
  displayGameStats(container) {
    // Skill Points
    const skillPoints = Math.floor(this.gameState.skillPoints || 0);
    const sp = this.createStatElement('Skill Points', skillPoints, '‚ú®');
    container.appendChild(sp);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (this.gameState.buffs && this.gameState.buffs.length > 0) {
      const activeBuffs = this.createStatElement('Active Buffs', this.gameState.buffs.length, '‚ú®');
      container.appendChild(activeBuffs);
    }
    
    if (this.gameState.debuffs && this.gameState.debuffs.length > 0) {
      const activeDebuffs = this.createStatElement('Active Debuffs', this.gameState.debuffs.length, 'üíÄ');
      container.appendChild(activeDebuffs);
    }
  }

  // –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Ä–µ—Å—É—Ä—Å–∞
  createResourceElement(resourceName, value) {
    const span = document.createElement('span');
    span.className = 'resource-display';
    
    const emoji = getResourceEmoji(resourceName);
    const formattedValue = this.formatValue(value);
    
    span.textContent = `${emoji} ${formattedValue}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
    this.addEventListener(span, 'mouseenter', (e) => {
      this.showTooltip(e, this.getResourceTooltip(resourceName, value));
    });
    
    this.addEventListener(span, 'mouseleave', () => {
      this.hideTooltip();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    if (resourceName === 'faith' && value > 0) {
      span.style.color = '#4CAF50';
    } else if (resourceName === 'chaos' && value > 0) {
      span.style.color = '#f44336';
    }
    
    return span;
  }

  // –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  createStatElement(label, value, emoji = '') {
    const div = document.createElement('div');
    div.className = 'stat-display';
    
    const formattedValue = this.formatValue(value);
    div.textContent = `${emoji} ${label}: ${formattedValue}`;
    
    return div;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatValue(value) {
    if (typeof value !== 'number' || isNaN(value)) {
      return '0';
    }
    
    // –î–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    if (value >= 1000000000) {
      return (value / 1000000000).toFixed(1) + 'B';
    } else if (value >= 1000000) {
      return (value / 1000000).toFixed(1) + 'M';
    } else if (value >= 1000) {
      return (value / 1000).toFixed(1) + 'K';
    } else if (value >= 100) {
      return Math.floor(value).toString();
    } else {
      return value.toFixed(1);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞
  getResourceTooltip(resourceName, value) {
    const tooltips = {
      gold: 'Primary currency earned by clicking',
      wood: 'Basic building material',
      stone: 'Sturdy construction resource',
      food: 'Sustenance for your people',
      water: 'Essential for life and production',
      iron: 'Strong metal for advanced buildings',
      people: 'Population that works in buildings',
      energy: 'Powers advanced technology',
      science: 'Research and development resource',
      faith: 'Spiritual resource that increases buff chance',
      chaos: 'Destructive force that increases debuff chance'
    };
    
    const baseTooltip = tooltips[resourceName] || `Resource: ${resourceName}`;
    const exactValue = typeof value === 'number' ? value.toFixed(2) : '0';
    
    return `${baseTooltip}\nExact value: ${exactValue}`;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
  showTooltip(event, text) {
    if (!this.tooltip) {
      this.tooltip = document.createElement('div');
      this.tooltip.className = 'tooltip';
      document.body.appendChild(this.tooltip);
      
      this.onDestroy(() => {
        if (this.tooltip && document.body.contains(this.tooltip)) {
          document.body.removeChild(this.tooltip);
        }
      });
    }
    
    this.tooltip.textContent = text;
    this.tooltip.style.top = `${event.pageY + GAME_CONSTANTS.TOOLTIP_OFFSET}px`;
    this.tooltip.style.left = `${event.pageX + GAME_CONSTANTS.TOOLTIP_OFFSET}px`;
    this.tooltip.style.display = 'block';
    this.tooltip.style.whiteSpace = 'pre-line';
  }

  // –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
  hideTooltip() {
    if (this.tooltip) {
      this.tooltip.style.display = 'none';
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ—Å—É—Ä—Å (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
  updateResource(resourceName, container) {
    if (!this.isActive()) return;
    
    const resourceElements = container.querySelectorAll('.resource-display');
    resourceElements.forEach(element => {
      const text = element.textContent;
      const emoji = getResourceEmoji(resourceName);
      
      if (text.startsWith(emoji)) {
        const value = this.gameState.resources[resourceName] || 0;
        const formattedValue = this.formatValue(value);
        element.textContent = `${emoji} ${formattedValue}`;
      }
    });
  }

  // –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å (–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏)
  highlightResource(resourceName, container) {
    if (!this.isActive()) return;
    
    const resourceElements = container.querySelectorAll('.resource-display');
    resourceElements.forEach(element => {
      const text = element.textContent;
      const emoji = getResourceEmoji(resourceName);
      
      if (text.startsWith(emoji)) {
        element.style.transition = 'all 0.3s ease';
        element.style.backgroundColor = '#4CAF50';
        element.style.color = 'white';
        element.style.padding = '2px 4px';
        element.style.borderRadius = '4px';
        
        // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
        this.createTimeout(() => {
          if (element) {
            element.style.backgroundColor = '';
            element.style.color = '';
            element.style.padding = '';
            element.style.borderRadius = '';
          }
        }, 1000);
      }
    });
  }

  // –ù–û–í–û–ï: –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–±–æ
  highlightComboChange(isIncrease) {
    this.animateComboChange(isIncrease);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  getDisplayStats() {
    return {
      totalResources: Object.keys(this.gameState.resources).length,
      totalValue: Object.values(this.gameState.resources).reduce((sum, val) => sum + (val || 0), 0),
      hasActiveEffects: (this.gameState.buffs && this.gameState.buffs.length > 0) || 
                       (this.gameState.debuffs && this.gameState.debuffs.length > 0),
      currentCombo: this.gameState.combo?.count || 0,
      comboDeadline: this.gameState.combo?.deadline || 0
    };
  }
}