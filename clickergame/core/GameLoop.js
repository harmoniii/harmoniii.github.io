// core/GameLoop.js - –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
import { CleanupMixin } from './CleanupManager.js';
import { eventBus, GameEvents } from './GameEvents.js';
import { UI_CONFIG, GAME_CONSTANTS } from '../config/GameConstants.js';

export class GameLoop extends CleanupMixin {
  constructor(gameState, managers) {
    super();
    
    this.gameState = gameState;
    this.managers = managers;
    
    this.canvas = null;
    this.ctx = null;
    this.angle = 0;
    this.isRunning = false;
    this.animationId = null;
    
    this.initializeCanvas();
    this.bindEvents();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas
  initializeCanvas() {
    this.canvas = document.getElementById('gameCanvas');
    if (!this.canvas) {
      throw new Error('Game canvas not found');
    }
    
    this.canvas.width = UI_CONFIG.CANVAS_SIZE;
    this.canvas.height = UI_CONFIG.CANVAS_SIZE;
    this.ctx = this.canvas.getContext('2d');
    
    if (!this.ctx) {
      throw new Error('Failed to get 2D context');
    }
    
    this.setupCanvasEvents();
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π canvas
  setupCanvasEvents() {
    const getClickAngle = (e) => {
      const rect = this.canvas.getBoundingClientRect();
      const x = e.clientX - rect.left - this.canvas.width / 2;
      const y = e.clientY - rect.top - this.canvas.height / 2;
      return Math.atan2(y, x) - this.angle;
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –º—ã—à–∏
    const clickHandler = (e) => {
      e.preventDefault();
      const clickAngle = getClickAngle(e);
      eventBus.emit(GameEvents.CLICK, clickAngle);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏–π
    const touchHandler = (e) => {
      e.preventDefault();
      if (e.touches && e.touches.length > 0) {
        const clickAngle = getClickAngle(e.touches[0]);
        eventBus.emit(GameEvents.CLICK, clickAngle);
      }
    };

    this.addEventListener(this.canvas, 'click', clickHandler);
    this.addEventListener(this.canvas, 'touchstart', touchHandler);
    this.addEventListener(this.canvas, 'contextmenu', (e) => e.preventDefault());
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
    eventBus.subscribe(GameEvents.CLICK, () => {
      this.gameState.currentRotation = this.angle;
    });
  }

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  start() {
    if (this.isRunning) return;
    
    console.log('üîÑ Starting game loop...');
    this.isRunning = true;
    this.gameLoop();
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  stop() {
    if (!this.isRunning) return;
    
    console.log('‚èπÔ∏è Stopping game loop...');
    this.isRunning = false;
    
    if (this.animationId) {
      cancelAnimationFrame(this.animationId);
      this.animationId = null;
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
  gameLoop() {
    if (!this.isRunning) return;
    
    try {
      // –û—á–∏—â–∞–µ–º canvas
      this.clearCanvas();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
      this.updateRotation();
      
      // –†–∏—Å—É–µ–º –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      this.render();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ gameState
      this.gameState.currentRotation = this.angle;
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Error in game loop:', error);
    }
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
    this.animationId = requestAnimationFrame(() => this.gameLoop());
  }

  // –û—á–∏—Å—Ç–∫–∞ canvas
  clearCanvas() {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
  updateRotation() {
    let rotationSpeed = UI_CONFIG.ROTATION_SPEED;
    
    // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    if (this.gameState.debuffs && this.gameState.debuffs.includes('rapid')) {
      rotationSpeed *= GAME_CONSTANTS.RAPID_SPEED_MULTIPLIER;
    }
    
    if (this.gameState.buffs && this.gameState.buffs.includes('speedBoost')) {
      rotationSpeed *= GAME_CONSTANTS.SPEED_BOOST_MULTIPLIER;
    }
    
    this.angle += rotationSpeed;
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏–≥—Ä–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  render() {
    if (!this.managers.feature || !this.managers.feature.zones) return;
    
    this.drawZones();
    this.drawTargetIndicator();
    this.drawPreviewZone();
  }

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ –∑–æ–Ω
  drawZones() {
    const zones = this.managers.feature.zones;
    if (!zones) return;
    
    const centerX = this.canvas.width / 2;
    const centerY = this.canvas.height / 2;
    const radius = this.canvas.width / 2 - GAME_CONSTANTS.CANVAS_BORDER_WIDTH;
    const totalAngle = 2 * Math.PI;
    const stepAngle = totalAngle / zones.length;
    
    zones.forEach((zone, index) => {
      const startAngle = index * stepAngle + this.angle;
      const endAngle = (index + 1) * stepAngle + this.angle;
      
      // –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ –∑–æ–Ω—ã
      this.ctx.beginPath();
      this.ctx.moveTo(centerX, centerY);
      this.ctx.arc(centerX, centerY, radius, startAngle, endAngle);
      this.ctx.closePath();
      
      // –¶–≤–µ—Ç –∑–æ–Ω—ã
      this.ctx.fillStyle = this.getZoneColor(index);
      this.ctx.fill();
      
      // –û–±–≤–æ–¥–∫–∞ –∑–æ–Ω—ã
      this.ctx.strokeStyle = '#333';
      this.ctx.lineWidth = 1;
      this.ctx.stroke();
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –∑–æ–Ω—ã
  getZoneColor(zoneIndex) {
    // –ë–∞–∑–æ–≤—ã–π —Å–µ—Ä—ã–π —Ü–≤–µ—Ç
    let color = '#888';
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª–µ–≤–∞—è –∑–æ–Ω–∞, –¥–µ–ª–∞–µ–º –µ–µ —Å–≤–µ—Ç–ª–µ–µ
    if (this.gameState.targetZone === zoneIndex) {
      color = '#aaa';
    }
    
    return color;
  }

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã
  drawTargetIndicator() {
    if (typeof this.gameState.targetZone !== 'number') return;
    
    const zones = this.managers.feature.zones;
    if (!zones) return;
    
    const centerX = this.canvas.width / 2;
    const centerY = this.canvas.height / 2;
    const radius = this.canvas.width / 2 - GAME_CONSTANTS.CANVAS_BORDER_WIDTH;
    const totalAngle = 2 * Math.PI;
    const stepAngle = totalAngle / zones.length;
    
    const targetIndex = this.gameState.targetZone;
    const startAngle = targetIndex * stepAngle + this.angle;
    const endAngle = (targetIndex + 1) * stepAngle + this.angle;
    
    // –ö—Ä–∞—Å–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã
    this.ctx.beginPath();
    this.ctx.moveTo(centerX, centerY);
    this.ctx.arc(centerX, centerY, radius, startAngle, endAngle);
    this.ctx.closePath();
    
    this.ctx.strokeStyle = 'red';
    this.ctx.lineWidth = GAME_CONSTANTS.TARGET_ZONE_BORDER_WIDTH;
    this.ctx.stroke();
  }

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–æ–Ω—ã
  drawPreviewZone() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–≤—ã–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞
    if (!this.managers.skill || !this.managers.skill.getSkillLevel('zonePreview')) return;
    
    const zones = this.managers.feature.zones;
    if (!zones) return;
    
    const centerX = this.canvas.width / 2;
    const centerY = this.canvas.height / 2;
    const radius = this.canvas.width / 2 - GAME_CONSTANTS.CANVAS_BORDER_WIDTH;
    const totalAngle = 2 * Math.PI;
    const stepAngle = totalAngle / zones.length;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–æ–Ω—É –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–µ–≤–æ–π
    const nextZone = (this.gameState.targetZone + 1) % zones.length;
    const startAngle = nextZone * stepAngle + this.angle;
    const endAngle = (nextZone + 1) * stepAngle + this.angle;
    
    // –ñ–µ–ª—Ç–∞—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞
    this.ctx.beginPath();
    this.ctx.moveTo(centerX, centerY);
    this.ctx.arc(centerX, centerY, radius, startAngle, endAngle);
    this.ctx.closePath();
    
    this.ctx.strokeStyle = 'yellow';
    this.ctx.lineWidth = GAME_CONSTANTS.PREVIEW_ZONE_BORDER_WIDTH;
    this.ctx.setLineDash([10, 5]);
    this.ctx.stroke();
    this.ctx.setLineDash([]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç–∏—Ä
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
  getCurrentAngle() {
    return this.angle;
  }

  // –ü–æ–ª—É—á–∏—Ç—å canvas
  getCanvas() {
    return this.canvas;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  getContext() {
    return this.ctx;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
  isRunning() {
    return this.isRunning;
  }

  // –ü–æ–ª—É—á–∏—Ç—å FPS (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
  getFPS() {
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ FPS –Ω–∞ –æ—Å–Ω–æ–≤–µ requestAnimationFrame
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç
    return 60;
  }

  // –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä canvas (–¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏)
  resize(width, height) {
    if (this.canvas) {
      this.canvas.width = width;
      this.canvas.height = height;
      console.log(`üñºÔ∏è Canvas resized to ${width}x${height}`);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  getRenderStats() {
    return {
      fps: this.getFPS(),
      angle: this.angle,
      isRunning: this.isRunning,
      canvasSize: {
        width: this.canvas?.width || 0,
        height: this.canvas?.height || 0
      }
    };
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ Destroying GameLoop...');
    
    this.stop();
    super.destroy();
    
    console.log('‚úÖ GameLoop destroyed');
  }
}