// core/GameLoop.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ fallback –∑–æ–Ω–∞–º–∏
import { CleanupMixin } from './CleanupManager.js';
import { eventBus, GameEvents } from './GameEvents.js';
import { UI_CONFIG, GAME_CONSTANTS } from '../config/GameConstants.js';
import { ZONE_COUNT } from '../config/ResourceConfig.js';

export class GameLoop extends CleanupMixin {
  constructor(gameState, managers) {
    super();
    
    this.gameState = gameState;
    this.managers = managers;
    
    this.canvas = null;
    this.ctx = null;
    this.angle = 0;
    this.running = false;
    this.animationId = null;
    
    // FPS –∫–æ–Ω—Ç—Ä–æ–ª—å
    this.targetFPS = 60;
    this.frameTime = 1000 / this.targetFPS;
    this.lastFrameTime = 0;
    this.deltaTime = 0;
    this.actualFPS = 0;
    this.frameCount = 0;
    this.fpsUpdateTime = 0;
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    this.rotationDirection = 1; // 1 = –æ–±—ã—á–Ω–æ–µ, -1 = –æ–±—Ä–∞—Ç–Ω–æ–µ
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    this.needsRedraw = true;
    this.lastAngle = 0;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤
    this.forceRedrawCounter = 0;
    this.forceRedrawInterval = 30; // –ö–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤
    
    this.initializeCanvas();
    this.bindEvents();
    this.setupVisibilityHandling();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è canvas
  initializeCanvas() {
    this.canvas = document.getElementById('gameCanvas');
    if (!this.canvas) {
      throw new Error('Game canvas not found');
    }
    
    this.canvas.width = UI_CONFIG.CANVAS_SIZE;
    this.canvas.height = UI_CONFIG.CANVAS_SIZE;
    this.ctx = this.canvas.getContext('2d');
    
    if (!this.ctx) {
      throw new Error('Failed to get 2D context');
    }
    
    this.setupCanvasEvents();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  setupVisibilityHandling() {
    this.addEventListener(document, 'visibilitychange', () => {
      if (document.hidden) {
        this.targetFPS = 30;
      } else {
        this.targetFPS = 60;
        this.needsRedraw = true;
      }
      this.frameTime = 1000 / this.targetFPS;
    });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π canvas
  setupCanvasEvents() {
    const getClickAngle = (e) => {
      const rect = this.canvas.getBoundingClientRect();
      const x = e.clientX - rect.left - this.canvas.width / 2;
      const y = e.clientY - rect.top - this.canvas.height / 2;
      return Math.atan2(y, x) - this.angle;
    };

    const clickHandler = (e) => {
      e.preventDefault();
      const clickAngle = getClickAngle(e);
      eventBus.emit(GameEvents.CLICK, clickAngle);
      this.needsRedraw = true;
    };
    
    const touchHandler = (e) => {
      e.preventDefault();
      if (e.touches && e.touches.length > 0) {
        const clickAngle = getClickAngle(e.touches[0]);
        eventBus.emit(GameEvents.CLICK, clickAngle);
        this.needsRedraw = true;
      }
    };

    this.addEventListener(this.canvas, 'click', clickHandler);
    this.addEventListener(this.canvas, 'touchstart', touchHandler);
    this.addEventListener(this.canvas, 'contextmenu', (e) => e.preventDefault());
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    eventBus.subscribe(GameEvents.CLICK, () => {
      this.gameState.currentRotation = this.angle;
    });
    
    eventBus.subscribe(GameEvents.DEBUFF_APPLIED, (data) => {
      if (data.id === 'reverseControls') {
        this.updateRotationDirection();
        this.needsRedraw = true;
      }
    });
    
    eventBus.subscribe(GameEvents.DEBUFF_EXPIRED, (data) => {
      if (data.id === 'reverseControls') {
        this.updateRotationDirection();
        this.needsRedraw = true;
      }
    });

    eventBus.subscribe(GameEvents.BUFF_APPLIED, () => {
      this.needsRedraw = true;
    });
    
    eventBus.subscribe(GameEvents.BUFF_EXPIRED, () => {
      this.needsRedraw = true;
    });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–æ–Ω
    eventBus.subscribe(GameEvents.ZONES_SHUFFLED, (newTargetZone) => {
      console.log(`üéØ GameLoop: Zones shuffled, new target: ${newTargetZone}`);
      this.gameState.targetZone = newTargetZone;
      this.needsRedraw = true;
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–¥—Ä–∞—Ö
      this.forceRedrawCounter = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
      for (let i = 0; i < 5; i++) {
        setTimeout(() => {
          this.needsRedraw = true;
        }, i * 50);
      }
    });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–±–æ
    eventBus.subscribe(GameEvents.COMBO_CHANGED, () => {
      this.needsRedraw = true;
    });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
  updateRotationDirection() {
    const hasReverseControls = this.gameState.debuffs && 
                              this.gameState.debuffs.includes('reverseControls');
    
    this.rotationDirection = hasReverseControls ? -1 : 1;
  }

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  start() {
    if (this.running) return;
    
    console.log('üîÑ Starting game loop...');
    this.running = true;
    this.lastFrameTime = performance.now();
    this.gameLoop(this.lastFrameTime);
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  stop() {
    if (!this.running) return;
    
    console.log('‚èπÔ∏è Stopping game loop...');
    this.running = false;
    
    if (this.animationId) {
      cancelAnimationFrame(this.animationId);
      this.animationId = null;
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª —Å FPS –∫–æ–Ω—Ç—Ä–æ–ª–µ–º
  gameLoop(currentTime) {
    if (!this.running) return;
    
    try {
      const elapsed = currentTime - this.lastFrameTime;
      
      if (elapsed < this.frameTime) {
        this.animationId = requestAnimationFrame((time) => this.gameLoop(time));
        return;
      }
      
      this.deltaTime = elapsed;
      this.lastFrameTime = currentTime;
      this.updateFPSCounter(currentTime);
      
      this.updateRotationDirection();
      
      const angleChanged = this.updateRotation();
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–æ–Ω
      this.forceRedrawCounter++;
      const shouldForceRedraw = this.forceRedrawCounter >= this.forceRedrawInterval;
      
      if (shouldForceRedraw) {
        this.forceRedrawCounter = 0;
        this.needsRedraw = true;
      }
      
      if (this.needsRedraw || angleChanged || shouldForceRedraw) {
        this.render();
        this.needsRedraw = false;
      }
      
      this.gameState.currentRotation = this.angle;
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Error in game loop:', error);
    }
    
    this.animationId = requestAnimationFrame((time) => this.gameLoop(time));
  }

  // –°—á–µ—Ç—á–∏–∫ FPS
  updateFPSCounter(currentTime) {
    this.frameCount++;
    
    if (currentTime - this.fpsUpdateTime >= 1000) {
      this.actualFPS = this.frameCount;
      this.frameCount = 0;
      this.fpsUpdateTime = currentTime;
      
      if (this.actualFPS < 50) {
        console.warn(`‚ö†Ô∏è Low FPS detected: ${this.actualFPS}`);
      }
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ canvas
  clearCanvas() {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
  updateRotation() {
    let rotationSpeed = UI_CONFIG.ROTATION_SPEED;
    
    if (this.gameState.debuffs && this.gameState.debuffs.includes('rapid')) {
      rotationSpeed *= GAME_CONSTANTS.RAPID_SPEED_MULTIPLIER;
    }
    
    if (this.gameState.buffs && this.gameState.buffs.includes('speedBoost')) {
      rotationSpeed *= GAME_CONSTANTS.SPEED_BOOST_MULTIPLIER;
    }
    
    const rotationDelta = rotationSpeed * this.rotationDirection * (this.deltaTime / 16.67);
    const newAngle = this.angle + rotationDelta;
    
    const angleChanged = Math.abs(newAngle - this.lastAngle) > 0.001;
    
    this.angle = newAngle;
    this.lastAngle = this.angle;
    
    if (this.angle > 2 * Math.PI) {
      this.angle -= 2 * Math.PI;
    } else if (this.angle < 0) {
      this.angle += 2 * Math.PI;
    }
    
    return angleChanged;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∑–æ–Ω
  render() {
    this.clearCanvas();
    this.drawZones();
    this.drawReverseIndicator();
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∑–æ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º fallback
  drawZones() {
    const centerX = this.canvas.width / 2;
    const centerY = this.canvas.height / 2;
    const radius = this.canvas.width / 2 - 10;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–Ω —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    let zonesData = [];
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–æ–Ω—ã –∏–∑ FeatureManager/ZoneManager
      if (this.managers.feature && 
          typeof this.managers.feature.getZonesForRendering === 'function') {
        
        zonesData = this.managers.feature.getZonesForRendering();
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–æ–Ω
        if (!Array.isArray(zonesData) || zonesData.length === 0) {
          console.warn('‚ö†Ô∏è Invalid zones data from FeatureManager, using fallback');
          zonesData = this.createFallbackZones();
        }
      } else {
        console.warn('‚ö†Ô∏è FeatureManager not available, using fallback rendering');
        zonesData = this.createFallbackZones();
      }
    } catch (error) {
      console.error('‚ùå Error getting zones for rendering:', error);
      zonesData = this.createFallbackZones();
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–æ–Ω –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
    if (!Array.isArray(zonesData) || zonesData.length === 0) {
      console.error('‚ùå No valid zones available for rendering');
      return;
    }
    
    // –†–∏—Å—É–µ–º –∫–∞–∂–¥—É—é –∑–æ–Ω—É
    zonesData.forEach((zoneData, index) => {
      try {
        const { isTarget, color, startAngle, endAngle } = zoneData;
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã
        if (typeof startAngle !== 'number' || typeof endAngle !== 'number') {
          console.warn(`‚ö†Ô∏è Invalid zone angles for zone ${index}:`, zoneData);
          return;
        }
        
        const adjustedStartAngle = startAngle + this.angle;
        const adjustedEndAngle = endAngle + this.angle;
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ –∑–æ–Ω—ã
        this.ctx.beginPath();
        this.ctx.moveTo(centerX, centerY);
        this.ctx.arc(centerX, centerY, radius, adjustedStartAngle, adjustedEndAngle);
        this.ctx.closePath();
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –∏–∑ ZoneManager —Å fallback
        this.ctx.fillStyle = color || '#E5E5E5';
        this.ctx.fill();
        
        // –û–±–≤–æ–¥–∫–∞ –∑–æ–Ω—ã
        this.ctx.strokeStyle = isTarget ? '#FF0000' : '#333333';
        this.ctx.lineWidth = isTarget ? 4 : 1;
        this.ctx.stroke();
        
        // –ü–æ–¥–ø–∏—Å—å –∑–æ–Ω—ã
        this.drawZoneLabel(centerX, centerY, radius, adjustedStartAngle, adjustedEndAngle, 
                          index, zoneData.type, isTarget);
        
      } catch (error) {
        console.warn(`‚ö†Ô∏è Error rendering zone ${index}:`, error);
      }
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ fallback –∑–æ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ZONE_COUNT
  createFallbackZones() {
    console.log('üéØ Creating fallback zones...');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º ZONE_COUNT –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    const zoneCount = ZONE_COUNT;
    const stepAngle = (2 * Math.PI) / zoneCount;
    const targetZone = this.gameState.targetZone || 0;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–∞–ª–∏–¥–∏—Ä—É–µ–º targetZone
    const validTargetZone = (targetZone >= 0 && targetZone < zoneCount) ? targetZone : 0;
    
    const fallbackZones = Array.from({ length: zoneCount }, (_, i) => {
      const isTarget = (i === validTargetZone);
      let color = '#E5E5E5'; // –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      let type = { id: 'inactive' };
      
      if (isTarget) {
        color = '#C41E3A'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Ü–µ–ª–µ–≤–æ–π
        type = { id: 'target' };
      }
      
      return {
        index: i,
        type,
        isTarget,
        color,
        startAngle: i * stepAngle,
        endAngle: (i + 1) * stepAngle
      };
    });
    
    console.log(`‚úÖ Created ${zoneCount} fallback zones with target at ${validTargetZone}`);
    return fallbackZones;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –∑–æ–Ω
  drawZoneLabel(centerX, centerY, radius, startAngle, endAngle, zoneIndex, zoneType, isTarget) {
    try {
      const midAngle = (startAngle + endAngle) / 2;
      const labelRadius = radius * 0.7;
      const labelX = centerX + Math.cos(midAngle) * labelRadius;
      const labelY = centerY + Math.sin(midAngle) * labelRadius;
      
      this.ctx.save();
      this.ctx.font = 'bold 18px Arial';
      this.ctx.textAlign = 'center';
      this.ctx.textBaseline = 'middle';
      this.ctx.fillStyle = '#FFFFFF';
      this.ctx.strokeStyle = '#000000';
      this.ctx.lineWidth = 3;
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∑–æ–Ω—ã
      let label = this.getZoneIcon(zoneType, isTarget);
      
      if (label) {
        this.ctx.strokeText(label, labelX, labelY);
        this.ctx.fillText(label, labelX, labelY);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∑–æ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
      if (isTarget && window.gameDebug) {
        this.ctx.font = 'bold 12px Arial';
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.strokeStyle = '#000000';
        this.ctx.lineWidth = 2;
        const debugLabel = `${zoneIndex}`;
        this.ctx.strokeText(debugLabel, labelX, labelY + 25);
        this.ctx.fillText(debugLabel, labelX, labelY + 25);
      }
      
      this.ctx.restore();
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error drawing zone label for zone ${zoneIndex}:`, error);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∑–æ–Ω—ã
  getZoneIcon(zoneType, isTarget) {
    try {
      if (isTarget || (zoneType && zoneType.id === 'target')) {
        return 'üéØ';
      }
      
      if (!zoneType || !zoneType.id) {
        return '';
      }
      
      switch (zoneType.id) {
        case 'energy':
          return '‚ö°';
        case 'bonus':
          return 'üí∞';
        case 'inactive':
        default:
          return '';
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error getting zone icon:', error);
      return '';
    }
  }

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
  drawReverseIndicator() {
    if (!this.gameState.debuffs || !this.gameState.debuffs.includes('reverseControls')) {
      return;
    }
    
    const centerX = this.canvas.width / 2;
    const centerY = this.canvas.height / 2;
    
    this.ctx.save();
    this.ctx.translate(centerX, centerY);
    this.ctx.rotate(this.angle + (this.rotationDirection > 0 ? 0 : Math.PI));
    
    this.ctx.beginPath();
    this.ctx.moveTo(0, -50);
    this.ctx.lineTo(-15, -30);
    this.ctx.lineTo(-5, -30);
    this.ctx.lineTo(-5, -10);
    this.ctx.lineTo(5, -10);
    this.ctx.lineTo(5, -30);
    this.ctx.lineTo(15, -30);
    this.ctx.closePath();
    
    this.ctx.fillStyle = this.rotationDirection < 0 ? '#FF4444' : '#44FF44';
    this.ctx.fill();
    
    this.ctx.strokeStyle = '#000';
    this.ctx.lineWidth = 2;
    this.ctx.stroke();
    
    this.ctx.restore();
    
    if (this.rotationDirection < 0) {
      this.ctx.save();
      this.ctx.font = 'bold 16px Arial';
      this.ctx.fillStyle = '#FF4444';
      this.ctx.textAlign = 'center';
      this.ctx.textBaseline = 'middle';
      this.ctx.fillText('üôÉ REVERSE', centerX, centerY + 80);
      this.ctx.restore();
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
  forceRedraw() {
    console.log('üîÑ GameLoop: Force redraw requested');
    
    this.needsRedraw = true;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
    if (this.running) {
      this.render();
      
      setTimeout(() => {
        if (this.running) {
          this.needsRedraw = true;
          this.render();
        }
      }, 16); // –û–¥–∏–Ω –∫–∞–¥—Ä –ø—Ä–∏ 60 FPS
      
      setTimeout(() => {
        if (this.running) {
          this.needsRedraw = true;
          this.render();
        }
      }, 32); // –î–≤–∞ –∫–∞–¥—Ä–∞ –ø—Ä–∏ 60 FPS
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞
  getCurrentAngle() {
    return this.angle;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è
  getRotationDirection() {
    return this.rotationDirection;
  }

  // –ü–æ–ª—É—á–∏—Ç—å canvas
  getCanvas() {
    return this.canvas;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  getContext() {
    return this.ctx;
  }

  // –ú–µ—Ç–æ–¥ isRunning –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  isRunning() {
    return this.running;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π FPS
  getFPS() {
    return this.actualFPS;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  getRenderStats() {
    return {
      fps: this.actualFPS,
      targetFPS: this.targetFPS,
      angle: this.angle,
      rotationDirection: this.rotationDirection,
      running: this.running,
      needsRedraw: this.needsRedraw,
      deltaTime: this.deltaTime,
      canvasSize: {
        width: this.canvas?.width || 0,
        height: this.canvas?.height || 0
      },
      forceRedrawCounter: this.forceRedrawCounter,
      targetZone: this.gameState.targetZone,
      zonesAvailable: !!(this.managers.feature && 
                        typeof this.managers.feature.getZonesForRendering === 'function'),
      zoneCount: ZONE_COUNT
    };
  }

  // –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä canvas (–¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏)
  resize(width, height) {
    if (this.canvas) {
      this.canvas.width = width;
      this.canvas.height = height;
      this.needsRedraw = true;
      console.log(`üñºÔ∏è Canvas resized to ${width}x${height}`);
    }
  }

  // –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  forceUpdateDirection() {
    this.updateRotationDirection();
    this.needsRedraw = true;
    console.log(`üîÑ Force updated rotation direction: ${this.rotationDirection}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ ZoneManager
  hasZoneManager() {
    return !!(this.managers.feature && 
             typeof this.managers.feature.getZonesForRendering === 'function');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–æ–Ω–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  getZoneRenderInfo() {
    try {
      if (this.hasZoneManager()) {
        const zones = this.managers.feature.getZonesForRendering();
        return {
          available: true,
          zones: zones,
          debugInfo: this.managers.feature.getZonesDebugInfo ? 
                    this.managers.feature.getZonesDebugInfo() : 'No debug info',
          zoneCount: zones ? zones.length : 0
        };
      } else {
        return {
          available: false,
          fallbackUsed: true,
          targetZone: this.gameState.targetZone,
          zoneCount: ZONE_COUNT
        };
      }
    } catch (error) {
      console.error('‚ùå Error getting zone render info:', error);
      return {
        available: false,
        error: error.message,
        fallbackUsed: true,
        targetZone: this.gameState.targetZone,
        zoneCount: ZONE_COUNT
      };
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  validateRendering() {
    const validation = {
      canvasReady: !!(this.canvas && this.ctx),
      zonesAvailable: this.hasZoneManager(),
      gameStateReady: !!(this.gameState && typeof this.gameState.targetZone === 'number'),
      managersReady: !!(this.managers && this.managers.feature),
      errors: []
    };
    
    if (!validation.canvasReady) {
      validation.errors.push('Canvas or context not initialized');
    }
    
    if (!validation.gameStateReady) {
      validation.errors.push('Game state not ready');
    }
    
    if (!validation.managersReady) {
      validation.errors.push('Managers not ready');
    }
    
    return validation;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  getPerformanceInfo() {
    return {
      fps: this.actualFPS,
      targetFPS: this.targetFPS,
      frameTime: this.frameTime,
      deltaTime: this.deltaTime,
      running: this.running,
      redrawsPerformed: this.forceRedrawCounter,
      lastFrameTime: this.lastFrameTime,
      animationId: this.animationId
    };
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ Destroying GameLoop...');
    
    this.stop();
    super.destroy();
    
    console.log('‚úÖ GameLoop destroyed');
  }
}