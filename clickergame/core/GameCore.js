// core/GameCore.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –∑–æ–Ω
import { CleanupMixin } from './CleanupManager.js';
import { GameState } from './GameState.js';
import { StorageManager } from './StorageManager.js';
import { eventBus, GameEvents } from './GameEvents.js';
import { FeatureManager } from '../managers/FeatureManager.js';
import { BuildingManager } from '../managers/BuildingManager.js';
import { SkillManager } from '../managers/SkillManager.js';
import { MarketManager } from '../managers/MarketManager.js';
import { BuffManager } from '../effects/BuffManager.js';
import { AchievementManager } from '../managers/AchievementManager.js';
import { EnergyManager } from '../managers/EnergyManager.js';
import UIManager from '../ui/UIManager.js';
import { GameLoop } from './GameLoop.js';
import { GAME_CONSTANTS } from '../config/GameConstants.js';

export class GameCore extends CleanupMixin {
  constructor() {
    super();
    
    this.gameState = null;
    this.storageManager = new StorageManager();
    this.managers = {};
    this.gameLoop = null;
    this.achievementTimers = {
      combo: 0,
      resource: 0
    };
    
    // –ù–û–í–û–ï: –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–æ–Ω
    this.zoneSyncMonitor = {
      checkInterval: null,
      lastSyncCheck: 0,
      syncErrors: 0,
      maxSyncErrors: 3
    };
    
    this.initialize();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  async initialize() {
    try {
      console.log('üéÆ Initializing Advanced Clicker v1.0.8...');
      
      await this.initializeGameState();
      await this.initializeManagers();
      await this.setupManagerReferences();
      await this.initializeUI();
      await this.startGameLoop();
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–æ–Ω
      this.startZoneSynchronizationSystem();
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      this.bindSystemEvents();
      
      // –ù–û–í–û–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
      this.performInitialZoneSync();
      
      console.log('‚úÖ Game initialized successfully');
      eventBus.emit(GameEvents.NOTIFICATION, 'üéÆ Game loaded successfully!');
      
    } catch (error) {
      console.error('üíÄ Critical error during initialization:', error);
      this.handleInitializationError(error);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  async initializeGameState() {
    console.log('üìä Initializing game state...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    const saveData = this.storageManager.load();
    
    this.gameState = new GameState();
    
    if (saveData) {
      try {
        this.gameState.loadSaveData(saveData);
        console.log('‚úÖ Save data loaded');
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to load save data, using default state:', error);
      }
    } else {
      console.log('‚ÑπÔ∏è No save data found, using default state');
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º GameState –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    this.cleanupManager.registerComponent(this.gameState, 'GameState');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
  async initializeManagers() {
    console.log('üîß Initializing managers...');
    
    try {
      // –®–ê–ì–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ú–ï–ù–ï–î–ñ–ï–†–û–í (–ø–æ—Ä—è–¥–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω):
      
      // 1. –ë–∞–∑–æ–≤—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
      this.managers.energy = new EnergyManager(this.gameState);
      this.managers.achievement = new AchievementManager(this.gameState);
      this.managers.building = new BuildingManager(this.gameState);
      this.managers.skill = new SkillManager(this.gameState);
      this.managers.market = new MarketManager(this.gameState);
      
      console.log('‚úÖ Basic managers initialized');
      
      // 2. BuffManager (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç gameState)
      this.managers.buff = new BuffManager(this.gameState);
      console.log('‚úÖ BuffManager initialized');
      
      // 3. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: FeatureManager —Å–æ–∑–¥–∞–µ—Ç—Å—è –ü–û–°–õ–ï–î–ù–ò–ú
      // –û–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–æ–Ω–∞–º–∏ –∏ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –¥—Ä—É–≥–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
      this.managers.feature = new FeatureManager(this.gameState, this.managers.buff);
      console.log('‚úÖ FeatureManager initialized');
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
      Object.entries(this.managers).forEach(([name, manager]) => {
        this.cleanupManager.registerComponent(manager, `${name}Manager`);
      });
      
      console.log('‚úÖ All managers initialized and registered');
      
    } catch (error) {
      console.error('üíÄ Failed to initialize managers:', error);
      throw error;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –º–µ–∂–¥—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
  async setupManagerReferences() {
    console.log('üîó Setting up manager references...');
    
    try {
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ gameState –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      this.gameState.buffManager = this.managers.buff;
      this.gameState.energyManager = this.managers.energy;
      this.gameState.achievementManager = this.managers.achievement;
      this.gameState.buildingManager = this.managers.building;
      this.gameState.skillManager = this.managers.skill;
      this.gameState.marketManager = this.managers.market;
      this.gameState.featureManager = this.managers.feature;
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      this.gameState.managers = this.managers;
      this.gameState.featureMgr = this.managers.feature;
      
      console.log('‚úÖ Manager references set up successfully');
      
    } catch (error) {
      console.error('üíÄ Failed to set up manager references:', error);
      throw error;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
  async initializeUI() {
    console.log('üñ•Ô∏è Initializing UI...');
    
    try {
      this.managers.ui = new UIManager(this.gameState);
      this.cleanupManager.registerComponent(this.managers.ui, 'UIManager');
      
      console.log('‚úÖ UI initialized');
      
    } catch (error) {
      console.error('üíÄ Failed to initialize UI:', error);
      throw error;
    }
  }

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  async startGameLoop() {
    console.log('üîÑ Starting game loop...');
    
    try {
      this.gameLoop = new GameLoop(this.gameState, this.managers);
      this.cleanupManager.registerComponent(this.gameLoop, 'GameLoop');
      
      this.gameLoop.start();
      console.log('‚úÖ Game loop started');
      
    } catch (error) {
      console.error('üíÄ Failed to start game loop:', error);
      throw error;
    }
  }

  // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–æ–Ω
  startZoneSynchronizationSystem() {
    console.log('üéØ Starting zone synchronization system...');
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–æ–Ω –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    this.zoneSyncMonitor.checkInterval = this.createInterval(() => {
      this.checkZoneSynchronization();
    }, 2000, 'zone-sync-monitor');
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–æ–Ω
    eventBus.subscribe(GameEvents.ZONES_SHUFFLED, (newTargetZone) => {
      console.log(`üéØ Zone shuffle detected: new target = ${newTargetZone}`);
      this.validateZoneSync(newTargetZone);
    });
    
    console.log('‚úÖ Zone synchronization system started');
  }

  // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–æ–Ω
  checkZoneSynchronization() {
    if (!this.isGameActive()) return;
    
    try {
      const now = Date.now();
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–æ–∫
      if (now - this.zoneSyncMonitor.lastSyncCheck < 1000) {
        return;
      }
      this.zoneSyncMonitor.lastSyncCheck = now;
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–æ–Ω –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const gameStateTarget = this.gameState.targetZone;
      const featureManagerInfo = this.managers.feature?.getZonesDebugInfo?.();
      const gameLoopSyncInfo = this.gameLoop?.getZoneSyncInfo?.();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      const isFeatureSynced = featureManagerInfo?.targetZone === gameStateTarget;
      const isGameLoopSynced = gameLoopSyncInfo?.gameLoopTargetZone === gameStateTarget;
      
      if (!isFeatureSynced || !isGameLoopSynced) {
        this.zoneSyncMonitor.syncErrors++;
        console.warn(`‚ö†Ô∏è Zone desync detected! GameState: ${gameStateTarget}, Feature: ${featureManagerInfo?.targetZone}, GameLoop: ${gameLoopSyncInfo?.gameLoopTargetZone}`);
        
        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
        if (this.zoneSyncMonitor.syncErrors >= this.zoneSyncMonitor.maxSyncErrors) {
          console.log('üîß Too many sync errors, performing emergency zone sync...');
          this.performEmergencyZoneSync();
        }
      } else {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.zoneSyncMonitor.syncErrors = 0;
      }
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Error in zone synchronization check:', error);
    }
  }

  // –ù–û–í–û–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–æ–Ω –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è
  validateZoneSync(expectedTargetZone) {
    this.createTimeout(() => {
      const featureManagerInfo = this.managers.feature?.getZonesDebugInfo?.();
      const gameLoopSyncInfo = this.gameLoop?.getZoneSyncInfo?.();
      
      const featureTarget = featureManagerInfo?.targetZone;
      const gameLoopTarget = gameLoopSyncInfo?.gameLoopTargetZone;
      
      if (featureTarget !== expectedTargetZone || gameLoopTarget !== expectedTargetZone) {
        console.warn(`üö® Zone sync validation failed! Expected: ${expectedTargetZone}, Feature: ${featureTarget}, GameLoop: ${gameLoopTarget}`);
        this.performEmergencyZoneSync(expectedTargetZone);
      } else {
        console.log(`‚úÖ Zone sync validation passed for target ${expectedTargetZone}`);
      }
    }, 100); // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  }

  // –ù–û–í–û–ï: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–æ–Ω
  performEmergencyZoneSync(targetZone = null) {
    console.log('üö® Performing emergency zone synchronization...');
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º targetZone –∏–∑ gameState –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
      const correctTargetZone = targetZone !== null ? targetZone : this.gameState.targetZone;
      
      console.log(`üîß Setting correct target zone: ${correctTargetZone}`);
      
      // 1. –û–±–Ω–æ–≤–ª—è–µ–º gameState (–∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã)
      this.gameState.targetZone = correctTargetZone;
      this.gameState.previousTargetZone = correctTargetZone;
      
      // 2. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º FeatureManager
      if (this.managers.feature && typeof this.managers.feature.setTargetZone === 'function') {
        this.managers.feature.setTargetZone(correctTargetZone);
        console.log('‚úÖ FeatureManager synchronized');
      }
      
      // 3. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º GameLoop
      if (this.gameLoop && typeof this.gameLoop.forceSyncAll === 'function') {
        this.gameLoop.forceSyncAll();
        console.log('‚úÖ GameLoop synchronized');
      }
      
      // 4. –û–±–Ω–æ–≤–ª—è–µ–º UI
      if (this.managers.ui && typeof this.managers.ui.forceUpdate === 'function') {
        this.managers.ui.forceUpdate();
        console.log('‚úÖ UI synchronized');
      }
      
      // 5. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
      this.zoneSyncMonitor.syncErrors = 0;
      
      console.log('‚úÖ Emergency zone synchronization completed');
      
    } catch (error) {
      console.error('üíÄ Emergency zone sync failed:', error);
    }
  }

  // –ù–û–í–û–ï: –ü–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–æ–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  performInitialZoneSync() {
    console.log('üéØ Performing initial zone synchronization...');
    
    this.createTimeout(() => {
      try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º targetZone –Ω–∞ 0 –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        const initialTargetZone = 0;
        
        this.gameState.targetZone = initialTargetZone;
        this.gameState.previousTargetZone = initialTargetZone;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if (this.managers.feature) {
          this.managers.feature.forceZoneSync();
        }
        
        if (this.gameLoop) {
          this.gameLoop.forceSyncAll();
        }
        
        // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        eventBus.emit(GameEvents.ZONES_SHUFFLED, initialTargetZone);
        
        console.log('‚úÖ Initial zone synchronization completed');
        
      } catch (error) {
        console.error('üíÄ Initial zone sync failed:', error);
      }
    }, 500); // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  bindSystemEvents() {
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    this.createInterval(() => {
      this.autoSave();
    }, 30000, 'auto-save'); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    this.createInterval(() => {
      this.checkAchievements();
    }, GAME_CONSTANTS.COMBO_CHECK_INTERVAL, 'achievement-check');
    
    // –°–æ–±—ã—Ç–∏–µ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
    eventBus.subscribe(GameEvents.GAME_RESET, () => {
      this.handleGameReset();
    });
    
    // –°–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏
    eventBus.subscribe(GameEvents.SAVE_COMPLETED, () => {
      console.log('üíæ Save completed');
    });
    
    eventBus.subscribe(GameEvents.LOAD_COMPLETED, () => {
      console.log('üìÅ Load completed');
      this.restartManagersAfterLoad();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    this.addEventListener(window, 'beforeunload', (e) => {
      this.handlePageUnload(e);
    });
    
    this.addEventListener(window, 'unload', () => {
      this.destroy();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    this.addEventListener(document, 'visibilitychange', () => {
      if (document.hidden) {
        this.autoSave();
      }
    });
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  autoSave() {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    if (!this.gameState) {
      console.warn('‚ö†Ô∏è AutoSave: gameState is null, skipping save');
      return false;
    }

    if (this.isDestroyed === true) {
      console.warn('‚ö†Ô∏è AutoSave: GameCore is destroyed, skipping save');
      return false;
    }

    if (this.gameState.isDestroyed === true) {
      console.warn('‚ö†Ô∏è AutoSave: GameState is destroyed, skipping save');
      return false;
    }

    if (!this.storageManager) {
      console.warn('‚ö†Ô∏è AutoSave: storageManager is null, skipping save');
      return false;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const saveData = this.gameState.getSaveData();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏
      if (this.managers.energy) {
        saveData.energy = this.managers.energy.getSaveData();
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      if (this.managers.achievement) {
        saveData.achievements = this.managers.achievement.getSaveData();
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      const success = this.storageManager.safeSave({
        ...saveData,
        getSaveData: () => saveData // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      });
      
      if (success) {
        console.log('üíæ Auto-save completed successfully');
      } else {
        console.warn('‚ö†Ô∏è Auto-save failed but no error thrown');
      }
      
      return success;
      
    } catch (error) {
      console.error('‚ùå Auto-save failed with error:', error);
      return false;
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –∑–æ–Ω
  restartManagersAfterLoad() {
    console.log('üîÑ Restarting managers after load...');
    
    try {
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–¥–∞–Ω–∏–π
      if (this.managers.building) {
        this.managers.building.stopAllProduction();
        this.managers.building.startProduction();
        console.log('‚úÖ Building production restarted');
      }

      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∞–≤—ã–∫–æ–≤ –∏ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
      if (this.managers.skill) {
        this.managers.skill.stopAllGeneration();
        this.managers.skill.startGeneration();
        console.log('‚úÖ Skill generation restarted');
      }

      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É
      if (this.managers.energy) {
        this.managers.energy.forceUpdate();
        console.log('‚úÖ Energy system updated');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      if (this.managers.achievement) {
        this.managers.achievement.forceCheckAllAchievements();
        console.log('‚úÖ Achievements checked');
      }

      // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–æ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      this.createTimeout(() => {
        this.performEmergencyZoneSync();
        console.log('‚úÖ Zones fully synchronized after load');
      }, 300);

      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      if (this.managers.ui) {
        this.createTimeout(() => {
          this.managers.ui.forceUpdate();
          console.log('‚úÖ UI updated after load');
        }, 500);
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
      if (this.gameLoop) {
        this.createTimeout(() => {
          this.gameLoop.forceRedraw();
          console.log('‚úÖ Game loop refreshed after load');
        }, 600);
      }

    } catch (error) {
      console.warn('‚ö†Ô∏è Some managers failed to restart after load:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  checkAchievements() {
    if (!this.gameState || !this.managers.skill) return;
    
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∫–æ–º–±–æ
    if (now - this.achievementTimers.combo > GAME_CONSTANTS.COMBO_CHECK_INTERVAL) {
      this.achievementTimers.combo = now;
      this.checkComboAchievements();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
    if (now - this.achievementTimers.resource > GAME_CONSTANTS.RESOURCE_CHECK_INTERVAL) {
      this.achievementTimers.resource = now;
      this.checkResourceAchievements();
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∫–æ–º–±–æ
  checkComboAchievements() {
    try {
      const comboCount = this.gameState.combo?.count || 0;
      
      if (comboCount >= GAME_CONSTANTS.COMBO_MILESTONE_3) {
        this.managers.skill.addSkillPoints(5);
        eventBus.emit(GameEvents.NOTIFICATION, 'üèÜ Master Combo! +5 Skill Points');
      } else if (comboCount >= GAME_CONSTANTS.COMBO_MILESTONE_2) {
        this.managers.skill.addSkillPoints(2);
        eventBus.emit(GameEvents.NOTIFICATION, 'üéØ Great Combo! +2 Skill Points');
      } else if (comboCount >= GAME_CONSTANTS.COMBO_MILESTONE_1) {
        this.managers.skill.addSkillPoints(1);
        eventBus.emit(GameEvents.NOTIFICATION, '‚≠ê Nice Combo! +1 Skill Point');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error in combo achievements:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤
  checkResourceAchievements() {
    try {
      const totalResources = Object.values(this.gameState.resources || {})
        .filter(val => typeof val === 'number' && !isNaN(val))
        .reduce((sum, val) => sum + val, 0);
      
      if (totalResources >= GAME_CONSTANTS.RESOURCE_MILESTONE_3) {
        this.managers.skill.addSkillPoints(5);
        eventBus.emit(GameEvents.NOTIFICATION, 'üí∞ Resource Master! +5 Skill Points');
      } else if (totalResources >= GAME_CONSTANTS.RESOURCE_MILESTONE_2) {
        this.managers.skill.addSkillPoints(3);
        eventBus.emit(GameEvents.NOTIFICATION, 'üìà Resource Collector! +3 Skill Points');
      } else if (totalResources >= GAME_CONSTANTS.RESOURCE_MILESTONE_1) {
        this.managers.skill.addSkillPoints(1);
        eventBus.emit(GameEvents.NOTIFICATION, 'üíé First Milestone! +1 Skill Point');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error in resource achievements:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã
  handleGameReset() {
    console.log('üî• Handling game reset...');
    
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
      if (this.gameLoop) {
        this.gameLoop.stop();
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
      this.stopAllGameProcesses();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É
      this.destroy();
      
      console.log('‚úÖ Game reset handled');
      
    } catch (error) {
      console.error('üíÄ Error handling game reset:', error);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
  stopAllGameProcesses() {
    try {
      console.log('üõë Stopping all game processes...');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–æ–Ω
      if (this.zoneSyncMonitor.checkInterval) {
        this.cleanupManager.clearInterval(this.zoneSyncMonitor.checkInterval);
        this.zoneSyncMonitor.checkInterval = null;
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      if (this.managers.buff && typeof this.managers.buff.clearAllEffects === 'function') {
        this.managers.buff.clearAllEffects();
      }
      
      if (this.managers.building && typeof this.managers.building.stopAllProduction === 'function') {
        this.managers.building.stopAllProduction();
      }
      
      if (this.managers.skill && typeof this.managers.skill.stopAllGeneration === 'function') {
        this.managers.skill.stopAllGeneration();
      }
      
      console.log('‚úÖ All game processes stopped');
    } catch (error) {
      console.warn('‚ö†Ô∏è Error stopping game processes:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  handlePageUnload(event) {
    console.log('üëã Page unloading, saving...');
    
    try {
      this.autoSave();
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to save on page unload:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  handleInitializationError(error) {
    const errorMessage = `Game initialization failed: ${error.message}`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const errorDiv = document.createElement('div');
    errorDiv.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: #ff4444;
      color: white;
      padding: 20px;
      border-radius: 10px;
      z-index: 10000;
      text-align: center;
      font-family: Arial, sans-serif;
      box-shadow: 0 4px 20px rgba(0,0,0,0.3);
    `;
    
    errorDiv.innerHTML = `
      <h3>üíÄ Game Initialization Error</h3>
      <p>${errorMessage}</p>
      <button onclick="location.reload()" style="
        background: white;
        color: #ff4444;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-weight: bold;
        margin-top: 10px;
      ">üîÑ Reload Page</button>
    `;
    
    document.body.appendChild(errorDiv);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  getGameState() {
    return this.gameState;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ã
  getManagers() {
    return this.managers;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
  getGameStats() {
    if (!this.gameState) return null;
    
    return {
      totalResources: Object.values(this.gameState.resources).reduce((sum, val) => sum + val, 0),
      currentCombo: this.gameState.combo.count,
      skillPoints: this.gameState.skillPoints,
      activeBuffs: this.gameState.buffs.length,
      activeDebuffs: this.gameState.debuffs.length,
      buildingsBuilt: Object.values(this.gameState.buildings).filter(b => b.level > 0).length,
      skillsLearned: Object.values(this.gameState.skills).filter(s => s.level > 0).length,
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏
      energy: this.managers.energy ? {
        current: this.gameState.energy?.current || 0,
        max: this.managers.energy.getEffectiveMaxEnergy(),
        percentage: this.managers.energy.getEnergyPercentage()
      } : null,
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      achievements: this.managers.achievement ? {
        completed: this.managers.achievement.getCompletedAchievements().length,
        total: this.managers.achievement.getAllAchievements().length,
        completionPercent: this.managers.achievement.getAchievementStats().completionPercent
      } : null,
      // –ù–û–í–û–ï: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–æ–Ω
      zones: this.managers.feature ? {
        targetZone: this.gameState.targetZone,
        zoneStats: this.managers.feature.getZoneStatistics(),
        syncInfo: this.gameLoop ? this.gameLoop.getZoneSyncInfo() : null,
        syncErrors: this.zoneSyncMonitor.syncErrors,
        lastSyncCheck: this.zoneSyncMonitor.lastSyncCheck
      } : null
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
  isGameActive() {
    return this.isActive() && this.gameState && this.gameLoop && this.gameLoop.isRunning();
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô enableDebugMode —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –∑–æ–Ω
  enableDebugMode() {
    console.log('üêõ Enabling debug mode...');
    
    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.gameDebug = {
      getGameState: () => this.gameState,
      getManagers: () => this.managers,
      getGameCore: () => this,
      
      // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏
      energy: {
        getCurrent: () => this.managers.energy?.getEnergyInfo(),
        restore: (amount) => this.managers.energy?.restoreEnergy(amount, 'debug'),
        consume: (amount) => this.managers.energy?.consumeEnergy(amount),
        reset: () => this.managers.energy?.resetEnergy(),
        getStats: () => this.managers.energy?.getEnergyStatistics(),
        useEnergyPack: () => this.managers.energy?.useEnergyPack(),
        useEnergyDrink: () => this.managers.energy?.useEnergyDrink(),
        usePowerCore: () => this.managers.energy?.usePowerCore()
      },
      
      // –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      achievements: {
        getAll: () => this.managers.achievement?.getAllAchievements(),
        getCompleted: () => this.managers.achievement?.getCompletedAchievements(),
        getStats: () => this.managers.achievement?.getAchievementStats(),
        forceCheck: () => this.managers.achievement?.forceCheckAllAchievements(),
        reset: () => this.managers.achievement?.resetAchievements(),
        addClicks: (count) => {
          for (let i = 0; i < count; i++) {
            eventBus.emit(GameEvents.CLICK, 0);
          }
        },
        setCombo: (count) => {
          this.gameState.combo.count = count;
          if (count > this.managers.achievement.statistics.maxCombo) {
            this.managers.achievement.statistics.maxCombo = count;
          }
          eventBus.emit(GameEvents.COMBO_CHANGED, this.gameState.combo);
        }
      },
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï: –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ –∑–æ–Ω —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
      zones: {
        // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–æ–Ω
        getState: () => {
          if (!this.managers.feature) return 'FeatureManager not available';
          return this.managers.feature.getZonesDebugInfo();
        },
        
        // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–æ–Ω
        getStats: () => {
          if (!this.managers.feature) return 'FeatureManager not available';
          return this.managers.feature.getZoneStatistics();
        },
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–æ–Ω—ã
        sync: () => {
          if (!this.managers.feature) return 'FeatureManager not available';
          this.managers.feature.forceZoneSync();
          return 'Zones synchronized';
        },
        
        // –ù–û–í–û–ï: –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∑–æ–Ω
        reset: () => {
          if (!this.managers.feature) return 'FeatureManager not available';
          this.managers.feature.forceZoneReset();
          return 'Zones completely reset';
        },
        
        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –∑–æ–Ω—É
        setTarget: (zoneIndex) => {
          if (!this.managers.feature) return 'FeatureManager not available';
          const result = this.managers.feature.setTargetZone(zoneIndex);
          return result ? `Target zone set to ${zoneIndex}` : 'Failed to set target zone';
        },
        
        // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–∞—Ö
        getInfo: () => {
          if (!this.managers.feature) return 'FeatureManager not available';
          return this.managers.feature.getZoneInfo();
        },
        
        // –ù–û–í–û–ï: –°—Ä–∞–≤–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ GameLoop –∏ FeatureManager
        compare: () => {
          const gameLoopTarget = this.gameState.targetZone;
          const featureManagerState = this.managers.feature ? this.managers.feature.getZonesDebugInfo() : null;
          const gameLoopSyncInfo = this.gameLoop ? this.gameLoop.getZoneSyncInfo() : null;
          
          return {
            gameStateTarget: gameLoopTarget,
            featureManagerTarget: featureManagerState?.targetZone,
            gameLoopSyncInfo: gameLoopSyncInfo,
            synchronized: gameLoopTarget === featureManagerState?.targetZone,
            zoneTypes: featureManagerState?.zoneTypes || 'not available',
            allSynced: gameLoopSyncInfo?.synchronized || false,
            syncErrors: this.zoneSyncMonitor.syncErrors,
            lastSyncCheck: this.zoneSyncMonitor.lastSyncCheck
          };
        },
        
        // –ù–û–í–û–ï: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–æ–Ω–∞–º–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        fixAll: () => {
          console.log('üîß Fixing all zone issues...');
          
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            this.performEmergencyZoneSync();
            return 'All zone issues fixed using emergency sync system';
          } catch (error) {
            console.error('Error fixing zones:', error);
            return `Error: ${error.message}`;
          }
        },
        
        // –ù–û–í–û–ï: –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        toggleAutoSync: () => {
          if (this.zoneSyncMonitor.checkInterval) {
            this.cleanupManager.clearInterval(this.zoneSyncMonitor.checkInterval);
            this.zoneSyncMonitor.checkInterval = null;
            return 'Auto sync checker disabled';
          } else {
            this.startZoneSynchronizationSystem();
            return 'Auto sync checker enabled';
          }
        },
        
        // –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        getSyncStats: () => {
          return {
            syncErrors: this.zoneSyncMonitor.syncErrors,
            maxSyncErrors: this.zoneSyncMonitor.maxSyncErrors,
            lastSyncCheck: this.zoneSyncMonitor.lastSyncCheck,
            monitorActive: !!this.zoneSyncMonitor.checkInterval,
            timeSinceLastCheck: Date.now() - this.zoneSyncMonitor.lastSyncCheck
          };
        },
        
        // –ù–û–í–û–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        checkSync: () => {
          this.checkZoneSynchronization();
          return 'Sync check performed';
        },
        
        // –ù–û–í–û–ï: –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        simulateDesync: () => {
          this.gameState.targetZone = 7; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          return 'Desync simulated - target zone set to 7 without proper sync';
        },
        
        // –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        fix: () => {
          return window.gameDebug.zones.fixAll();
        }
      },
      
      // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏...
      forceComboReset: () => {
        if (this.managers.feature && typeof this.managers.feature.forceResetCombo === 'function') {
          this.managers.feature.forceResetCombo();
        } else {
          this.gameState.combo.count = 0;
          this.gameState.combo.deadline = 0;
        }
      },
      
      setCombo: (count) => {
        this.gameState.combo.count = Math.max(0, count);
        eventBus.emit(GameEvents.COMBO_CHANGED, this.gameState.combo);
      },
      
      clearAllEffects: () => {
        this.managers.buff?.clearAllEffects();
      },
      
      forceEffectCleanup: () => {
        this.managers.buff?.forceCleanExpiredEffects();
        this.managers.ui?.effectIndicators?.forceCleanup();
      },
      
      getAutoClickerStats: () => {
        return this.managers.skill?.getAutoClickerStats();
      },
      
      reloadAutoClicker: () => {
        this.managers.skill?.reloadAutoClicker();
      },
      
      triggerAutoSave: () => this.autoSave(),
      
      // –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      sync: {
        getStats: () => window.gameDebug.zones.getSyncStats(),
        check: () => window.gameDebug.zones.checkSync(),
        fix: () => window.gameDebug.zones.fixAll(),
        toggle: () => window.gameDebug.zones.toggleAutoSync(),
        simulate: () => window.gameDebug.zones.simulateDesync(),
        emergency: () => this.performEmergencyZoneSync(),
        validate: (targetZone) => this.validateZoneSync(targetZone || this.gameState.targetZone)
      },
      
      getStats: () => ({
        gameState: this.getGameStats(),
        cleanup: this.cleanupManager.getStats(),
        ui: this.managers.ui?.getUIStats(),
        buffs: this.managers.buff?.getDebugInfo(),
        effects: this.managers.ui?.effectIndicators?.getDebugInfo(),
        gameLoop: this.gameLoop?.getRenderStats(),
        energy: this.managers.energy?.getEnergyStatistics(),
        achievements: this.managers.achievement?.getAchievementStats(),
        zones: {
          syncStats: this.zoneSyncMonitor,
          currentState: this.managers.feature?.getZonesDebugInfo(),
          gameLoopSync: this.gameLoop?.getZoneSyncInfo()
        }
      }),
      
      // –ù–û–í–û–ï: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      test: {
        zoneSync: () => {
          console.log('üß™ Testing zone synchronization...');
          
          // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          const currentState = window.gameDebug.zones.compare();
          console.log('Current sync state:', currentState);
          
          // –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
          window.gameDebug.zones.simulateDesync();
          console.log('Desync simulated');
          
          setTimeout(() => {
            const desyncState = window.gameDebug.zones.compare();
            console.log('State after desync:', desyncState);
            
            window.gameDebug.zones.fixAll();
            console.log('Fix applied');
            
            setTimeout(() => {
              const fixedState = window.gameDebug.zones.compare();
              console.log('State after fix:', fixedState);
              
              return {
                initial: currentState,
                afterDesync: desyncState,
                afterFix: fixedState,
                success: fixedState.synchronized
              };
            }, 100);
          }, 100);
        },
        
        fullSystem: () => {
          console.log('üß™ Testing full system...');
          return {
            gameActive: this.isGameActive(),
            managers: Object.keys(this.managers),
            gameState: !!this.gameState,
            gameLoop: !!this.gameLoop,
            zoneSync: window.gameDebug.zones.getSyncStats(),
            cleanup: this.cleanupManager.getStats()
          };
        }
      }
    };
    
    console.log('‚úÖ Debug mode enabled with advanced zone synchronization tools');
    console.log('üîß Available commands:');
    console.log('  - window.gameDebug.zones.* - Zone management');
    console.log('  - window.gameDebug.sync.* - Sync system control');
    console.log('  - window.gameDebug.test.* - Testing functions');
  }

  // –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
  getExtendedGameInfo() {
    return {
      core: {
        initialized: !!this.gameState,
        active: this.isGameActive(),
        destroyed: this.isDestroyed
      },
      managers: Object.fromEntries(
        Object.entries(this.managers).map(([name, manager]) => [
          name, 
          {
            exists: !!manager,
            active: manager && typeof manager.isActive === 'function' ? manager.isActive() : 'unknown'
          }
        ])
      ),
      gameLoop: {
        exists: !!this.gameLoop,
        running: this.gameLoop ? this.gameLoop.isRunning() : false,
        stats: this.gameLoop ? this.gameLoop.getRenderStats() : null
      },
      zoneSync: {
        monitor: this.zoneSyncMonitor,
        currentState: this.managers.feature ? this.managers.feature.getZonesDebugInfo() : null,
        gameLoopState: this.gameLoop ? this.gameLoop.getZoneSyncInfo() : null
      },
      gameState: {
        targetZone: this.gameState ? this.gameState.targetZone : null,
        combo: this.gameState ? this.gameState.combo : null,
        resources: this.gameState ? Object.keys(this.gameState.resources).length : 0
      }
    };
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ GameCore cleanup started');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    this.stopAllGameProcesses();
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    super.destroy();
    
    console.log('‚úÖ GameCore destroyed');
  }
}