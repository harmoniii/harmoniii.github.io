// ui/AutoClickerIndicator.js - –ù–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';

export class AutoClickerIndicator extends CleanupMixin {
  constructor(gameState) {
    super();
    this.gameState = gameState;
    this.indicator = null;
    this.lastStatus = null;
    
    this.createIndicator();
    this.bindEvents();
    this.updateStatus();
    
    console.log('ü§ñ AutoClickerIndicator initialized');
  }

  createIndicator() {
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    this.indicator = document.createElement('div');
    this.indicator.id = 'autoclicker-indicator';
    this.indicator.className = 'autoclicker-indicator hidden';
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
    this.indicator.style.cssText = `
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
      color: white;
      padding: 0.75rem 1rem;
      border-radius: 12px;
      font-size: 0.85rem;
      font-weight: bold;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
      z-index: 950;
      transition: all 0.3s ease;
      border: 2px solid transparent;
      min-width: 180px;
      text-align: center;
      cursor: help;
    `;
    
    document.body.appendChild(this.indicator);
    this.registerDOMElement(this.indicator);
  }

  bindEvents() {
    // –°–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
    eventBus.subscribe(GameEvents.AUTO_CLICKER_STARTED, () => {
      this.updateStatus();
    });

    eventBus.subscribe(GameEvents.AUTO_CLICKER_STOPPED, () => {
      this.updateStatus();
    });

    eventBus.subscribe(GameEvents.AUTO_CLICKER_PAUSED, () => {
      this.updateStatus();
    });

    eventBus.subscribe(GameEvents.AUTO_CLICKER_RESUMED, () => {
      this.updateStatus();
    });

    // –°–æ–±—ã—Ç–∏—è —Ä–µ–π–¥–æ–≤
    eventBus.subscribe(GameEvents.RAID_STARTED, () => {
      this.updateStatus();
    });

    eventBus.subscribe(GameEvents.RAID_COMPLETED, () => {
      this.updateStatus();
    });

    eventBus.subscribe(GameEvents.RAID_CANCELLED, () => {
      this.updateStatus();
    });

    // –°–æ–±—ã—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤
    eventBus.subscribe(GameEvents.SKILL_BOUGHT, (data) => {
      if (data.skillId === 'autoClicker') {
        this.updateStatus();
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
    this.createInterval(() => {
      this.updateStatus();
    }, 2000, 'autoclicker-status-update');
  }

  updateStatus() {
    if (!this.isActive() || !this.indicator) return;

    const autoClickerStats = this.getAutoClickerStats();
    const raidStatus = this.getRaidStatus();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    const newStatus = this.determineStatus(autoClickerStats, raidStatus);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (JSON.stringify(newStatus) !== JSON.stringify(this.lastStatus)) {
      this.applyStatus(newStatus);
      this.lastStatus = newStatus;
    }
  }

  getAutoClickerStats() {
    if (this.gameState.skillManager && 
        typeof this.gameState.skillManager.getAutoClickerStats === 'function') {
      return this.gameState.skillManager.getAutoClickerStats();
    }
    
    return {
      level: 0,
      active: false,
      blocked: false,
      pending: false,
      status: 'Not available'
    };
  }

  getRaidStatus() {
    if (this.gameState.raidManager && 
        typeof this.gameState.raidManager.getCurrentRaidStatus === 'function') {
      return this.gameState.raidManager.getCurrentRaidStatus();
    }
    
    return { inProgress: false };
  }

  determineStatus(autoClickerStats, raidStatus) {
    const { level, active, blocked, pending, status } = autoClickerStats;
    const { inProgress } = raidStatus;

    // –ï—Å–ª–∏ –Ω–∞–≤—ã–∫ –Ω–µ –∏–∑—É—á–µ–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    if (level === 0) {
      return { show: false };
    }

    let displayText, statusClass, borderColor, tooltip;

    if (inProgress && (blocked || pending)) {
      // –í–æ –≤—Ä–µ–º—è —Ä–µ–π–¥–∞
      displayText = 'ü§ñ ‚öîÔ∏è Paused for Raid';
      statusClass = 'paused-raid';
      borderColor = '#f39c12';
      tooltip = 'Auto clicker is paused during the raid expedition.\nIt will resume automatically when the raid ends.';
    } else if (active) {
      // –ê–∫—Ç–∏–≤–µ–Ω
      displayText = 'ü§ñ ‚úÖ Auto Clicker ON';
      statusClass = 'active';
      borderColor = '#27ae60';
      tooltip = `Auto clicker is running at level ${level}.\nAutomatically clicking the target zone.`;
    } else if (level > 0) {
      // –ò–∑—É—á–µ–Ω –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
      displayText = 'ü§ñ ‚≠ï Auto Clicker OFF';
      statusClass = 'inactive';
      borderColor = '#95a5a6';
      tooltip = `Auto clicker skill level ${level} available.\nWill activate when appropriate.`;
    } else {
      // –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
      return { show: false };
    }

    return {
      show: true,
      text: displayText,
      statusClass,
      borderColor,
      tooltip,
      level
    };
  }

  applyStatus(status) {
    if (!status.show) {
      this.hideIndicator();
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    this.indicator.classList.remove('hidden');
    this.indicator.textContent = status.text;
    this.indicator.title = status.tooltip;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
    this.indicator.style.borderColor = status.borderColor;
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.indicator.classList.remove('active', 'inactive', 'paused-raid');
    this.indicator.classList.add(status.statusClass);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ø–∞—É–∑—ã —Ä–µ–π–¥–∞
    if (status.statusClass === 'paused-raid') {
      this.indicator.style.animation = 'autoClickerPulse 2s ease-in-out infinite';
    } else {
      this.indicator.style.animation = '';
    }
  }

  hideIndicator() {
    if (this.indicator) {
      this.indicator.classList.add('hidden');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
  setVisible(visible) {
    if (!this.indicator) return;

    if (visible) {
      this.updateStatus();
    } else {
      this.hideIndicator();
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  getCurrentStatus() {
    return {
      visible: this.indicator && !this.indicator.classList.contains('hidden'),
      text: this.indicator ? this.indicator.textContent : null,
      lastStatus: this.lastStatus,
      autoClickerStats: this.getAutoClickerStats(),
      raidStatus: this.getRaidStatus()
    };
  }

  // –î–æ–±–∞–≤–∏—Ç—å CSS —Å—Ç–∏–ª–∏
  addRequiredStyles() {
    if (document.getElementById('autoclicker-indicator-styles')) return;

    const style = document.createElement('style');
    style.id = 'autoclicker-indicator-styles';
    style.textContent = `
      .autoclicker-indicator.hidden {
        display: none;
      }
      
      .autoclicker-indicator.active {
        background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
        border-color: #27ae60 !important;
      }
      
      .autoclicker-indicator.inactive {
        background: linear-gradient(135deg, #95a5a6 0%, #bdc3c7 100%);
        border-color: #95a5a6 !important;
      }
      
      .autoclicker-indicator.paused-raid {
        background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
        border-color: #f39c12 !important;
      }
      
      .autoclicker-indicator:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(0,0,0,0.4);
      }
      
      @keyframes autoClickerPulse {
        0%, 100% {
          box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        }
        50% {
          box-shadow: 0 4px 12px rgba(243, 156, 18, 0.6);
        }
      }
      
      /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
      @media (max-width: 768px) {
        .autoclicker-indicator {
          bottom: 10px;
          right: 10px;
          font-size: 0.75rem;
          padding: 0.5rem 0.75rem;
          min-width: 150px;
        }
      }
    `;

    document.head.appendChild(style);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π
  initialize() {
    this.addRequiredStyles();
    this.updateStatus();
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ AutoClickerIndicator cleanup started');
    
    if (this.indicator) {
      this.hideIndicator();
    }
    
    super.destroy();
    
    console.log('‚úÖ AutoClickerIndicator destroyed');
  }
}