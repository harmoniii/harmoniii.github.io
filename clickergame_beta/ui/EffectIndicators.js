// ui/EffectIndicators.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
import { CleanupMixin } from '../core/CleanupManager.js';
import { BUFF_DEFS, DEBUFF_DEFS } from '../effects/EffectDefinitions.js';

export class EffectIndicators extends CleanupMixin {
  constructor(gameState) {
    super();
    this.gameState = gameState;
    this.container = null;
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    this.currentIndicators = new Set();
    this.lastUpdateTime = 0;
    
    this.initializeContainer();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  initializeContainer() {
    this.container = document.getElementById('effect-indicators');
    
    if (!this.container) {
      this.createContainer();
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  createContainer() {
    this.container = document.createElement('div');
    this.container.id = 'effect-indicators';
    this.container.className = 'effect-indicators';
    document.body.appendChild(this.container);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–∞
    this.registerDOMElement(this.container);
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
  update() {
    if (!this.isActive() || !this.container) return;
    
    const now = Date.now();
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (now - this.lastUpdateTime < 100) return;
    this.lastUpdateTime = now;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    const currentBuffs = this.gameState.buffs || [];
    const currentDebuffs = this.gameState.debuffs || [];
    const allCurrentEffects = new Set([...currentBuffs, ...currentDebuffs]);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.removeInactiveIndicators(allCurrentEffects);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –Ω–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.addNewIndicators(currentBuffs, currentDebuffs);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫
    this.currentIndicators = new Set(allCurrentEffects);
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  removeInactiveIndicators(activeEffects) {
    const existingIndicators = this.container.querySelectorAll('.effect-indicator');
    
    existingIndicators.forEach(indicator => {
      const effectId = indicator.getAttribute('data-effect-id');
      
      if (effectId && !activeEffects.has(effectId)) {
        console.log(`üóëÔ∏è Removing indicator for inactive effect: ${effectId}`);
        this.animateEffectRemoved(effectId);
      }
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  addNewIndicators(currentBuffs, currentDebuffs) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –±–∞—Ñ—Ñ–æ–≤
    currentBuffs.forEach(buffId => {
      if (!this.hasIndicator(buffId)) {
        const buffDef = this.findBuffDefinition(buffId);
        if (buffDef) {
          const indicator = this.createBuffIndicator(buffDef);
          this.container.appendChild(indicator);
        }
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–µ–±–∞—Ñ—Ñ–æ–≤
    currentDebuffs.forEach(debuffId => {
      if (!this.hasIndicator(debuffId)) {
        const debuffDef = this.findDebuffDefinition(debuffId);
        if (debuffDef) {
          const indicator = this.createDebuffIndicator(debuffDef);
          this.container.appendChild(indicator);
        }
      }
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
  hasIndicator(effectId) {
    return this.container.querySelector(`[data-effect-id="${effectId}"]`) !== null;
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  clearContainer() {
    if (this.container) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–ª–∞–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
      const indicators = this.container.querySelectorAll('.effect-indicator');
      indicators.forEach(indicator => {
        indicator.style.transition = 'all 0.3s ease-out';
        indicator.style.opacity = '0';
        indicator.style.transform = 'translateX(-100%) scale(0.5)';
      });
      
      // –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      this.createTimeout(() => {
        if (this.container) {
          this.container.innerHTML = '';
        }
      }, 300);
    }
    
    this.currentIndicators.clear();
  }

  // –ù–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞—Ñ—Ñ–∞
  findBuffDefinition(buffId) {
    return BUFF_DEFS.find(buff => buff.id === buffId);
  }

  // –ù–∞–π—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–±–∞—Ñ—Ñ–∞
  findDebuffDefinition(debuffId) {
    return DEBUFF_DEFS.find(debuff => debuff.id === debuffId);
  }

  // –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±–∞—Ñ—Ñ–∞
  createBuffIndicator(buffDef) {
    const indicator = document.createElement('div');
    indicator.className = 'effect-indicator buff-indicator';
    indicator.setAttribute('data-effect-id', buffDef.id);
    
    const icon = this.extractIcon(buffDef.name);
    const name = this.extractName(buffDef.name);
    
    indicator.innerHTML = `
      <span class="effect-icon">${icon}</span>
      <span class="effect-name">${name}</span>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    indicator.title = this.createEffectTooltip(buffDef);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    this.animateIndicatorAppearance(indicator, 'buff');
    
    return indicator;
  }

  // –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–µ–±–∞—Ñ—Ñ–∞
  createDebuffIndicator(debuffDef) {
    const indicator = document.createElement('div');
    indicator.className = 'effect-indicator debuff-indicator';
    indicator.setAttribute('data-effect-id', debuffDef.id);
    
    const icon = this.extractIcon(debuffDef.name);
    const name = this.extractName(debuffDef.name);
    
    indicator.innerHTML = `
      <span class="effect-icon">${icon}</span>
      <span class="effect-name">${name}</span>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    indicator.title = this.createEffectTooltip(debuffDef);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    this.animateIndicatorAppearance(indicator, 'debuff');
    
    return indicator;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  animateIndicatorAppearance(indicator, type) {
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    indicator.style.opacity = '0';
    indicator.style.transform = 'translateX(-100%) scale(0.8)';
    indicator.style.transition = 'none';
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–∞–ª—ã–π —Ç–∞–π–º–∞—É—Ç
    this.createTimeout(() => {
      indicator.style.transition = 'all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275)';
      indicator.style.opacity = '1';
      indicator.style.transform = 'translateX(0) scale(1)';
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –º–µ—Ä—Ü–∞–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –¥–µ–±–∞—Ñ—Ñ–æ–≤
      if (type === 'debuff') {
        this.createTimeout(() => {
          indicator.style.boxShadow = '0 4px 12px rgba(244, 67, 54, 0.8)';
          this.createTimeout(() => {
            indicator.style.boxShadow = '';
          }, 200);
        }, 200);
      }
    }, 10);
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
  animateEffectRemoved(effectId) {
    const indicator = this.container.querySelector(`[data-effect-id="${effectId}"]`);
    
    if (indicator) {
      // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
      indicator.style.transition = 'all 0.3s ease-in';
      indicator.style.opacity = '0';
      indicator.style.transform = 'translateX(-100%) scale(0.5)';
      
      // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      this.createTimeout(() => {
        if (indicator && indicator.parentNode) {
          indicator.parentNode.removeChild(indicator);
        }
      }, 300);
    }
  }

  // –ò–∑–≤–ª–µ—á—å –∏–∫–æ–Ω–∫—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
  extractIcon(name) {
    if (!name || typeof name !== 'string') return '?';
    
    // –ò—â–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    const emojiMatch = name.match(/^(\p{Emoji})/u);
    if (emojiMatch) {
      return emojiMatch[1];
    }
    
    // –ò—â–µ–º —ç–º–æ–¥–∑–∏ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏
    const anyEmojiMatch = name.match(/(\p{Emoji})/u);
    if (anyEmojiMatch) {
      return anyEmojiMatch[1];
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –∏–ª–∏ –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
    return name.charAt(0) || '?';
  }

  // –ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –∏–∫–æ–Ω–∫–∏
  extractName(name) {
    if (!name || typeof name !== 'string') return 'Unknown';
    
    // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    return name.replace(/\p{Emoji}/gu, '').trim() || 'Unknown';
  }

  // –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
  createEffectTooltip(effectDef) {
    if (!effectDef) return 'Unknown effect';
    
    let tooltip = effectDef.name;
    
    if (effectDef.description) {
      tooltip += `\n${effectDef.description}`;
    }
    
    if (effectDef.duration) {
      tooltip += `\nDuration: ${effectDef.duration} seconds`;
    } else {
      tooltip += '\nInstant effect';
    }
    
    if (effectDef.rarity) {
      tooltip += `\nRarity: ${effectDef.rarity}`;
    }
    
    if (effectDef.severity) {
      tooltip += `\nSeverity: ${effectDef.severity}`;
    }
    
    return tooltip;
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  forceUpdate() {
    this.clearContainer();
    this.currentIndicators.clear();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    this.createTimeout(() => {
      this.update();
    }, 100);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  hasActiveEffects() {
    const buffs = this.gameState.buffs || [];
    const debuffs = this.gameState.debuffs || [];
    return buffs.length > 0 || debuffs.length > 0;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  getActiveEffectCount() {
    const buffs = this.gameState.buffs || [];
    const debuffs = this.gameState.debuffs || [];
    return {
      buffs: buffs.length,
      debuffs: debuffs.length,
      total: buffs.length + debuffs.length
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  getActiveEffects() {
    const buffs = this.gameState.buffs || [];
    const debuffs = this.gameState.debuffs || [];
    
    return {
      buffs: buffs.map(id => ({
        id,
        definition: this.findBuffDefinition(id),
        type: 'buff'
      })).filter(effect => effect.definition),
      
      debuffs: debuffs.map(id => ({
        id,
        definition: this.findDebuffDefinition(id),
        type: 'debuff'
      })).filter(effect => effect.definition)
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  getDebugInfo() {
    const activeEffects = this.getActiveEffects();
    const indicatorElements = this.container ? 
      this.container.querySelectorAll('.effect-indicator').length : 0;
    
    return {
      containerExists: !!this.container,
      indicatorElements,
      currentIndicators: Array.from(this.currentIndicators),
      activeBuffs: activeEffects.buffs.map(b => b.id),
      activeDebuffs: activeEffects.debuffs.map(d => d.id),
      lastUpdateTime: this.lastUpdateTime,
      updateInterval: Date.now() - this.lastUpdateTime
    };
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  forceCleanup() {
    console.log('üßπ Force cleaning effect indicators...');
    
    this.clearContainer();
    this.currentIndicators.clear();
    this.lastUpdateTime = 0;
    
    console.log('‚úÖ Effect indicators force cleaned');
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  setVisible(visible) {
    if (!this.container) return;
    
    if (visible) {
      this.container.style.display = 'flex';
      this.container.classList.remove('hidden');
    } else {
      this.container.style.display = 'none';
      this.container.classList.add('hidden');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  getPosition() {
    if (!this.container) return null;
    
    const rect = this.container.getBoundingClientRect();
    return {
      top: rect.top,
      left: rect.left,
      bottom: rect.bottom,
      right: rect.right,
      width: rect.width,
      height: rect.height
    };
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  setPosition(top, left) {
    if (!this.container) return;
    
    this.container.style.position = 'fixed';
    this.container.style.top = `${top}px`;
    this.container.style.left = `${left}px`;
  }

  // –î–æ–±–∞–≤–∏—Ç—å CSS —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  addRequiredStyles() {
    if (document.getElementById('effect-indicators-styles')) return;
    
    const style = document.createElement('style');
    style.id = 'effect-indicators-styles';
    style.textContent = `
      .effect-indicators {
        position: fixed;
        top: 100px;
        left: 20px;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        z-index: 900;
        max-width: 200px;
        pointer-events: none;
      }
      
      .effect-indicator {
        pointer-events: auto;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 0.75rem;
        border-radius: 8px;
        font-size: 0.9rem;
        font-weight: bold;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
        cursor: help;
        position: relative;
        transform: translateZ(0);
      }
      
      .effect-indicator:hover {
        transform: translateX(5px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      }
      
      .buff-indicator {
        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
        color: white;
        border-left: 4px solid #2E7D32;
      }
      
      .debuff-indicator {
        background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
        color: white;
        border-left: 4px solid #b71c1c;
      }
      
      .effect-icon {
        font-size: 1.2rem;
        min-width: 20px;
      }
      
      .effect-name {
        font-size: 0.8rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
    `;
    
    document.head.appendChild(style);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∏–ª–µ–π
  initialize() {
    this.addRequiredStyles();
    this.initializeContainer();
    this.update();
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ EffectIndicators cleanup started');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    this.clearContainer();
    
    // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    super.destroy();
    
    console.log('‚úÖ EffectIndicators destroyed');
  }
}