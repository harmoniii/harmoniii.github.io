// ui/EnergyDisplay.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';
import { GAME_CONSTANTS } from '../config/GameConstants.js';

export class EnergyDisplay extends CleanupMixin {
  constructor(gameState) {
    super();
    
    this.gameState = gameState;
    this.container = null;
    this.energyBar = null;
    this.energyText = null;
    this.energyStatus = null;
    this.warningElement = null;
    
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    this.lastNotificationTime = 0;
    this.notificationCooldown = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    
    this.initializeEnergyDisplay();
    this.bindEvents();
    
    console.log('‚ö° EnergyDisplay initialized');
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–∏—Å–∫–æ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  initializeEnergyDisplay() {
    this.findEnergyContainer();
    this.findEnergyElements();
    
    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    if (!this.energyBar || !this.energyText || !this.energyStatus) {
      console.log('‚ö° Energy display elements not found, will update from game state');
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  findEnergyContainer() {
    this.container = document.getElementById('energy-display');
    
    if (this.container) {
      console.log('‚ö° Found existing energy display container');
    } else {
      // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ –∫–ª–∞—Å—Å—É
      this.container = document.querySelector('.energy-display-container');
      if (this.container) {
        this.container.id = 'energy-display';
        console.log('‚ö° Found energy container by class, added ID');
      }
    }
    
    if (this.container) {
      this.registerDOMElement(this.container);
    }
  }

  // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏
  findEnergyElements() {
    if (!this.container) return;
    
    this.energyBar = this.container.querySelector('.energy-bar');
    this.energyText = this.container.querySelector('.energy-text');
    this.energyStatus = this.container.querySelector('.energy-status');
    this.warningElement = this.container.querySelector('.energy-warning');
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏
    eventBus.subscribe(GameEvents.ENERGY_CHANGED, (data) => {
      this.updateDisplay(data);
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã
    eventBus.subscribe(GameEvents.ENERGY_INSUFFICIENT, (data) => {
      this.showInsufficientEnergyWarning(data);
    });

    eventBus.subscribe(GameEvents.ENERGY_CRITICAL, () => {
      this.showCriticalEnergyWarning();
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ (fallback)
    eventBus.subscribe(GameEvents.RESOURCE_CHANGED, () => {
      this.updateFromGameState();
    });
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  updateDisplay(energyData) {
    if (!this.isActive()) return;
    
    const { current, max, percentage, canClick, timeToNext } = energyData;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ—Å—É —ç–Ω–µ—Ä–≥–∏–∏
    this.updateEnergyBar(percentage);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    this.updateEnergyText(current, max, canClick, timeToNext);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    this.updateEnergyStatus(energyData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    this.updateWarnings(percentage);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ—Å—ã —ç–Ω–µ—Ä–≥–∏–∏
  updateEnergyBar(percentage) {
    if (!this.energyBar) return;
    
    const clampedPercentage = Math.max(0, Math.min(100, percentage));
    this.energyBar.style.width = `${clampedPercentage}%`;
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    this.energyBar.className = 'energy-bar';
    
    if (percentage <= GAME_CONSTANTS.CRITICAL_THRESHOLD) {
      this.energyBar.classList.add('energy-critical');
    } else if (percentage <= GAME_CONSTANTS.WARNING_THRESHOLD) {
      this.energyBar.classList.add('energy-warning');
    } else {
      this.energyBar.classList.add('energy-normal');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —ç–Ω–µ—Ä–≥–∏–∏
  updateEnergyText(current, max, canClick, timeToNext) {
    if (!this.energyText) return;
    
    const currentRounded = Math.floor(current);
    const maxRounded = Math.floor(max);
    
    this.energyText.textContent = `‚ö° ${currentRounded}/${maxRounded}`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!canClick && timeToNext > 0) {
      const seconds = Math.ceil(timeToNext / 1000);
      this.energyText.textContent += ` (${seconds}s)`;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç–Ω–µ—Ä–≥–∏–∏
  updateEnergyStatus(energyData) {
    if (!this.energyStatus) return;
    
    const { canClick, timeToNext } = energyData;
    
    if (canClick) {
      this.energyStatus.textContent = `Ready!`;
      this.energyStatus.className = 'energy-status ready';
    } else {
      const secondsToNext = Math.ceil(timeToNext / 1000);
      this.energyStatus.textContent = `${secondsToNext}s`;
      this.energyStatus.className = 'energy-status recharging';
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
  updateWarnings(percentage) {
    if (!this.warningElement) return;
    
    if (percentage <= GAME_CONSTANTS.PULSE_THRESHOLD) {
      this.warningElement.classList.remove('hidden');
      this.warningElement.classList.add('pulsing');
      this.warningElement.textContent = '‚ö° Low!';
    } else {
      this.warningElement.classList.add('hidden');
      this.warningElement.classList.remove('pulsing', 'warning-flash', 'critical-pulse');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã
  showInsufficientEnergyWarning(data) {
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (now - this.lastNotificationTime < this.notificationCooldown) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
    
    this.lastNotificationTime = now;
    
    if (!this.warningElement) return;
    
    const { current, required, timeToNext } = data;
    const seconds = Math.ceil(timeToNext / 1000);
    
    this.warningElement.textContent = `‚ö° ${seconds}s`;
    this.warningElement.classList.remove('hidden');
    this.warningElement.classList.add('warning-flash');
    
    // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    this.createTimeout(() => {
      if (this.warningElement) {
        this.warningElement.classList.remove('warning-flash');
      }
    }, 2000);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
  showCriticalEnergyWarning() {
    const now = Date.now();
    
    // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–π cooldown
    if (now - this.lastNotificationTime < this.notificationCooldown / 2) {
      return;
    }
    
    this.lastNotificationTime = now;
    
    if (!this.warningElement) return;
    
    this.warningElement.textContent = '‚ö° Critical!';
    this.warningElement.classList.remove('hidden');
    this.warningElement.classList.add('critical-pulse');
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã (fallback)
  updateFromGameState() {
    if (!this.gameState.energyManager) return;
    
    try {
      const energyInfo = this.gameState.energyManager.getEnergyInfo();
      if (energyInfo) {
        this.updateDisplay(energyInfo);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Error updating energy display from game state:', error);
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  forceUpdate() {
    this.updateFromGameState();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  getDisplayInfo() {
    return {
      container: !!this.container,
      energyBar: !!this.energyBar,
      energyText: !!this.energyText,
      energyStatus: !!this.energyStatus,
      warningElement: !!this.warningElement,
      isVisible: this.container && !this.container.classList.contains('hidden'),
      lastNotificationTime: this.lastNotificationTime
    };
  }

  // –°–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –¥–∏—Å–ø–ª–µ–π —ç–Ω–µ—Ä–≥–∏–∏
  setVisible(visible) {
    if (!this.container) return;
    
    if (visible) {
      this.container.classList.remove('hidden');
    } else {
      this.container.classList.add('hidden');
    }
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ EnergyDisplay cleanup started');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (this.warningElement) {
      this.warningElement.classList.add('hidden');
    }
    
    super.destroy();
    
    console.log('‚úÖ EnergyDisplay destroyed');
  }
}