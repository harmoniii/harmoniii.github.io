// managers/GridManager.js - –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –∫–≤–∞–¥—Ä–∞—Ç–æ–º 3x3
import { CleanupMixin } from '../core/CleanupManager.js';
import { eventBus, GameEvents } from '../core/GameEvents.js';

// –¢–∏–ø—ã –∫–ª–µ—Ç–æ–∫
const CELL_TYPES = {
  TARGET: { id: 'target', color: '#C41E3A', icon: 'üéØ', name: 'Target' },
  ENERGY: { id: 'energy', color: '#228B22', icon: '‚ö°', name: 'Energy' },
  BONUS: { id: 'bonus', color: '#FFB347', icon: 'üí∞', name: 'Bonus' },
  INACTIVE: { id: 'inactive', color: '#E5E5E5', icon: '', name: 'Empty' }
};

export class GridManager extends CleanupMixin {
  constructor() {
    super();
    
    // –ö–≤–∞–¥—Ä–∞—Ç 3x3 = 9 –∫–ª–µ—Ç–æ–∫
    this.gridSize = 3;
    this.totalCells = this.gridSize * this.gridSize;
    this.cells = [];
    this.targetCell = 0; // –ò–Ω–¥–µ–∫—Å —Ü–µ–ª–µ–≤–æ–π –∫–ª–µ—Ç–∫–∏ (0-8)
    this.isReady = false;
    
    this.initializeGrid();
    console.log('üéØ GridManager: 3x3 grid initialized');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∫–∏
  initializeGrid() {
    console.log('üéØ Creating 3x3 grid...');
    
    // –°–æ–∑–¥–∞–µ–º 9 –∫–ª–µ—Ç–æ–∫ (0-8)
    for (let i = 0; i < this.totalCells; i++) {
      this.cells[i] = {
        index: i,
        row: Math.floor(i / this.gridSize),
        col: i % this.gridSize,
        type: CELL_TYPES.INACTIVE,
        isTarget: false
      };
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã –∫–ª–µ—Ç–æ–∫
    this.generateCellTypes();
    
    this.isReady = true;
    console.log(`‚úÖ ${this.totalCells} cells created and ready`);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∫–ª–µ—Ç–æ–∫
  generateCellTypes() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
    this.cells.forEach(cell => {
      cell.type = CELL_TYPES.INACTIVE;
      cell.isTarget = false;
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∫–ª–µ—Ç–∫—É
    this.cells[this.targetCell].type = CELL_TYPES.TARGET;
    this.cells[this.targetCell].isTarget = true;
    
    // –î–æ–±–∞–≤–ª—è–µ–º 2-3 —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–µ—Ç–∫–∏
    this.addSpecialCells(CELL_TYPES.ENERGY, 2);
    
    // –î–æ–±–∞–≤–ª—è–µ–º 1 –±–æ–Ω—É—Å–Ω—É—é –∫–ª–µ—Ç–∫—É
    this.addSpecialCells(CELL_TYPES.BONUS, 1);
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
  addSpecialCells(cellType, count) {
    const availableIndices = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã (–Ω–µ —Ü–µ–ª–µ–≤—ã–µ)
    for (let i = 0; i < this.totalCells; i++) {
      if (i !== this.targetCell && this.cells[i].type === CELL_TYPES.INACTIVE) {
        availableIndices.push(i);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–µ—Ç–∫–∏ —Å–ª—É—á–∞–π–Ω–æ
    for (let i = 0; i < count && availableIndices.length > 0; i++) {
      const randomIndex = Math.floor(Math.random() * availableIndices.length);
      const cellIndex = availableIndices.splice(randomIndex, 1)[0];
      this.cells[cellIndex].type = cellType;
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª–µ–≤—É—é –∫–ª–µ—Ç–∫—É
  setTargetCell(newTargetIndex) {
    if (newTargetIndex < 0 || newTargetIndex >= this.totalCells) {
      console.warn(`Invalid target cell: ${newTargetIndex}`);
      return false;
    }
    
    if (this.targetCell === newTargetIndex) {
      return true; // –£–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    }
    
    console.log(`üéØ Moving target: ${this.targetCell} -> ${newTargetIndex}`);
    
    this.targetCell = newTargetIndex;
    this.generateCellTypes();
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    eventBus.emit(GameEvents.ZONES_UPDATED, {
      targetCell: this.targetCell,
      cells: this.getCellsForRendering()
    });
    
    return true;
  }

  // –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –∫–ª–µ—Ç–∫–∏ (–≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å)
  shuffleCells() {
    let newTarget;
    let attempts = 0;
    
    do {
      newTarget = Math.floor(Math.random() * this.totalCells);
      attempts++;
    } while (newTarget === this.targetCell && attempts < 10);
    
    return this.setTargetCell(newTarget);
  }

  // –ù–∞–π—Ç–∏ –∫–ª–µ—Ç–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∫–ª–∏–∫–∞
  findCellByClick(clickX, clickY, canvasWidth, canvasHeight) {
    // –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏
    const cellWidth = canvasWidth / this.gridSize;
    const cellHeight = canvasHeight / this.gridSize;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–µ—Ç–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    const col = Math.floor(clickX / cellWidth);
    const row = Math.floor(clickY / cellHeight);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    if (col < 0 || col >= this.gridSize || row < 0 || row >= this.gridSize) {
      return null;
    }
    
    const cellIndex = row * this.gridSize + col;
    return this.cells[cellIndex];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–ª–µ—Ç–∫–∏ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  getCellsForRendering() {
    if (!this.isReady) {
      console.warn('üéØ GridManager not ready for rendering');
      return [];
    }
    
    return this.cells.map(cell => ({
      index: cell.index,
      row: cell.row,
      col: cell.col,
      type: cell.type,
      isTarget: cell.isTarget,
      color: cell.type.color,
      icon: cell.type.icon,
      name: cell.type.name
    }));
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–∫ –ø–æ –∫–ª–µ—Ç–∫–µ
  handleCellClick(clickX, clickY, canvasWidth, canvasHeight) {
    const clickedCell = this.findCellByClick(clickX, clickY, canvasWidth, canvasHeight);
    
    if (!clickedCell) {
      return null;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å (–≤—Å–µ–≥–¥–∞ –≤—ã—Å–æ–∫–∞—è –¥–ª—è –∫–ª–µ—Ç–æ–∫)
    const accuracy = 0.8 + Math.random() * 0.2; // 80-100%
    
    return {
      cellIndex: clickedCell.index,
      cellType: clickedCell.type,
      isTarget: clickedCell.isTarget,
      row: clickedCell.row,
      col: clickedCell.col,
      accuracy: accuracy,
      effects: this.getCellEffects(clickedCell)
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–ª–µ—Ç–∫–∏
  getCellEffects(cell) {
    switch (cell.type.id) {
      case 'target':
        return { givesGold: true, givesCombo: true, energyCost: 1 };
      case 'energy':
        return { energyRestore: 3, energyCost: 0 };
      case 'bonus':
        return { energyRestore: 2, resourceBonus: true, energyCost: 0 };
      default:
        return { energyCost: 0 };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–ª–µ–≤—É—é –∫–ª–µ—Ç–∫—É
  getTargetCell() {
    return this.targetCell;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–ª–µ—Ç–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É
  getCell(index) {
    return this.cells[index] || null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
  isManagerReady() {
    return this.isReady && this.cells.length === this.totalCells;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    return {
      isReady: this.isReady,
      cellCount: this.cells.length,
      targetCell: this.targetCell,
      gridSize: this.gridSize,
      cellTypes: this.cells.reduce((acc, cell) => {
        acc[cell.type.id] = (acc[cell.type.id] || 0) + 1;
        return acc;
      }, {})
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  getDebugInfo() {
    return {
      isReady: this.isReady,
      targetCell: this.targetCell,
      gridSize: this.gridSize,
      cells: this.cells.map(cell => ({
        index: cell.index,
        row: cell.row,
        col: cell.col,
        type: cell.type.id,
        isTarget: cell.isTarget
      }))
    };
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
  destroy() {
    console.log('üßπ GridManager cleanup');
    this.isReady = false;
    this.cells = [];
    super.destroy();
  }
}