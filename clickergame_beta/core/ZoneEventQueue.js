// core/ZoneEventQueue.js - –û—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π –∑–æ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
import { CleanupMixin } from './CleanupManager.js';
import { eventBus, GameEvents } from './GameEvents.js';

export class ZoneEventQueue extends CleanupMixin {
  constructor() {
    super();
    
    this.eventQueue = [];
    this.isProcessing = false;
    this.processingTimeout = null;
    this.maxQueueSize = 50;
    this.processInterval = 16; // ~60 FPS
    
    this.startProcessing();
    
    console.log('üìã ZoneEventQueue initialized');
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
   * @param {string} type - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @param {number} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0 = –≤—ã—Å—à–∏–π)
   */
  enqueue(type, data = {}, priority = 5) {
    if (this.eventQueue.length >= this.maxQueueSize) {
      console.warn('‚ö†Ô∏è Zone event queue is full, dropping oldest event');
      this.eventQueue.shift();
    }

    const event = {
      id: this.generateEventId(),
      type,
      data,
      priority,
      timestamp: Date.now(),
      processed: false
    };

    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const insertIndex = this.findInsertIndex(priority);
    this.eventQueue.splice(insertIndex, 0, event);

    console.log(`üìã Enqueued zone event: ${type} (priority: ${priority})`);
    return event.id;
  }

  /**
   * –ù–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   * @param {number} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–±—ã—Ç–∏—è
   * @returns {number} –ò–Ω–¥–µ–∫—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
   */
  findInsertIndex(priority) {
    for (let i = 0; i < this.eventQueue.length; i++) {
      if (this.eventQueue[i].priority > priority) {
        return i;
      }
    }
    return this.eventQueue.length;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏
   */
  processNext() {
    if (this.eventQueue.length === 0 || this.isProcessing) {
      return false;
    }

    this.isProcessing = true;
    const event = this.eventQueue.shift();

    try {
      this.processEvent(event);
      event.processed = true;
      console.log(`‚úÖ Processed zone event: ${event.type}`);
    } catch (error) {
      console.error(`‚ùå Error processing zone event ${event.type}:`, error);
    } finally {
      this.isProcessing = false;
    }

    return true;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
   * @param {Object} event - –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  processEvent(event) {
    switch (event.type) {
      case 'ZONE_SHUFFLE':
        this.processZoneShuffle(event.data);
        break;
        
      case 'TARGET_ZONE_CHANGE':
        this.processTargetZoneChange(event.data);
        break;
        
      case 'ZONE_CLICK':
        this.processZoneClick(event.data);
        break;
        
      case 'ZONE_REGENERATE':
        this.processZoneRegenerate(event.data);
        break;
        
      case 'ZONE_VALIDATE':
        this.processZoneValidate(event.data);
        break;
        
      default:
        console.warn(`Unknown zone event type: ${event.type}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∑–æ–Ω
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  processZoneShuffle(data) {
    const { newTargetZone, reason = 'shuffle' } = data;
    
    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    eventBus.emit(GameEvents.ZONES_SHUFFLED, {
      newTargetZone,
      reason,
      timestamp: Date.now()
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∑–æ–Ω—ã
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  processTargetZoneChange(data) {
    const { previousZone, newZone, source = 'unknown' } = data;
    
    eventBus.emit(GameEvents.ZONES_SHUFFLED, {
      newTargetZone: newZone,
      previousZone,
      source,
      timestamp: Date.now()
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–∫ –ø–æ –∑–æ–Ω–µ
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  processZoneClick(data) {
    const { zoneIndex, angle, isTarget, effects } = data;
    
    if (isTarget) {
      eventBus.emit(GameEvents.ZONE_HIT, {
        zone: zoneIndex,
        angle,
        effects,
        timestamp: Date.now()
      });
    } else {
      eventBus.emit(GameEvents.ZONE_MISS, {
        zone: zoneIndex,
        angle,
        effects,
        timestamp: Date.now()
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–æ–Ω
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  processZoneRegenerate(data) {
    const { zoneCount, targetZone } = data;
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–ª–Ω–æ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–æ–Ω
    eventBus.emit(GameEvents.ZONES_SHUFFLED, {
      newTargetZone: targetZone,
      reason: 'regenerate',
      zoneCount,
      timestamp: Date.now()
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∑–æ–Ω
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  processZoneValidate(data) {
    const { isValid, errors = [] } = data;
    
    if (!isValid) {
      console.warn('‚ö†Ô∏è Zone validation failed:', errors);
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–æ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      this.enqueue('ZONE_REGENERATE', {
        zoneCount: 8, // ZONE_COUNT
        targetZone: 0,
        reason: 'validation_failed'
      }, 1); // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
   */
  startProcessing() {
    if (this.processingTimeout) {
      this.cleanupManager.clearTimeout(this.processingTimeout);
    }

    const processLoop = () => {
      if (!this.isActive()) return;
      
      this.processNext();
      
      this.processingTimeout = this.createTimeout(processLoop, this.processInterval);
    };

    this.processingTimeout = this.createTimeout(processLoop, this.processInterval);
    console.log('üìã Zone event processing started');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
   */
  stopProcessing() {
    if (this.processingTimeout) {
      this.cleanupManager.clearTimeout(this.processingTimeout);
      this.processingTimeout = null;
    }
    console.log('üìã Zone event processing stopped');
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
   */
  clearQueue() {
    this.eventQueue = [];
    console.log('üìã Zone event queue cleared');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getQueueStats() {
    const eventTypes = {};
    this.eventQueue.forEach(event => {
      eventTypes[event.type] = (eventTypes[event.type] || 0) + 1;
    });

    return {
      queueLength: this.eventQueue.length,
      maxQueueSize: this.maxQueueSize,
      isProcessing: this.isProcessing,
      eventTypes,
      oldestEvent: this.eventQueue.length > 0 ? 
        Date.now() - this.eventQueue[this.eventQueue.length - 1].timestamp : 0
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   * @param {string} eventType - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
   * @returns {boolean} true –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
   */
  hasEventType(eventType) {
    return this.eventQueue.some(event => event.type === eventType);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   * @param {string} eventType - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  removeEventType(eventType) {
    const initialLength = this.eventQueue.length;
    this.eventQueue = this.eventQueue.filter(event => event.type !== eventType);
    const removedCount = initialLength - this.eventQueue.length;
    
    if (removedCount > 0) {
      console.log(`üìã Removed ${removedCount} events of type ${eventType}`);
    }
    
    return removedCount;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
   * @param {string} eventType - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
   * @returns {Object[]} –ú–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π
   */
  getEventsByType(eventType) {
    return this.eventQueue.filter(event => event.type === eventType);
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
   */
  flushQueue() {
    console.log('üìã Flushing zone event queue...');
    
    let processed = 0;
    const maxProcessing = 100; // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    
    while (this.eventQueue.length > 0 && processed < maxProcessing) {
      if (!this.processNext()) {
        break;
      }
      processed++;
    }
    
    console.log(`üìã Flushed ${processed} events from queue`);
    return processed;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è
   * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
   */
  generateEventId() {
    return `zone_event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ)
   * @param {string} type - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  enqueueImmediate(type, data = {}) {
    this.enqueue(type, data, 0);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–Ω—è—Ç—ã
    if (!this.isProcessing) {
      this.createTimeout(() => this.processNext(), 1);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
   * @param {string} type - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @returns {boolean} true –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤–∞–ª–∏–¥–Ω–æ
   */
  validateEvent(type, data) {
    if (!type || typeof type !== 'string') {
      console.warn('‚ö†Ô∏è Invalid event type:', type);
      return false;
    }

    const validTypes = [
      'ZONE_SHUFFLE', 'TARGET_ZONE_CHANGE', 'ZONE_CLICK', 
      'ZONE_REGENERATE', 'ZONE_VALIDATE'
    ];

    if (!validTypes.includes(type)) {
      console.warn(`‚ö†Ô∏è Unknown event type: ${type}`);
      return false;
    }

    return true;
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   * @param {string} type - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @param {number} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
   * @returns {string|null} ID —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  safeEnqueue(type, data = {}, priority = 5) {
    if (!this.validateEvent(type, data)) {
      return null;
    }

    try {
      return this.enqueue(type, data, priority);
    } catch (error) {
      console.error('‚ùå Error enqueueing zone event:', error);
      return null;
    }
  }

  /**
   * –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
   */
  destroy() {
    console.log('üßπ ZoneEventQueue cleanup started');
    
    this.stopProcessing();
    this.clearQueue();
    
    super.destroy();
    
    console.log('‚úÖ ZoneEventQueue destroyed');
  }
}