// core/GameState.js - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ë–ï–ó —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω–∞–º–∏
import { RESOURCES } from '../config/ResourceConfig.js';
import { BUILDING_DEFS } from '../managers/BuildingManager.js';
import { SKILL_DEFS } from '../managers/SkillManager.js';
import { GAME_CONSTANTS } from '../config/GameConstants.js';

export class GameState {
  constructor() {
    this.isDestroyed = false;
    this.initializeState();
  }

  initializeState() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–ë–ï–ó —ç–Ω–µ—Ä–≥–∏–∏ - –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
    this.resources = RESOURCES.reduce((obj, resource) => {
      obj[resource] = 0;
      return obj;
    }, {});

    // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤)
    this.energy = {
      current: GAME_CONSTANTS.INITIAL_ENERGY,
      max: GAME_CONSTANTS.INITIAL_MAX_ENERGY,
      lastRegenTime: Date.now(),
      totalConsumed: 0,
      totalRegenerated: 0
    };

    // –ö–æ–º–±–æ —Å–∏—Å—Ç–µ–º–∞
    this.combo = {
      lastZone: null,
      count: 0,
      deadline: 0,
      lastAngle: null
    };

    this.raids = {
  completed: [],
  specialRewards: {},
  statistics: {
    totalRaids: 0,
    successfulRaids: 0,
    resourcesGained: {},
    peopleLost: 0
  },
  // –ù–û–í–û–ï: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–π–¥–∞
  activeRaid: null,
  isRaidInProgress: false,
  raidStartTime: 0,
  raidProgress: 0,
  autoClickerWasActive: false
};

    // –£–î–ê–õ–ï–ù–û: targetZone –∏ previousTargetZone —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è ZoneManager
    // –ó–æ–Ω—ã –±–æ–ª—å—à–µ –ù–ï —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ GameState!

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    this.blockedUntil = 0;

    // –ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
    this.buffs = [];
    this.debuffs = [];

    // –°–æ—Å—Ç–æ—è–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    this.effectStates = {
      starPowerClicks: 0,
      shieldBlocks: 0,
      heavyClickRequired: {},
      reverseDirection: 1,
      frozenCombo: false
    };

    // –ó–¥–∞–Ω–∏—è
    this.buildings = BUILDING_DEFS.reduce((obj, def) => {
      obj[def.id] = { level: 0, active: false };
      return obj;
    }, {});

    // –ù–∞–≤—ã–∫–∏
    this.skills = SKILL_DEFS.reduce((obj, def) => {
      obj[def.id] = { level: 0 };
      return obj;
    }, {});

    this.skillPoints = 0;
    this.skillStates = {
      missProtectionCharges: 0,
      autoClickerActive: false
    };

    // –ú–∞—Ä–∫–µ—Ç
    this.market = {
      dailyDeals: [],
      purchaseHistory: [],
      reputation: 0,
      permanentBonuses: {}
    };

    // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    this.achievements = {
      completed: new Set(),
      statistics: {
        totalClicks: 0,
        maxCombo: 0,
        resourcesCollected: {},
        totalResourcesCollected: 0
      }
    };

    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
    this.lastTimestamp = Date.now();
    this.currentRotation = 0;
    this.flags = {};
  }

  // –ú–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
validateNumber(value, min = 0, max = Number.MAX_SAFE_INTEGER, shouldFloor = false) {
    if (typeof value !== 'number' || isNaN(value) || value < min) {
      return min;
    }
    const result = Math.min(value, max);
    return shouldFloor ? Math.floor(result) : result;
}

validateResource(resourceName, value) {
    if (!RESOURCES.includes(resourceName)) {
      console.warn(`Invalid resource: ${resourceName}`);
      return 0;
    }
    return this.validateNumber(value, 0, GAME_CONSTANTS.MAX_SAFE_RESOURCE_VALUE);
}

validateSkillPoints(value) {
    return this.validateNumber(value, 0, GAME_CONSTANTS.MAX_SKILL_POINTS, true);
}

  validateCombo(combo) {
    if (!combo || typeof combo !== 'object') {
      return { ...this.combo };
    }
    
    return {
      lastZone: typeof combo.lastZone === 'number' ? combo.lastZone : null,
      count: Math.max(0, Math.min(combo.count || 0, GAME_CONSTANTS.MAX_COMBO_COUNT)),
      deadline: Math.max(0, combo.deadline || 0),
      lastAngle: typeof combo.lastAngle === 'number' ? combo.lastAngle : null
    };
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏
  validateEnergy(energy) {
    if (!energy || typeof energy !== 'object') {
      return { ...this.energy };
    }
    
    return {
      current: Math.max(0, energy.current || GAME_CONSTANTS.INITIAL_ENERGY),
      max: Math.max(GAME_CONSTANTS.INITIAL_MAX_ENERGY, energy.max || GAME_CONSTANTS.INITIAL_MAX_ENERGY),
      lastRegenTime: energy.lastRegenTime || Date.now(),
      totalConsumed: Math.max(0, energy.totalConsumed || 0),
      totalRegenerated: Math.max(0, energy.totalRegenerated || 0)
    };
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  validateAchievements(achievements) {
    if (!achievements || typeof achievements !== 'object') {
      return { ...this.achievements };
    }
    
    return {
      completed: new Set(Array.isArray(achievements.completed) ? achievements.completed : []),
      statistics: {
        totalClicks: Math.max(0, achievements.statistics?.totalClicks || 0),
        maxCombo: Math.max(0, achievements.statistics?.maxCombo || 0),
        resourcesCollected: achievements.statistics?.resourcesCollected || {},
        totalResourcesCollected: Math.max(0, achievements.statistics?.totalResourcesCollected || 0)
      }
    };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
  addResource(resourceName, amount) {
    if (this.isDestroyed || !RESOURCES.includes(resourceName)) return false;
    
    const currentAmount = this.resources[resourceName] || 0;
    const newAmount = this.validateResource(resourceName, currentAmount + amount);
    this.resources[resourceName] = newAmount;
    return true;
  }

  spendResource(resourceName, amount) {
    if (this.isDestroyed || !RESOURCES.includes(resourceName)) return false;
    
    const currentAmount = this.resources[resourceName] || 0;
    if (currentAmount < amount) return false;
    
    this.resources[resourceName] = currentAmount - amount;
    return true;
  }

  canAffordResources(costs) {
    if (this.isDestroyed) return false;
    
    return Object.entries(costs).every(([resource, amount]) => {
      const available = this.resources[resource] || 0;
      return available >= amount;
    });
  }

  spendResources(costs) {
    if (this.isDestroyed || !this.canAffordResources(costs)) return false;
    
    Object.entries(costs).forEach(([resource, amount]) => {
      this.spendResource(resource, amount);
    });
    
    return true;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–ï–ó –¥–∞–Ω–Ω—ã—Ö –∑–æ–Ω
getSaveData() {
  if (this.isDestroyed) {
    console.warn('‚ö†Ô∏è GameState.getSaveData: Object is destroyed, returning null');
    return null;
  }

  try {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–π–¥–∞
    let raidState = null;
    if (this.raidManager && this.raidManager.isRaidInProgress) {
      raidState = {
        activeRaid: this.raidManager.activeRaid,
        isRaidInProgress: this.raidManager.isRaidInProgress,
        raidStartTime: this.raidManager.raidStartTime,
        raidProgress: this.raidManager.raidProgress,
        autoClickerWasActive: this.raidManager.autoClickerWasActive,
        savedAt: Date.now()
      };
      console.log('üíæ Including active raid state in save:', raidState);
    }

    const saveData = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (–ë–ï–ó —ç–Ω–µ—Ä–≥–∏–∏)
      resources: this.resources ? { ...this.resources } : {},
      
      // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞
      energy: this.energy ? { ...this.energy } : {
        current: GAME_CONSTANTS.INITIAL_ENERGY,
        max: GAME_CONSTANTS.INITIAL_MAX_ENERGY,
        lastRegenTime: Date.now(),
        totalConsumed: 0,
        totalRegenerated: 0
      },
      
      // –ö–æ–º–±–æ
      combo: this.combo ? { ...this.combo } : { 
        count: 0, 
        deadline: 0, 
        lastZone: null, 
        lastAngle: null 
      },
      
      // Skill Points
      skillPoints: this.validateSkillPoints(this.skillPoints || 0),
      
      // –¶–µ–ª–µ–≤–∞—è –∑–æ–Ω–∞
      targetZone: this.targetZone || 0,
      
      // –ó–¥–∞–Ω–∏—è
      buildings: this.buildings ? { ...this.buildings } : {},
      
      // –ù–∞–≤—ã–∫–∏
      skills: this.skills ? { ...this.skills } : {},
      
      // –°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
      skillStates: this.skillStates ? { ...this.skillStates } : {},
      
      // –ú–∞—Ä–∫–µ—Ç
      market: this.market ? { ...this.market } : {},
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      achievements: {
        completed: Array.from(this.achievements.completed || []),
        statistics: { ...this.achievements.statistics }
      },
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–π–¥–æ–≤
      raids: this.raids ? { 
        ...this.raids,
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–π–¥ –∞–∫—Ç–∏–≤–µ–Ω
        ...(raidState ? {
          activeRaid: raidState.activeRaid,
          isRaidInProgress: raidState.isRaidInProgress,
          raidStartTime: raidState.raidStartTime,
          raidProgress: raidState.raidProgress,
          autoClickerWasActive: raidState.autoClickerWasActive
        } : {})
      } : {
        completed: [],
        specialRewards: {},
        statistics: {
          totalRaids: 0,
          successfulRaids: 0,
          resourcesGained: {},
          peopleLost: 0
        },
        activeRaid: null,
        isRaidInProgress: false,
        raidStartTime: 0,
        raidProgress: 0,
        autoClickerWasActive: false
      },
      
      // –ù–û–í–û–ï: –û—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–π–¥–∞ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
      raidState: raidState,
      
      // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
      buffs: [],
      debuffs: [],
      blockedUntil: 0,
      effectStates: {
        starPowerClicks: 0,
        shieldBlocks: 0,
        heavyClickRequired: {},
        reverseDirection: 1,
        frozenCombo: false
      },
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      saveTimestamp: Date.now(),
      saveVersion: '1.0.10' // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    Object.keys(saveData.resources).forEach(resource => {
      const value = saveData.resources[resource];
      if (typeof value !== 'number' || isNaN(value) || value < 0) {
        console.warn(`Invalid resource value for ${resource}: ${value}, setting to 0`);
        saveData.resources[resource] = 0;
      }
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏
    saveData.energy = this.validateEnergy(saveData.energy);

    console.log('‚úÖ GameState.getSaveData: Save data created successfully');
    return saveData;

  } catch (error) {
    console.error('‚ùå GameState.getSaveData: Error creating save data:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return {
      resources: {},
      energy: {
        current: GAME_CONSTANTS.INITIAL_ENERGY,
        max: GAME_CONSTANTS.INITIAL_MAX_ENERGY,
        lastRegenTime: Date.now(),
        totalConsumed: 0,
        totalRegenerated: 0
      },
      combo: { count: 0, deadline: 0, lastZone: null, lastAngle: null },
      skillPoints: 0,
      targetZone: 0,
      buildings: {},
      skills: {},
      skillStates: {},
      market: {},
      achievements: {
        completed: [],
        statistics: {
          totalClicks: 0,
          maxCombo: 0,
          resourcesCollected: {},
          totalResourcesCollected: 0
        }
      },
      raids: {
        completed: [],
        specialRewards: {},
        statistics: {
          totalRaids: 0,
          successfulRaids: 0,
          resourcesGained: {},
          peopleLost: 0
        },
        activeRaid: null,
        isRaidInProgress: false,
        raidStartTime: 0,
        raidProgress: 0,
        autoClickerWasActive: false
      },
      buffs: [],
      debuffs: [],
      blockedUntil: 0,
      effectStates: {
        starPowerClicks: 0,
        shieldBlocks: 0,
        heavyClickRequired: {},
        reverseDirection: 1,
        frozenCombo: false
      },
      saveTimestamp: Date.now(),
      saveVersion: '1.0.10'
    };
  }
}
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–ï–ó —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–æ–Ω–∞–º–∏
loadSaveData(data) {
  if (this.isDestroyed || !data || typeof data !== 'object') {
    throw new Error('Invalid save data or GameState is destroyed');
  }

  console.log('üì• Loading save data into GameState...');

  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
  if (data.resources && typeof data.resources === 'object') {
    Object.entries(data.resources).forEach(([resource, value]) => {
      if (RESOURCES.includes(resource)) {
        this.resources[resource] = this.validateResource(resource, value);
      }
    });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
  if (data.energy && typeof data.energy === 'object') {
    this.energy = this.validateEnergy(data.energy);
  } else {
    this.energy = {
      current: GAME_CONSTANTS.INITIAL_ENERGY,
      max: GAME_CONSTANTS.INITIAL_MAX_ENERGY,
      lastRegenTime: Date.now(),
      totalConsumed: 0,
      totalRegenerated: 0
    };
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–±–æ
  this.combo = this.validateCombo(data.combo);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º skill points
  this.skillPoints = this.validateSkillPoints(data.skillPoints);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º targetZone –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ ZoneManager
  this.targetZone = data.targetZone || 0;

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–¥–∞–Ω–∏—è
  if (data.buildings && typeof data.buildings === 'object') {
    Object.entries(this.buildings).forEach(([buildingId, defaultBuilding]) => {
      if (data.buildings[buildingId]) {
        const building = data.buildings[buildingId];
        this.buildings[buildingId] = {
          level: Math.max(0, Math.floor(building.level || 0)),
          active: Boolean(building.active)
        };
      }
    });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤—ã–∫–∏
  if (data.skills && typeof data.skills === 'object') {
    Object.entries(this.skills).forEach(([skillId, defaultSkill]) => {
      if (data.skills[skillId]) {
        const skill = data.skills[skillId];
        this.skills[skillId] = {
          level: Math.max(0, Math.floor(skill.level || 0))
        };
      }
    });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
  if (data.skillStates && typeof data.skillStates === 'object') {
    this.skillStates = {
      ...this.skillStates,
      ...data.skillStates
    };
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä–∫–µ—Ç
  if (data.market && typeof data.market === 'object') {
    this.market = {
      dailyDeals: Array.isArray(data.market.dailyDeals) ? data.market.dailyDeals : [],
      purchaseHistory: Array.isArray(data.market.purchaseHistory) ? data.market.purchaseHistory : [],
      reputation: Math.max(0, Math.floor(data.market.reputation || 0)),
      permanentBonuses: data.market.permanentBonuses || {}
    };
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  if (data.achievements && typeof data.achievements === 'object') {
    this.achievements = this.validateAchievements(data.achievements);
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π–¥–æ–≤ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–π–¥–∞
  if (data.raids && typeof data.raids === 'object') {
    this.raids = {
      completed: Array.isArray(data.raids.completed) ? data.raids.completed : [],
      specialRewards: data.raids.specialRewards || {},
      statistics: {
        totalRaids: Math.max(0, data.raids.statistics?.totalRaids || 0),
        successfulRaids: Math.max(0, data.raids.statistics?.successfulRaids || 0),
        resourcesGained: data.raids.statistics?.resourcesGained || {},
        peopleLost: Math.max(0, data.raids.statistics?.peopleLost || 0)
      },
      // –í–ê–ñ–ù–û: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–π–¥–∞
      activeRaid: data.raids.activeRaid || null,
      isRaidInProgress: Boolean(data.raids.isRaidInProgress),
      raidStartTime: data.raids.raidStartTime || 0,
      raidProgress: Math.max(0, Math.min(100, data.raids.raidProgress || 0)),
      autoClickerWasActive: Boolean(data.raids.autoClickerWasActive)
    };
  } else {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–π–¥–æ–≤
    this.raids = {
      completed: [],
      specialRewards: {},
      statistics: {
        totalRaids: 0,
        successfulRaids: 0,
        resourcesGained: {},
        peopleLost: 0
      },
      activeRaid: null,
      isRaidInProgress: false,
      raidStartTime: 0,
      raidProgress: 0,
      autoClickerWasActive: false
    };
  }

  // –ù–û–í–û–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑ raidState (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ—Ç—Å—è –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–º –¥–∞–Ω–Ω—ã–º)
  if (data.raidState && typeof data.raidState === 'object') {
    console.log('üì• Found raidState backup, checking if newer...');
    
    const raidStateSaveTime = data.raidState.savedAt || 0;
    const regularSaveTime = data.saveTimestamp || 0;
    
    // –ï—Å–ª–∏ raidState –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–π–¥
    if (data.raidState.isRaidInProgress && 
        (raidStateSaveTime >= regularSaveTime || !this.raids.isRaidInProgress)) {
      
      console.log('üì• Using raidState backup as it\'s more recent or contains active raid');
      
      this.raids.activeRaid = data.raidState.activeRaid;
      this.raids.isRaidInProgress = data.raidState.isRaidInProgress;
      this.raids.raidStartTime = data.raidState.raidStartTime;
      this.raids.raidProgress = data.raidState.raidProgress;
      this.raids.autoClickerWasActive = data.raidState.autoClickerWasActive;
    }
  }

  // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º activeRaidBackup (–∏–∑ –∫–æ—Ä–Ω—è saveData)
  if (data.activeRaidBackup && typeof data.activeRaidBackup === 'object') {
    console.log('üì• Found activeRaidBackup, using as fallback...');
    
    if (!this.raids.isRaidInProgress) {
      this.raids.activeRaid = { id: data.activeRaidBackup.raidId };
      this.raids.isRaidInProgress = true;
      this.raids.raidStartTime = data.activeRaidBackup.startTime;
      this.raids.raidProgress = data.activeRaidBackup.progress;
      this.raids.autoClickerWasActive = data.activeRaidBackup.autoClickerWasActive;
    }
  }

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  this.buffs = [];
  this.debuffs = [];
  this.blockedUntil = 0;
  this.effectStates = {
    starPowerClicks: 0,
    shieldBlocks: 0,
    heavyClickRequired: {},
    reverseDirection: 1,
    frozenCombo: false
  };

  this.lastTimestamp = Date.now();
  
  console.log('‚úÖ GameState data loaded successfully');
  console.log('üìä Raid state after load:', {
    isRaidInProgress: this.raids.isRaidInProgress,
    activeRaid: this.raids.activeRaid?.id || 'none',
    startTime: this.raids.raidStartTime,
    progress: this.raids.raidProgress
  });
}

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  isValid() {
    return !this.isDestroyed && 
           this.resources && 
           this.combo && 
           this.energy &&
           typeof this.skillPoints === 'number';
  }

  // –°–±—Ä–æ—Å–∏—Ç—å –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  reset() {
    if (this.isDestroyed) return;
    
    console.log('üîÑ Resetting GameState to defaults...');
    this.initializeState();
  }

  // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ destroy –¥–ª—è CleanupManager
  destroy() {
    if (this.isDestroyed) return;
    
    console.log('üßπ Destroying GameState...');
    
    this.isDestroyed = true;
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
    this.resources = null;
    this.energy = null;
    this.combo = null;
    this.buildings = null;
    this.skills = null;
    this.skillStates = null;
    this.market = null;
    this.achievements = null;
    this.buffs = null;
    this.debuffs = null;
    this.effectStates = null;
    
    // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    this.buffManager = null;
    this.energyManager = null;
    this.achievementManager = null;
    this.buildingManager = null;
    this.skillManager = null;
    this.marketManager = null;
    this.zoneManager = null; // –ù–û–í–û–ï: —Å—Å—ã–ª–∫–∞ –Ω–∞ ZoneManager
    
    console.log('‚úÖ GameState destroyed');
  }
}